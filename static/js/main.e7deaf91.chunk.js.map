{"version":3,"sources":["styles/colors.ts","components/Sidebar/styles.ts","pages/available.ts","styles/typography.ts","components/Sidebar/Sidebar.tsx","components/PageHeader/styles.ts","i18n.ts","svg/uk.svg","svg/spain.svg","utils/internationalization.ts","components/SvgIcon/SvgIcon.tsx","components/SelectLang/SelectLang.tsx","components/PageHeader/PageHeader.tsx","pages/layout.ts","utils/determine_style.ts","contexts/inputs.ts","components/ChartTooltip/ChartTooltip.tsx","components/BinomialChart/BinomialChart.tsx","utils/arrays.ts","components/Result/Result.tsx","styles/display.ts","components/NoInputCards/No2/No2.tsx","components/BinomialProb/BinomialProb.tsx","components/ResultGroup/ResultGroup.tsx","components/BinomialTable/styles.ts","components/BinomialTable/BinomialTable.tsx","pages/PageTemplate/PageTemplate.tsx","components/InputGroups/BinomialInput/BinomialInput.tsx","functions/general.ts","functions/binomials.ts","functions/shared.ts","pages/Binomial/Binomial.tsx","components/InputGroups/PascalInput/PascalInput.tsx","functions/pascal.ts","pages/Pascal/Pascal.tsx","pages/Home/styles.ts","components/LandingChart/LandingChart.tsx","pages/Home/Home.tsx","components/InputGroups/HypergeometricInput/HypergeometricInput.tsx","functions/hypergeometric.ts","pages/Hypergeometric/Hypergeometric.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["dark","background","text","sidebarText","sidebarBg","result","scrollBarBg","scrollBarThumb","chart_barNormal","chart_barHighlight","chart_gridColor","landing_chart","code","disabled_link","light","SidebarContainer","styled","nav","props","theme","Header","H1","SideMain","main","SideFooter","footer","SideNav","NavButton","Text","selected","disabled","home","id","url","title","landingPage","select","icon","pageOptions","defaultPage","HomeHeader","HomeSubTitle","H2","StyledLink","Link","Sidebar","current_page","translate","useTranslation","t","useState","filter","item","options","to","map","option","iconSize","className","href","target","rel","packageJSON","version","StyledNavbar","Navbar","StyledSwitch","Switch","window","location","origin","pathname","i18n","use","Backend","LanguageDetector","initReactI18next","init","backend","loadPath","homepage","fallbackLng","debug","interpolation","escapeValue","i18n_localstorage","available_langs","flags","esFlag","enFlag","validLang","to_test","out","ImgContainer","img","SvgIcon","src","name","alt","LangSelect","Select","ofType","SelectLang","currentLang","setCurrentLang","langs","setLangs","useEffect","local","localStorage","getItem","lang","getLang","items","itemRenderer","handleClick","toRender","flag","onClick","active","onItemSelect","console","log","newLang","changeLanguage","setItem","setLang","filterable","rightIcon","minimal","PageHeader","isDark","toggleTheme","align","Alignment","LEFT","RIGHT","alignIndicator","checked","onChange","innerLabel","innerLabelChecked","large","minSideBarWidth","ViewPort","div","SideContainer","AppPageContainer","PageFrame","Column","noGrow","height","width","noPad","margin","Row","Container","OverflowContainer","PageContainer","isCellHighlight","value","highlight","String","Array","includes","PrecisionContext","createContext","StyledDivider","Divider","ChartTooltip","payload","label","variable","isArray","innerPayload","sanitizeTooltipProps","roundPrecision","useContext","toFixed","BinomialChart","data","themeContext","ThemeContext","BarChart","CartesianGrid","strokeDasharray","XAxis","dataKey","tick","fill","YAxis","Tooltip","content","Bar","entry","index","color","BarColor","Cell","range","from","step","length","_","i","stringRange","StyledResult","Result","precision","math","StyledCallout","Callout","NoNAndP","a","b","BinomialProb","handleTab","validInput","probabilities","varLabel","isNaN","panel","punctual","No2","accum_left","accum_right","ResultGroup","results","validResults","displayValue","undefined","texLabel","StyledTable","Table","BinomialTable","table","isLoading","numRows","columnWidths","headers","concat","header","cellRenderer","row","col","intent","loading","renderCell","PageTemplate","input","analysis","chart","noInputs","BinomialInput","handleSampleSize","handleSuccessProb","handleSuccessFound","setRoundPrecision","extraPanel","sampleSize","min","onValueChange","minorStepSize","placeholder","max","stepSize","factorial","n","res","combinatory","binomialModel","r","p","accumulatedLeft","total","x","accumulatedRight","variance","stdDeviation","Math","sqrt","assymetry","kurtosis","partialLeftExpected","partialRightExpected","analysis_labels","defaultTable","defaultResults","Binomial","setSampleSize","successProbability","setSuccessProbability","NaN","successFound","setSuccessFound","setValidInput","setResults","setValidResults","setProbabilities","tableData","setTableData","chartData","setChartData","dataTo","setDataTo","setHighlight","opType","setOpType","handleType","getProbabilities","useDebounce","tab","hl","handleHighlight","newTable","push","createTable","getAnalysis","probs_from_table","Provider","valueNum","valueStr","parseFloat","size","PascalInput","probability","BinomialAccumulatedLeft","Pascal","dataFrom","setDataFrom","toHighlight","LandingContainer","LandingBackground","HeaderContainer","ChartControls","StyledEditableText","EditableText","SizeInput","H3","createRandomChart","prob","entries","chart_data","createLandingChart","LandingChart","playAnimation","setProb","useInterval","new_prob","ResponsiveContainer","stroke","Home","setPlayAnimation","setSize","newSize","parseInt","cleanSize","maxLength","prev","handleTotalSize","handleTotalSuccess","N","R","expectedValue","Hypergeometric","totalSize","setTotalSize","totalSuccess","setTotalSuccess","HypergeometricInput","FocusStyleManager","onlyShowFocusOnTabs","App","useLocation","useLocalStorage","setIsDark","currentPage","setCurrentPage","current_location","substring","page","find","fallback","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e7deaf91.chunk.js","sourcesContent":["import Itheme from '../types/theme'\n\nexport const dark: Itheme = {\n    background: '#2F3437',\n    text: '#EBEBEB',\n    sidebarText: '#EBEBEB',\n    sidebarBg: '#1B222A',\n    result: '#19A6FF',\n\n    scrollBarBg: '#262A2C',\n    scrollBarThumb: '#171D25',\n\n    chart_barNormal: '#828282',\n    chart_barHighlight: '#19A6FF',\n    chart_gridColor: '#555',\n    landing_chart: '#0D5E91',\n    code: '#59C0FF',\n    disabled_link: '#777',\n}\n\nexport const light: Itheme = {\n    background: '#FFFFFF',\n    text: '#37352F',\n    sidebarText: '#37352F',\n    sidebarBg: '#EBEBEB',\n    result: '#0C527E',\n\n    scrollBarBg: '#EBEBEB',\n    scrollBarThumb: '#888',\n\n    chart_barNormal: '#414141',\n    chart_barHighlight: '#19A6FF',\n    chart_gridColor: '#CCCCCC',\n    landing_chart: '#50A9E1',\n    code: '#0C527E',\n    disabled_link: '#777',\n}\n","import { Text, H1 } from '@blueprintjs/core'\nimport styled from 'styled-components'\n\nexport const SidebarContainer = styled.nav`\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n    width: 100%;\n    color: ${props => props.theme.sidebarText};\n    background-color: ${ props => props.theme.sidebarBg };\n`\n\nexport const Header = styled(H1)`\n    font-size: 2.5em !important;\n    line-height: 1.2em !important;\n    font-weight: bold;\n    word-wrap: break-word;\n    width: 100%;\n    margin: 1em 0;\n    text-align: center;\n\n    code {\n        font-size: .9em;\n        padding-left: .1em;\n    }\n`\n\nexport const SideMain = styled.main`\n    position: relative;\n    /* padding-top: 3em; */\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n`\n\nexport const SideFooter = styled.footer`\n    position: absolute;\n    bottom: 0;\n    width: 100%;\n    padding: 0 1em;\n    align-items: flex-start;\n`\nexport const SideNav = styled.nav`\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n    width: 100%;\n    margin-left: .5em;\n    padding-top: 3em;\n\n    > * {\n        padding: .5em 0;\n    }\n`\n\ntype NavProp = {\n    selected: boolean,\n    disabled: boolean,\n}\n\nexport const NavButton = styled(Text)<NavProp>`\n    display: flex;\n    font-size: 1.5em;\n    align-items: baseline;\n    padding-left: .5em;\n\n    color: ${props => (\n        props.selected ? props.theme.code\n        :\n        props.disabled ? props.theme.disabled_link\n        : 'inherit'\n    )};\n    border-left: ${props => (\n        props.selected ?\n            `4px solid ${props.theme.code}`\n        : 'none'\n    )};\n\n    &:hover {\n        border-left: 4px solid;\n    }\n`\n","import { IPageInfo } from \"../types/pages\"\n\n// All available pages\nconst home: IPageInfo = {\n    id: 'home',\n    url: '',\n    title: 'pages-home',\n    disabled: false,\n    landingPage: false,\n    select: true,\n    icon: 'home'\n}\n\nconst binomial: IPageInfo = {\n    id: 'binomial',\n    url: 'binomial',\n    title: 'pages-binomial',\n    disabled: false,\n    landingPage: true,\n    select: true,\n}\n\nconst pascal: IPageInfo = {\n    id: 'pascal',\n    url: 'pascal',\n    title: 'pages-pascal',\n    disabled: false,\n    landingPage: true,\n    select: true,\n}\n\nconst hypergeometric: IPageInfo = {\n    id: 'hypergeometric',\n    url: 'hypergeometric',\n    title: 'pages-hypergeometric',\n    disabled: false,\n    landingPage: true,\n    select: true,\n}\n\nconst coming_soon: IPageInfo = {\n    id: 'more_soon',\n    url: '',\n    title: 'pages-binomial',\n    disabled: true,\n    landingPage: false,\n    select: true,\n    icon: 'plus'\n}\n\n// Array of all of them\nconst pageOptions: IPageInfo[] = [\n    home,\n    binomial,\n    pascal,\n    hypergeometric,\n    coming_soon,\n]\n\nconst defaultPage = home\n\nconst getAvailable = (): string[] => {\n    return pageOptions.map(item => item.id)\n}\n\nconst getLandingPageOptions = (): IPageInfo[] => {\n    return pageOptions.filter(item => item.landingPage)\n}\n\nconst getSelectOptions = (): IPageInfo[] => {\n    return pageOptions.filter(item => item.select)\n}\n\n\nexport {\n    home,\n    binomial,\n    pascal,\n    hypergeometric,\n    coming_soon,\n    pageOptions,\n    defaultPage,\n    getAvailable,\n    getLandingPageOptions,\n    getSelectOptions,\n}\n","import { H1, H2 } from \"@blueprintjs/core\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nconst HomeHeader = styled(H1)`\n    text-align: center;\n    font-size: 5em !important;\n    line-height: 1em !important;\n    font-weight: bold;\n    padding: .2em;\n    border-radius: .1em;\n\n    /* background-color: ${props => props.theme.background + \"CC\"};\n    backdrop-filter: blur( 4px );\n    -webkit-backdrop-filter: blur( 4px ); */\n\n`\nconst HomeSubTitle = styled(H2)`\n    /* text-align: center; */\n    font-size: 3em !important;\n    margin-top: .5em;\n    margin-bottom: 2em;\n\n    padding: .5em;\n    border-radius: .1em;\n    /* background-color: ${props => props.theme.background + \"AA\"};\n    backdrop-filter: blur( 4px );\n    -webkit-backdrop-filter: blur( 4px ); */\n`\nconst StyledLink = styled(Link)`\n    color: inherit !important;\n\n    code {\n        color: ${props => props.theme.code } !important ;\n    }\n\n`\n\n\nexport {\n    HomeHeader,\n    HomeSubTitle,\n    StyledLink\n}\n","import React, { useState } from 'react'\nimport { H4, H5, H6, Icon } from '@blueprintjs/core'\nimport { useTranslation } from 'react-i18next'\n\nimport { IPageInfo } from '../../types/pages'\nimport packageJSON from '../../../package.json'\nimport {\n    SidebarContainer,\n    Header,\n    SideMain,\n    SideFooter,\n    SideNav,\n    NavButton,\n} from './styles'\nimport { getSelectOptions } from '../../pages/available'\nimport { StyledLink } from '../../styles/typography'\n\ntype IProps = {\n    readonly current_page: IPageInfo,\n}\n\nconst Sidebar = ({\n    current_page,\n}: IProps ) => {\n\n    const { t: translate } = useTranslation();\n\n    const [options] = useState(getSelectOptions())\n\n    return (\n        <SidebarContainer>\n            <Header>\n                <StyledLink to=\"/\">Probab<code>/ly</code></StyledLink>\n            </Header>\n\n            <SideMain>\n                <SideNav>\n                    {\n                        options.map(option => (\n                            <StyledLink to={option.disabled ? '#' : option.url}>\n                                <NavButton\n                                    selected={current_page.id === option.id}\n                                    disabled={option.disabled}\n                                >\n                                    <Icon icon={option.icon ?? \"function\"} iconSize={15}/>&nbsp;\n                                    {translate(`select-${option.id}`)}\n                                </NavButton>\n                            </StyledLink>\n                        ))\n                    }\n                </SideNav>\n                <SideFooter>\n                    <H4>\n                        <Icon className=\"bp3-text-muted\" icon=\"git-branch\" />&nbsp;\n                        {translate('view-on')}&nbsp;\n                        <a href=\"https://github.com/diegoasanch/probably\" target=\"_blank\" rel=\"noopener noreferrer\">\n                            GitHub\n                        </a>\n                    </H4>\n                    <H5 className=\"bp3-text-muted\">\n                        version: {packageJSON.version}\n                    </H5>\n                    <H6 className=\"bp3-text-muted\">\n                        <Icon icon=\"code\" />&nbsp;\n                        {translate('with')} 💖&nbsp;\n                        {translate('by')}&nbsp;\n                        <a href=\"https://github.com/diegoasanch\" target=\"_blank\" rel=\"noopener noreferrer\">\n                            Diego.\n                        </a>\n                    </H6>\n                </SideFooter>\n            </SideMain>\n        </SidebarContainer>\n    )\n}\n\nexport default Sidebar\n","import { Navbar } from '@blueprintjs/core'\nimport styled from 'styled-components'\nimport { Switch } from '@blueprintjs/core'\n\nexport const StyledNavbar = styled(Navbar)`\n    width: 100%;\n    position: sticky;\n    top: 0;\n\n    &.bp3-navbar {\n        background-color: ${ props => props.theme.sidebarBg};\n    }\n`\n\nexport const StyledSwitch = styled(Switch)`\n    margin: .2em;\n`\n","import i18n from 'i18next'\nimport Backend from 'i18next-http-backend'\nimport LanguageDetector from 'i18next-browser-languagedetector'\nimport { initReactI18next } from 'react-i18next'\nimport { homepage } from '../package.json'\n\nconst { origin, pathname } = window.location\n// console.log(origin, pathname)\n// console.log(`Deployed translations  ${homepage}/locales/{{lng}}/translation.json`)\n// console.log(`Local translations  ${origin}${pathname}/locales/{{lng}}/translation.json`)\n\ni18n\n    .use(Backend)\n    .use(LanguageDetector)\n    .use (initReactI18next)\n    .init({\n        backend: {\n          loadPath: (\n              process.env.NODE_ENV === 'production' ?\n              `${homepage}/locales/{{lng}}/translation.json`\n              :\n              `${origin}${pathname}/locales/{{lng}}/translation.json`\n            ),\n        },\n        fallbackLng: 'es',\n        debug: true,\n        interpolation: {\n            escapeValue: false\n        }\n    })\n\nexport default i18n\n","export default __webpack_public_path__ + \"static/media/uk.64f4888d.svg\";","export default __webpack_public_path__ + \"static/media/spain.12ca02a6.svg\";","import i18n from \"../i18n\"\nimport enFlag from '../svg/uk.svg'\nimport esFlag from '../svg/spain.svg'\n\nconst DEFAULT_LANG = 'es'\nconst i18n_localstorage = 'i18nextLng'\n\nexport type ILang = 'es' | 'en'\n\nconst available_langs: ILang[] = [\n    'es',\n    'en',\n]\n\nconst flags = {\n    'es': esFlag,\n    'en': enFlag,\n}\n\nconst setLang = (newLang: string): void => {\n    i18n.changeLanguage(newLang);\n    window.localStorage.setItem(i18n_localstorage, newLang)\n\n}\n\nconst getLang = (): ILang => {\n    const local = window.localStorage.getItem(i18n_localstorage) ?? 'es'\n    let lang : ILang = 'es'\n\n\n    if (local === 'es')\n        lang = 'es'\n    else if (local === 'en')\n        lang = 'en'\n\n    return lang\n\n    // For some reason this, does not work (should be type safe)\n    // if (available_langs.includes(local))\n    //     return local\n}\n\nconst validLang = (to_test: string): ILang => {\n    let out: ILang = 'es' // fallback\n\n    if (to_test === 'en')\n        out = 'en'\n\n    return out\n}\n\nexport {\n    DEFAULT_LANG,\n    available_langs,\n    flags,\n    setLang,\n    getLang,\n    validLang,\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst ImgContainer = styled.img`\n    height: 1.5em;\n`\n\ntype IProps = {\n    src: string,\n    name?: string\n}\n\nconst SvgIcon = ({ src, name }: IProps) => {\n    return (\n        <ImgContainer src={src} alt={name ?? 'svg-icon'} />\n    )\n}\n\nexport default SvgIcon\n","import React, { useEffect, useState } from 'react'\nimport { Select } from '@blueprintjs/select'\nimport { available_langs, validLang, getLang, ILang, setLang, flags } from '../../utils/internationalization'\nimport { Button, MenuItem } from '@blueprintjs/core'\nimport SvgIcon from '../SvgIcon'\n\nconst LangSelect = Select.ofType<string>()\n\ntype IClickHandler = {\n    handleClick: (event: React.MouseEvent<HTMLElement, MouseEvent>) => void,\n}\n\nconst SelectLang = () => {\n\n    const [currentLang, setCurrentLang] = useState<ILang>('es')\n    const [langs, setLangs] = useState<ILang[]>([])\n\n    const handleSelect = (item: string) => {\n        console.log({item})\n        let newLang = validLang(item)\n        setCurrentLang(newLang)\n        setLang(newLang)\n    }\n\n    useEffect(() => {\n        setCurrentLang(getLang())\n        setLangs(available_langs)\n    }, [])\n\n    const RenderLang = (item: string, {handleClick}: IClickHandler) => {\n        let toRender = validLang(item)\n        const flag = flags[toRender]\n\n        return (\n            <MenuItem\n                key={item}\n                text={item}\n                onClick={handleClick}\n                active={currentLang === item}\n                icon={<SvgIcon src={flag} name={currentLang} /> }\n            />\n        )\n    }\n\n    return (\n        <LangSelect\n            items={langs}\n            itemRenderer={RenderLang}\n            onItemSelect={handleSelect}\n            filterable={false}\n        >\n            <Button\n                icon=\"globe-network\"\n                text={currentLang}\n                rightIcon=\"caret-down\"\n                minimal\n            />\n        </LangSelect>\n    )\n}\n\nexport default SelectLang\n","import React from 'react'\nimport {\n    NavbarGroup,\n    NavbarHeading,\n    Alignment\n} from '@blueprintjs/core'\n\nimport { StyledNavbar, StyledSwitch } from './styles'\nimport { useTranslation } from 'react-i18next'\nimport SelectLang from '../SelectLang'\n\n\ntype Iprops = {\n    title: string,\n    readonly isDark: boolean,\n    toggleTheme: () => void,\n}\n\nconst PageHeader = ({ title, isDark, toggleTheme }: Iprops) => {\n\n    const { t } = useTranslation()\n\n    return (\n        <StyledNavbar>\n            <NavbarGroup align={Alignment.LEFT}>\n                <NavbarHeading>{t(title)}</NavbarHeading>\n            </NavbarGroup>\n\n            <NavbarGroup align={Alignment.RIGHT}>\n                <SelectLang />\n                <StyledSwitch\n                    alignIndicator={Alignment.RIGHT}\n                    checked={isDark}\n                    onChange={toggleTheme}\n                    innerLabel=\"🌞\"\n                    innerLabelChecked=\"🌚\"\n                    large\n                />\n            </NavbarGroup>\n        </StyledNavbar>\n    )\n}\n\nexport default PageHeader\n","import styled from 'styled-components'\n\n// const sideBarWidth = '20vw'\nconst minSideBarWidth = '250px'\n\ntype IContainer = {\n    width?: 'auto' |  '100%' | '' | 'max-content' | string ,\n    height?: string,\n    margin?: string,\n    noPad?: boolean,\n    noGrow?: boolean,\n}\n\nconst ViewPort = styled.div`\n    width: 100%;\n    height: 100vh;\n    display: flex;\n    flex-direction: row;\n\n    > * ::-webkit-scrollbar {\n        background-color: ${props => props.theme.scrollBarBg};\n        width: 10px;\n        height: 10px;\n        border-radius: 10px;\n    }\n    > * ::-webkit-scrollbar-thumb {\n        background-color: ${props => props.theme.scrollBarThumb};\n        border-radius: 5px;\n    }\n`\n\nconst SideContainer = styled.div`\n    width: ${minSideBarWidth};\n    height: 100%;\n    min-width: ${minSideBarWidth};\n    /* max-wid */\n`\n\nconst AppPageContainer = styled.div`\n    width: calc(100% - ${minSideBarWidth});\n    height: 100%;\n    overflow-y: auto;\n    min-width: ${minSideBarWidth};\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n`\n\nconst PageFrame = styled.main`\n    position: relative;\n    width: 100%;\n    overflow: auto;\n    margin: 0;\n    background-color: ${ props => props.theme.background };\n    color: ${props => props.theme.text };\n    max-width: 1050px;\n    height: 100%;\n`\n\n\n\nconst Column = styled.div<IContainer>`\n    display: flex;\n    flex-direction: column;\n    flex-grow: ${props => props.noGrow ? 0 : 1};\n    height: ${ props => props.height ?? '100%'};\n    width: ${ props => props.width ?? '100%'};\n    min-width: max-content;\n\n    margin: ${props => (\n        props.noPad ? '0' : (\n            props.margin ?? '1em'\n        )\n    )};\n`\n\nconst Row = styled.div<IContainer>`\n    display: flex;\n    flex-direction: row;\n    margin: ${props => props.noPad ? '0' : 'inherit'};\n`\nconst Container = styled(Column)<IContainer>`\n    width: 100%;\n    height: 100%;\n    min-width: max-content;\n    margin: 0;\n`\nconst OverflowContainer = styled(Container)<IContainer>`\n    overflow: auto;\n`\n\nconst PageContainer = styled(Container)<IContainer>`\n    padding: 2em;\n    margin: 0;\n    overflow: auto;\n`\n\nexport {\n    ViewPort,\n    SideContainer,\n    PageFrame,\n    Column,\n    Row,\n    Container,\n    OverflowContainer,\n    AppPageContainer,\n    PageContainer,\n}\n","const isCellHighlight = (\n    value: number | string,\n    highlight: string | string[] | undefined,\n): boolean => {\n\n    let is_highlight\n    value = String(value)\n\n    if (typeof(highlight) === 'string')\n        is_highlight =  highlight === value\n\n    else if (highlight instanceof Array)\n        is_highlight = highlight.includes(value)\n    else\n        is_highlight = true\n\n    // console.log({ is_highlight, value, highlight })\n    return is_highlight\n}\n\nexport {\n    isCellHighlight\n}\n","import { createContext } from \"react\";\n\nconst PrecisionContext = createContext<number>(4)\n\nexport {\n    PrecisionContext,\n}\n","import React, { useContext } from 'react'\nimport { Card, Divider } from '@blueprintjs/core';\nimport styled from 'styled-components'\nimport { PrecisionContext } from '../../contexts/inputs';\n\nconst StyledDivider = styled(Divider)`\n    margin: .8em 0;\n`\n\ntype ITooltipProps = {\n    active: boolean,\n    label: string,\n    value: number,\n    variable: string,\n}\n\nconst sanitizeTooltipProps = (props: any): ITooltipProps => {\n    let { active, payload, label, variable } = props\n    active = !!active\n\n    let value = 0\n\n    if (typeof(label) !== 'string')\n        label = String(label)\n\n    if (Array.isArray(payload)) {\n        const innerPayload = payload[0]\n\n        if (typeof(innerPayload?.value) === 'number')\n            value = innerPayload.value\n    }\n\n    return { active, label, value, variable }\n}\n\nconst ChartTooltip = (props: any) => {\n\n    const { active, label, value, variable } = sanitizeTooltipProps(props)\n    const roundPrecision = useContext(PrecisionContext)\n    // console.log({ props, variable })\n\n    if (!active)\n        return <></>\n\n    return (\n        <Card>\n            <code>{ variable }</code> = {label}\n            <StyledDivider />\n            <code>P({label})</code> = {value.toFixed(roundPrecision)}\n        </Card>\n    )\n}\nexport default ChartTooltip\n","import React, { useContext } from 'react'\nimport { IBarChartItem } from '../../types/tables'\nimport { BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip } from 'recharts';\nimport { OverflowContainer } from '../../pages/layout';\nimport { ThemeContext } from 'styled-components'\nimport { isCellHighlight } from '../../utils/determine_style';\nimport ChartTooltip from '../ChartTooltip';\n\n\ntype IProps = {\n    data: IBarChartItem[],\n    highlight?: string | string[],\n    variable: string,\n}\n\nconst BinomialChart = ({ data, highlight, variable }: IProps ) => {\n\n    const themeContext = useContext(ThemeContext)\n\n    const BarColor = (entry: IBarChartItem): string => {\n        const is_highlight = isCellHighlight(entry.label, highlight)\n        return is_highlight ? themeContext.chart_barHighlight : themeContext.chart_barNormal;\n    }\n\n    return (\n        <OverflowContainer>\n            <BarChart\n                width={450}\n                height={300}\n                data={data}\n            >\n                <CartesianGrid strokeDasharray=\"5\" />\n                <XAxis dataKey=\"label\" tick={{ fill: themeContext.text}} />\n                <YAxis tick={{ fill: themeContext.text}} />\n                <Tooltip content={(props: any ) => (\n                    <ChartTooltip variable={variable} {...props} />\n                )} />\n\n                <Bar dataKey=\"value\">\n                    { data.map((entry, index) => {\n                        const color = BarColor(entry)\n                        return <Cell key={`cell-${index}`} fill={color} />\n                    })}\n                </Bar>\n            </BarChart>\n        </OverflowContainer>\n    )\n}\n\nexport default BinomialChart\n","/**\n * from and to inclusive\n * @param from\n * @param to\n * @param step\n * @returns\n */\nconst range = (from: number, to: number, step=1): number[] => {\n    const length = to - from\n    if (length > 0)\n        return [...Array(length + 1)].map((_, i) => from + i * step);\n    return []\n}\n\nconst stringRange = (from: number, to: number, step=1): string[] => {\n    return range(from, to, step).map(item => String(item))\n}\n\nexport {\n    range,\n    stringRange\n}\n","import React from 'react'\nimport { Text } from '@blueprintjs/core'\nimport styled from 'styled-components'\nimport TeX from '@matejmazur/react-katex'\n\nconst StyledResult = styled(Text)`\n    font-size: 1.4em;\n    margin: .2em;\n    margin-left: .5em;\n\n    .number {\n        font-weight: bold;\n        font-size: 1.2em;\n        color: ${props => props.theme.result};\n    }\n`\n\ntype IProps = {\n    name: string,\n    result: number | undefined,\n    precision: number,\n}\n\n/**\n * ## `name` string Will be rendered using [KaTeX](https://katex.org/docs/supported.html)\n * If result is undefined, an animation will be displayed\n */\nconst Result = ({ name, result, precision= 4 }: IProps) => {\n    return (\n        <StyledResult>\n\n            <TeX math={name + ' = '} />&nbsp;\n            <span className={`number` + (typeof(result) === 'undefined' ? ' bp3-skeleton' : '')}>\n                { result ?   // if no result, show skeleton loader animation\n                    result.toFixed(precision)\n                  :\n                    '0.000000' // just some placeholder for the skeleton\n                }\n            </span>\n        </StyledResult>)\n}\n\nexport default Result\n","import { Callout } from '@blueprintjs/core'\nimport styled from 'styled-components'\n\nconst StyledCallout = styled(Callout)`\n    width: max-content;\n    padding: 1.5em;\n`\n\nexport {\n    StyledCallout\n}\n","import React from 'react'\nimport { H3, Icon } from '@blueprintjs/core'\nimport { useTranslation } from 'react-i18next'\nimport { StyledCallout } from '../../../styles/display'\n\ntype IProps = {\n    a: string,\n    b?: string,\n}\n\nconst NoNAndP = ({ a, b }: IProps) => {\n    const { t } = useTranslation()\n\n    return (\n        <StyledCallout>\n            <H3>\n                <span className=\"bp3-text-muted\">\n                    <Icon icon=\"calculator\" iconSize={25} />&nbsp;\n                </span>\n                {t('specify')} <code>{a}</code>\n                { b &&\n                    <>\n                        &nbsp;{t('and')} <code>{b}</code>\n                    </>\n                }\n            </H3>\n        </StyledCallout>\n    )\n}\n\nexport default NoNAndP\n","import React, { useContext } from 'react'\nimport { Card, Tab, Tabs } from '@blueprintjs/core'\nimport TeX from '@matejmazur/react-katex'\nimport Result from '../Result'\nimport { IOperationType } from '../../types/pages'\nimport { IProbabilities } from '../../types/tables'\nimport No2 from '../NoInputCards/No2'\nimport { PrecisionContext } from '../../contexts/inputs'\n\ntype IProps = {\n    handleTab: (tab: IOperationType) => void,\n    variable: number,\n    validInput: boolean,\n    probabilities: IProbabilities | undefined,\n    varLabel: string,\n}\n\nconst BinomialProb = ({\n    handleTab,\n    variable,\n    validInput,\n    probabilities,\n    varLabel,\n}: IProps) => {\n\n    validInput = validInput && !isNaN(variable)\n    const roundPrecision = useContext(PrecisionContext)\n\n    return (\n        <Card>\n            <Tabs id=\"operation\" onChange={handleTab}>\n                <Tab\n                    title={<TeX math=\"P(r)\" />}\n                    id=\"p\"\n                    panel={\n                        !validInput ?\n                            <No2 a={varLabel} />\n                        :\n                            <Result\n                                name={`P(\\\\text{V.A.} = ${variable})`}\n                                result={probabilities?.punctual}\n                                precision={roundPrecision}\n                            />\n                    }\n                />\n                <Tab\n                    title={<TeX math=\"F(r)\"/>}\n                    id=\"f\"\n                    panel={\n                        !validInput ?\n                            <No2 a={varLabel} />\n                        :\n                            <Result\n                                name={`P(\\\\text{V.A.} \\\\leq ${variable})`}\n                                result={probabilities?.accum_left}\n                                precision={roundPrecision}\n                            />\n                    }\n                />\n                <Tab\n                    title={<TeX math=\"G(r)\"/>}\n                    id=\"g\"\n                    panel={\n                        !validInput ?\n                            <No2 a={varLabel} />\n                        :\n                            <Result\n                                name={`P(\\\\text{V.A.} \\\\geq ${variable})`}\n                                result={probabilities?.accum_right}\n                                precision={roundPrecision}\n                            />\n                    }\n                />\n            </Tabs>\n\n        </Card>\n    )\n}\n\nexport default BinomialProb\n","import React, { useContext } from 'react'\nimport { PrecisionContext } from '../../contexts/inputs'\nimport { IResult } from '../../types/tables'\nimport Result from '../Result/Result'\n\ntype IProps = {\n    results: IResult[],\n    validResults: boolean,\n}\n\nconst ResultGroup = ({ results, validResults }: IProps) => {\n\n    const roundPrecision = useContext(PrecisionContext)\n\n    return (\n        <>\n            { results.map(( item, index ) => {\n                const displayValue = validResults ? item.value : undefined\n                return (\n                    <Result\n                        name={item.texLabel}\n                        result={displayValue}\n                        precision={roundPrecision}\n                        key={`result-${index}`}\n                    />\n                )\n            })}\n        </>\n    )\n}\n\nexport default ResultGroup\n","import { Table } from '@blueprintjs/table'\nimport styled from 'styled-components'\n\nexport const StyledTable = styled(Table)`\n    height: min-content;\n`\n","import React, { useContext } from 'react'\nimport { Cell, Column } from '@blueprintjs/table'\nimport { ITable } from '../../types/tables'\nimport { isCellHighlight } from '../../utils/determine_style'\nimport { StyledTable } from './styles'\nimport { PrecisionContext } from '../../contexts/inputs'\n\ntype IProps = {\n    table: ITable,\n    isLoading: boolean,\n    highlight?: string | string[],\n}\n\n/**\n * The first column is the thinnest\n */\nconst getColumnWidths = (length: number) => {\n    return [35].concat(Array(length - 1).fill(75))\n}\n\nconst BinomialTable = ({ table, highlight, isLoading }: IProps) => {\n\n    const roundPrecision = useContext(PrecisionContext)\n\n    const renderCell = (row: number, col: number) => {\n        // Determine if higlightable from first value of row\n        const intent = isCellHighlight(table.content[row][0], highlight) ? 'primary' : 'none'\n\n        return (\n            <Cell intent={intent} loading={isLoading}>\n                { table.content[row][col]\n                    .toFixed(col ? roundPrecision : 0)\n                }\n            </Cell>\n        )\n    }\n\n    // console.table(table.content)\n\n    return (\n        <StyledTable\n            numRows={table.content.length}\n            columnWidths={getColumnWidths(table.headers.length)}\n        >\n            {table.headers.map((header: string, i: number) => (\n                <Column name={header} cellRenderer={row => renderCell(row, i)} />\n            ))}\n        </StyledTable>\n    )\n}\n\nexport default BinomialTable\n","import React from 'react'\nimport { Column, PageContainer, Row } from '../layout'\nimport { H1 } from '@blueprintjs/core'\nimport { useTranslation } from 'react-i18next'\nimport NoInput from '../../components/NoInputCards/No2'\n\n\n// For displaying the specify a and b card when no input\ntype INoInputs = {\n    a: string,\n    b: string,\n}\n\ntype IProps = {\n    input: JSX.Element,\n    analysis: JSX.Element,\n    table: JSX.Element,\n    chart: JSX.Element,\n    validInput: boolean,\n    noInputs: INoInputs\n}\n\n/**\n * This is a stateles component, it is intended to be the blueprint for all of\n * the pages, receives the page components to render and places them accordingly\n * @returns\n */\nconst PageTemplate = ({ input, analysis, table, chart, validInput, noInputs }: IProps) => {\n\n    const { t } = useTranslation()\n\n\n    return (\n        <PageContainer>\n            <Row>\n                <Column>\n                    <H1>Input</H1>\n                    { input }\n                </Column>\n                <Column>\n                    <H1>{t('analysis')}</H1>\n                    { validInput ?\n                        analysis\n                      :\n                        <NoInput {...noInputs} />\n                    }\n                </Column>\n            </Row>\n            <Row>\n                <Column width=\"max-content\" noGrow>\n                    <H1>{t('table')}</H1>\n                    { validInput ?\n                        table\n                      :\n                        <NoInput {...noInputs} />\n                    }\n                </Column>\n                <Column>\n                    <H1>{t('chart')}</H1>\n                    { validInput ?\n                        chart\n                      :\n                        <NoInput {...noInputs} />\n                    }\n                </Column>\n            </Row>\n        </PageContainer>\n    )\n}\n\nexport default PageTemplate\n","import { Label, NumericInput } from '@blueprintjs/core'\nimport React, { useContext } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { PrecisionContext } from '../../../contexts/inputs'\nimport { Column, Row } from '../../../pages/layout'\n\ntype StateSetter = (valueNum: number, valueStr: string) => void\n\ntype IProps = {\n    handleSampleSize: StateSetter,\n    handleSuccessProb: StateSetter,\n    handleSuccessFound: StateSetter,\n    setRoundPrecision: (value: number) => void,\n    extraPanel?: JSX.Element,\n    sampleSize: number,\n}\n\nconst BinomialInput = ({\n    handleSampleSize,\n    handleSuccessProb,\n    handleSuccessFound,\n    setRoundPrecision,\n    extraPanel,\n    sampleSize,\n\n}: IProps) => {\n\n    const { t } = useTranslation()\n    const roundPrecision = useContext(PrecisionContext)\n\n    return (\n        <Row noPad>\n            <Column margin=\".8em 1em\" noGrow >\n                <Label>\n                    <code>n</code> = {t('sample-size')}\n                    <NumericInput\n                        min={1}\n                        onValueChange={handleSampleSize}\n                        minorStepSize={0.0001}\n                        placeholder=\"n\"\n                    />\n                </Label>\n                <Label>\n                    <code>p</code> = {t('success-prob')}\n                    <NumericInput\n                        min={0}\n                        max={1}\n                        stepSize={0.1}\n                        onValueChange={handleSuccessProb}\n                        placeholder=\"p\"\n                    />\n                </Label>\n                <Label>\n                    <code>r</code> = {t('success-found')}\n                    <NumericInput\n                        min={0}\n                        onValueChange={handleSuccessFound}\n                        max={sampleSize}\n                        placeholder=\"r\"\n                    />\n                </Label>\n            </Column>\n            <Column margin=\".8em 1em\" noGrow >\n                <Label>\n                    {t('round-precision')} <code> (0.xf)</code>\n                    <NumericInput\n                        min={0}\n                        onValueChange={setRoundPrecision}\n                        value={roundPrecision ?? 'x'}\n                        placeholder=\"x\"\n                    />\n                </Label>\n                { extraPanel }\n            </Column>\n        </Row>\n    )\n}\n\nexport default BinomialInput\n","const factorial = (n: number): number => {\n    if (n === 0)\n        return 1\n\n    let res = 1\n    for (let i = 1; i <= n; i++)\n        res *= i\n    return res\n}\n\n/**\n * `a` choose `b`\n */\nconst combinatory = (a: number, b: number): number => {\n    if (a === b)\n        return 1\n\n    const numerator = factorial(a)\n    const denominator = factorial(b) * factorial(a - b)\n\n    return numerator / denominator\n}\n\nexport {\n    factorial,\n    combinatory,\n}\n","import { ITable, IProbabilities, IResult, IBarChartItem } from \"../types/tables\"\nimport { combinatory } from \"./general\"\n\n\n\nconst binomialModel = (r: number, n: number, p: number): number => {\n    const nCr = combinatory(n, r)\n    const result = nCr * (p ** r) * ((1 - p) ** (n - r))\n    return result\n}\n\nconst accumulatedLeft = (r: number, n: number, p: number): number => {\n    let total = 0\n\n    for (let x = 0; x <= r; x++)\n        total += binomialModel(x, n, p)\n\n    return total\n}\n\nconst accumulatedRight = (r: number, n: number, p: number): number => {\n    let total = 0\n\n    for (let x = r; x <= n; x++)\n        total += binomialModel(x, n, p)\n\n    return total\n}\n\n/**\n * \"Esperanza matematica\" o mu\n * @param n Cantidad de observaciones\n * @param p Probabilidad de exito\n * @returns Esperanza matematica\n */\nconst expectedValue = (n: number, p: number): number => {\n    return n * p\n}\n\nconst variance = (n: number, p: number): number => {\n    return n * p * (1 - p)\n}\n\nconst stdDeviation = (n: number, p: number): number => {\n    return Math.sqrt(variance(n, p))\n}\n\nconst assymetry = (n: number, p: number): number => {\n    return (1 - 2 * p) / Math.sqrt(n * p * (1 - p))\n}\nconst kurtosis = (n: number, p: number): number => {\n    return 3 + ((1 - 6 * p * (1 - p)) / (n * p * (1 - p)))\n}\n\nconst partialLeftExpected = (r: number, n: number, p: number): number => {\n    let total = 0\n    for (let x = 0; x <= r; x++)\n        total += (x * binomialModel(x, n, p))\n    return total\n}\nconst partialRightExpected = (r: number, n: number, p: number): number => {\n    let total = 0\n    for (let x = r; x <= n; x++)\n        total += (x * binomialModel(x, n, p))\n    return total\n}\n\n\nconst createTable = (\n    n: number,\n    p: number,\n    from?: number,\n    to?: number,\n): ITable => {\n\n    const headers = ['r', 'P(r)', 'F(r)', 'G(r)', 'H(r)', 'J(r)']\n    const content: number[][] = []\n\n    from = from ?? 0\n    to = to ?? n\n\n    for (let r = from; r <= to; r++ ) {\n        content.push([\n            r,\n            binomialModel(r, n, p),\n            accumulatedLeft(r, n, p),\n            accumulatedRight(r, n, p),\n            partialLeftExpected(r, n, p),\n            partialRightExpected(r, n, p),\n        ])\n    }\n    return {headers, content}\n}\n\nconst createLandingChart = (n: number, p: number): IBarChartItem[] => {\n    const chart_data: IBarChartItem[] = []\n\n    for (let r = 0; r <= n; r++) {\n        chart_data.push(\n            {\n                label: String(r),\n                value: binomialModel(r, n, p)\n            }\n        )\n    }\n    return chart_data\n}\n\nconst analysis_labels = {\n    expected: \"E(r) = \\\\mu\",\n    variance: \"V(r) = \\\\sigma^2\",\n    std_dev: \"D(r) = \\\\sigma\",\n    assymetry: \"As = \\\\alpha_3\",\n    kurtosis: \"Ku = \\\\alpha_4\"\n}\n\nconst getAnalysis = (sampleSize: number, successProbability: number): IResult[]  => {\n    const results: IResult[] = [\n        {\n            texLabel: analysis_labels.expected,\n            value: expectedValue(sampleSize, successProbability),\n        },\n        {\n            texLabel: analysis_labels.variance,\n            value: variance(sampleSize, successProbability),\n        },\n        {\n            texLabel: analysis_labels.std_dev,\n            value: stdDeviation(sampleSize, successProbability),\n        },\n        {\n            texLabel: analysis_labels.assymetry,\n            value: assymetry(sampleSize, successProbability),\n        },\n        {\n            texLabel: analysis_labels.kurtosis,\n            value: kurtosis(sampleSize, successProbability),\n        },\n    ]\n\n    return results\n}\n\nconst getProbabilities = (r: number, n: number, p: number): IProbabilities => {\n    const results: IProbabilities = {\n        punctual: binomialModel(r, n, p),\n        accum_left: accumulatedLeft(r, n, p),\n        accum_right: accumulatedRight(r, n, p),\n    }\n    return results\n}\n\nconst defaultTable: ITable = {\n    headers: ['r', 'P(r)', 'F(r)', 'G(r)', 'H(r)', 'J(r)'],\n    content: [\n        [0, 0, 0 ,0, 0, 0], [0, 0, 0 ,0, 0, 0],\n        [0, 0, 0 ,0, 0, 0], [0, 0, 0 ,0, 0, 0],\n        [0, 0, 0 ,0, 0, 0], [0, 0, 0 ,0, 0, 0],\n        [0, 0, 0 ,0, 0, 0], [0, 0, 0 ,0, 0, 0],\n        [0, 0, 0 ,0, 0, 0], [0, 0, 0 ,0, 0, 0],\n    ]\n}\n\nexport {\n    binomialModel,\n    accumulatedLeft,\n    accumulatedRight,\n    expectedValue,\n    variance,\n    stdDeviation,\n    assymetry,\n    kurtosis,\n    partialLeftExpected,\n    partialRightExpected,\n    createTable,\n    createLandingChart,\n    getAnalysis,\n    getProbabilities,\n    defaultTable,\n}\n","import { IResult } from \"../types/tables\"\n\nconst analysis_labels = {\n    expected: \"E(r) = \\\\mu\",\n    variance: \"V(r) = \\\\sigma^2\",\n    std_dev: \"D(r) = \\\\sigma\",\n    assymetry: \"As = \\\\alpha_3\",\n    kurtosis: \"Ku = \\\\alpha_4\"\n}\n\nconst defaultResults: IResult[] = [\n    { texLabel: analysis_labels.expected, value: 0 }\n]\n\nexport {\n    analysis_labels,\n    defaultResults\n}\n","import React, { useEffect, useState } from 'react'\nimport BinomialChart from '../../components/BinomialChart'\nimport { IOperationType } from '../../types/pages'\nimport { stringRange } from '../../utils/arrays'\n\nimport BinomialProb from '../../components/BinomialProb'\nimport ResultGroup from '../../components/ResultGroup'\nimport BinomialTable from '../../components/BinomialTable'\nimport { useDebounce } from 'react-use'\n\nimport { IBarChartItem, ITable, IProbabilities, IResult } from '../../types/tables'\nimport { Spinner } from '@blueprintjs/core'\nimport PageTemplate from '../PageTemplate'\nimport { PrecisionContext } from '../../contexts/inputs'\n\nimport BinomialInput from '../../components/InputGroups/BinomialInput'\nimport {\n    createTable,\n    defaultTable,\n    getAnalysis,\n    getProbabilities\n} from '../../functions/binomials'\nimport { defaultResults } from '../../functions/shared'\n\nfunction Binomial() {\n\n    const [sampleSize, setSampleSize] = useState(0) // n\n    const [successProbability, setSuccessProbability] = useState(0) // p\n    const [successFound, setSuccessFound] = useState<number>(NaN) // r\n    const [validInput, setValidInput] = useState(false)\n\n    const [roundPrecision, setRoundPrecision] = useState(5)\n    const [results, setResults] = useState<IResult[]>(defaultResults)\n    const [validResults, setValidResults] = useState(false)\n    const [probabilities, setProbabilities] = useState<IProbabilities | undefined>()\n\n    const [tableData, setTableData] = useState<ITable | undefined>()\n    const [chartData, setChartData] = useState<IBarChartItem[] | undefined>(([ {label: '', value: 0} ]) as IBarChartItem[])\n\n    // const [dataFrom, setDataFrom] = useState<number>(0)\n    const [dataTo, setDataTo] = useState(0)\n    const [highlight, setHighlight] = useState<string | string[]>('')\n    const [opType, setOpType] = useState<IOperationType>('p')\n\n    const handleSampleSize = (valueNum: number, valueStr: string ) => {\n        setSampleSize(parseFloat(valueStr) ?? 0)\n    }\n    const handleSuccessProb = (valueNum: number, valueStr: string ) => {\n        setSuccessProbability(parseFloat(valueStr) ?? 0)\n    }\n    const handleSuccessFound = (valueNum: number, valueStr: string ) => {\n        setSuccessFound(parseFloat(valueStr) ?? 0)\n        setProbabilities(undefined)\n    }\n    const handleTab = (tab: IOperationType) => {\n        setOpType(tab)\n    }\n\n    const handleHighlight = (tab: IOperationType, r: number, n: number) => {\n        let hl: string | string[]\n\n        if (tab === 'f')\n            hl = stringRange(0, r)\n        else if (tab === 'g')\n            hl = stringRange(r, n)\n        else\n            hl = String(r)\n\n        setHighlight(hl)\n    }\n\n    const handleType = (r: number, n: number, p: number) => {\n        setProbabilities(getProbabilities(r, n, p))\n    }\n\n    // For the calculations\n    useDebounce(() => {\n        handleType( successFound, sampleSize, successProbability)\n    }, 300, [sampleSize, successProbability, successFound])\n\n    useEffect(() => {\n        handleHighlight(opType, successFound, dataTo)\n    }, [successFound, dataTo, opType])\n\n    // for rendering the loaders\n    useEffect(() => {\n        setTableData(undefined)\n        setChartData(undefined)\n        setResults(defaultResults)\n        setValidResults(false)\n    }, [sampleSize, successProbability])\n\n    // Debouncing the calculations\n    useDebounce(() => {\n        const newTable = createTable(sampleSize, successProbability)\n        const analysis = getAnalysis(sampleSize, successProbability)\n\n        const probs_from_table = newTable.content.map(item => ({\n            label: String(item[0]),\n            value: item[1],\n        }))\n\n        setTableData(newTable)\n        setChartData(probs_from_table)\n        setDataTo(sampleSize)\n        setResults(analysis)\n        setValidResults(true)\n\n        // console.table(probs_from_table)\n\n    }, 300, [sampleSize, successProbability])\n\n    useEffect(() => {\n        const valid = !!(sampleSize && successProbability)\n        setValidInput(valid)\n        // console.log({ valid, sampleSize, successProbability})\n    }, [sampleSize, successProbability])\n\n    return (\n        <PrecisionContext.Provider value={roundPrecision}>\n            <PageTemplate\n                noInputs={{ a: 'n', b: 'p'}}\n                validInput={validInput}\n                input={\n                    <BinomialInput\n                        handleSampleSize={handleSampleSize}\n                        handleSuccessProb={handleSuccessProb}\n                        handleSuccessFound={handleSuccessFound}\n                        setRoundPrecision={setRoundPrecision}\n                        sampleSize={sampleSize}\n                        extraPanel={\n                            <BinomialProb\n                                handleTab={handleTab}\n                                variable={successFound}\n                                validInput={validInput}\n                                probabilities={probabilities}\n                                varLabel=\"r\"\n                            />\n                        }\n                    />\n                }\n                analysis={\n                    <ResultGroup\n                        validResults={validResults}\n                        results={results}\n                    /> }\n                table={\n                    <BinomialTable\n                        table={tableData || defaultTable}\n                        isLoading={!tableData}\n                        highlight={highlight}\n                    />\n                }\n                chart={\n                    (chartData ?\n                        <BinomialChart\n                            variable=\"r\"\n                            data={chartData}\n                            highlight={highlight}\n                        />\n                    :\n                        <Spinner size={100} />\n                    )\n                }\n            />\n        </PrecisionContext.Provider>\n    )\n}\n\nexport default Binomial\n","import { Label, NumericInput } from '@blueprintjs/core'\nimport React, { useContext } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { PrecisionContext } from '../../../contexts/inputs'\nimport { Column, Row } from '../../../pages/layout'\n\ntype StateSetter = (valueNum: number, valueStr: string) => void\n\ntype IProps = {\n    handleSampleSize: StateSetter,\n    handleSuccessProb: StateSetter,\n    handleSuccessFound: StateSetter,\n    setRoundPrecision: (value: number) => void,\n    extraPanel?: JSX.Element,\n    sampleSize: number,\n}\n\nconst PascalInput = ({\n    handleSampleSize,\n    handleSuccessProb,\n    handleSuccessFound,\n    setRoundPrecision,\n    extraPanel,\n    sampleSize,\n\n}: IProps) => {\n\n    const { t } = useTranslation()\n    const roundPrecision = useContext(PrecisionContext)\n\n    return (\n        <Row noPad>\n            <Column margin=\".8em 1em\" noGrow >\n                <Label>\n                    <code>r</code> = {t('success-found')}\n                    <NumericInput\n                        min={0}\n                        onValueChange={handleSuccessFound}\n                        placeholder=\"r\"\n                    />\n                </Label>\n                <Label>\n                    <code>p</code> = {t('success-prob')}\n                    <NumericInput\n                        min={0}\n                        max={1}\n                        stepSize={0.1}\n                        onValueChange={handleSuccessProb}\n                        placeholder=\"p\"\n                    />\n                </Label>\n                <Label>\n                    <code>n</code> = {t('sample-size')}\n                    <NumericInput\n                        min={1}\n                        onValueChange={handleSampleSize}\n                        minorStepSize={1}\n                        placeholder=\"n\"\n                    />\n                </Label>\n            </Column>\n            <Column margin=\".8em 1em\" noGrow >\n                <Label>\n                    {t('round-precision')} <code> (0.xf)</code>\n                    <NumericInput\n                        min={0}\n                        onValueChange={setRoundPrecision}\n                        value={roundPrecision ?? 'x'}\n                        placeholder=\"x\"\n                    />\n                </Label>\n                { extraPanel }\n            </Column>\n        </Row>\n    )\n}\n\nexport default PascalInput\n","import { ITable, IProbabilities, IResult } from \"../types/tables\"\nimport { combinatory } from \"./general\"\nimport { analysis_labels } from \"./shared\"\nimport { accumulatedLeft as BinomialAccumulatedLeft } from './binomials'\n\nconst probability = (n: number, r: number, p: number): number => {\n    const nCr_1 = combinatory((n - 1), (r - 1))\n    const result = nCr_1 * p**r * (1 - p)**(n-r)\n    return result\n}\n\nconst accumulatedLeft = (n: number, r: number, p: number): number => {\n    let total = 0\n\n    for (let x = r; x <= n; x++)\n        total += probability(x, r, p)\n\n    return total\n}\n\nconst accumulatedRight = (n: number, r: number, p: number, limit= 40): number => {\n    return BinomialAccumulatedLeft(r-1, n-1, p)\n}\n\nconst expectedValue = (r: number, p: number): number => {\n    return r / p\n}\n\nconst variance = (r: number, p: number): number => {\n    return (r * (1 - p)) / p**2\n}\n\nconst stdDeviation = (r: number, p: number): number => {\n    return Math.sqrt(variance(r, p))\n}\n\nconst assymetry = (r: number, p: number): number => {\n    return (2 - p) / Math.sqrt(r * (1 - p))\n}\n\nconst kurtosis = (r: number, p: number): number => {\n    return 3 + ((p**2 - 6 * p + 6) / (r * (1 - p)))\n}\n\nconst partialLeftExpected = (n: number, r: number, p: number): number => {\n    return (r / p) * accumulatedLeft(n + 1, r + 1, p)\n}\n\nconst createTable = (\n    r: number,\n    p: number,\n    from= 0,\n    to= 60,\n): ITable => {\n\n    const headers = ['n', 'P(n)', 'F(n)', 'G(n)', 'H(n)']\n    // const headers = ['r', 'P(r)', 'F(r)', 'G(r)', 'H(r)', 'J(r)']\n    const content: number[][] = []\n\n    from = from ?? 0\n\n    for (let n = from; n <= to; n++ ) {\n        content.push([\n            n,\n            probability(n, r, p),\n            accumulatedLeft(n, r, p),\n            accumulatedRight(n, r, p),\n            partialLeftExpected(n, r, p),\n            // partialRightExpected(n, r, p),\n        ])\n    }\n    return {headers, content}\n}\n\n\nconst getAnalysis = (successFound: number, successProbability: number): IResult[]  => {\n    const results: IResult[] = [\n        {\n            texLabel: analysis_labels.expected,\n            value: expectedValue(successFound, successProbability),\n        },\n        {\n            texLabel: analysis_labels.variance,\n            value: variance(successFound, successProbability),\n        },\n        {\n            texLabel: analysis_labels.std_dev,\n            value: stdDeviation(successFound, successProbability),\n        },\n        {\n            texLabel: analysis_labels.assymetry,\n            value: assymetry(successFound, successProbability),\n        },\n        {\n            texLabel: analysis_labels.kurtosis,\n            value: kurtosis(successFound, successProbability),\n        },\n    ]\n\n    return results\n}\n\nconst getProbabilities = (n: number, r: number, p: number): IProbabilities => {\n    const results: IProbabilities = {\n        punctual: probability(n, r, p),\n        accum_left: accumulatedLeft(n, r, p),\n        accum_right: accumulatedRight(n, r, p),\n    }\n    return results\n}\n\nconst defaultTable: ITable = {\n    headers: ['r', 'P(r)', 'F(r)', 'G(r)', 'H(r)'],\n    content: [\n        [0, 0, 0 ,0, 0], [0, 0, 0 ,0, 0],\n        [0, 0, 0 ,0, 0], [0, 0, 0 ,0, 0],\n        [0, 0, 0 ,0, 0], [0, 0, 0 ,0, 0],\n        [0, 0, 0 ,0, 0], [0, 0, 0 ,0, 0],\n        [0, 0, 0 ,0, 0], [0, 0, 0 ,0, 0],\n    ]\n}\n\nexport {\n    probability,\n    accumulatedLeft,\n    accumulatedRight,\n    expectedValue,\n    stdDeviation,\n    assymetry,\n    kurtosis,\n    partialLeftExpected,\n    createTable,\n    getAnalysis,\n    getProbabilities,\n    defaultTable,\n}\n","import React, { useEffect, useState } from 'react'\nimport BinomialChart from '../../components/BinomialChart'\nimport { IOperationType } from '../../types/pages'\nimport { stringRange } from '../../utils/arrays'\n\nimport BinomialProb from '../../components/BinomialProb'\nimport ResultGroup from '../../components/ResultGroup'\nimport BinomialTable from '../../components/BinomialTable'\nimport { useDebounce } from 'react-use'\n\nimport { IBarChartItem, ITable, IProbabilities, IResult } from '../../types/tables'\nimport { Spinner } from '@blueprintjs/core'\nimport PageTemplate from '../PageTemplate'\nimport { PrecisionContext } from '../../contexts/inputs'\n\nimport PascalInput from '../../components/InputGroups/PascalInput'\nimport {\n    createTable,\n    defaultTable,\n    getAnalysis,\n    getProbabilities\n} from '../../functions/pascal'\nimport { defaultResults } from '../../functions/shared'\n\nconst handleHighlight = (tab: IOperationType, n: number, from: number, to: number): string | string[] => {\n    let hl: string | string[]\n\n    if (tab === 'f')\n        hl = stringRange(from, n)\n    else if (tab === 'g')\n        hl = stringRange(n, to)\n    else\n        hl = String(n)\n\n    return hl\n}\n\nfunction Pascal() {\n\n    const [sampleSize, setSampleSize] = useState(NaN) // n\n    const [successProbability, setSuccessProbability] = useState(NaN) // p\n    const [successFound, setSuccessFound] = useState<number>(NaN) // r\n    const [validInput, setValidInput] = useState(false)\n\n    const [roundPrecision, setRoundPrecision] = useState(5)\n    const [results, setResults] = useState<IResult[]>(defaultResults)\n    const [validResults, setValidResults] = useState(false)\n    const [probabilities, setProbabilities] = useState<IProbabilities | undefined>()\n\n    const [tableData, setTableData] = useState<ITable | undefined>()\n    const [chartData, setChartData] = useState<IBarChartItem[] | undefined>(([ {label: '', value: 0} ]) as IBarChartItem[])\n\n    const [dataFrom, setDataFrom] = useState<number>(0)\n    // TODO: fix this disable\n    // eslint-disable-next-line\n    const [dataTo, setDataTo] = useState(60)\n    const [highlight, setHighlight] = useState<string | string[]>('')\n    const [opType, setOpType] = useState<IOperationType>('p')\n\n    const handleSampleSize = (valueNum: number, valueStr: string ) => {\n        setSampleSize(parseFloat(valueStr) ?? 0)\n        setProbabilities(undefined)\n    }\n    const handleSuccessProb = (valueNum: number, valueStr: string ) => {\n        setSuccessProbability(parseFloat(valueStr) ?? 0)\n    }\n    const handleSuccessFound = (valueNum: number, valueStr: string ) => {\n        const value = parseFloat(valueStr) ?? 0\n        setSuccessFound(value)\n        setDataFrom(value)\n    }\n    const handleTab = (tab: IOperationType) => {\n        setOpType(tab)\n    }\n\n    const handleType = (r: number, n: number, p: number) => {\n        setProbabilities(getProbabilities(n, r, p))\n    }\n\n    // For the  calculations\n    useDebounce(() => {\n        handleType( successFound, sampleSize, successProbability)\n    }, 300, [sampleSize, successProbability, successFound])\n\n    // For the higlights\n    useEffect(() => {\n        const toHighlight = handleHighlight(opType, sampleSize, dataFrom, dataTo)\n        setHighlight(toHighlight)\n    }, [sampleSize, opType, dataTo, dataFrom])\n\n    // for rendering the loaders\n    useEffect(() => {\n        setTableData(undefined)\n        setChartData(undefined)\n        setResults(defaultResults)\n        setValidResults(false)\n        setProbabilities(undefined)\n\n\n    }, [successFound, successProbability])\n\n    // Debouncing the table and chart calculations\n    useDebounce(() => {\n        const newTable = createTable(successFound, successProbability, dataFrom)\n        const analysis = getAnalysis(successFound, successProbability) // TODO: check (1)\n\n        const probs_from_table = newTable.content.map(item => ({\n            label: String(item[0]),\n            value: item[1],\n        }))\n\n        setTableData(newTable)\n        setResults(analysis)   // TODO: check (1)\n        setChartData(probs_from_table)\n        setValidResults(true)\n\n        // console.table(probs_from_table)\n\n    }, 300, [successFound, successProbability])\n\n    useEffect(() => {\n        const valid = !!(successFound && successProbability)\n        setValidInput(valid)\n    }, [successFound, successProbability])\n\n    return (\n        <PrecisionContext.Provider value={roundPrecision}>\n            <PageTemplate\n                noInputs={{ a: 'r', b: 'p' }}\n                validInput={validInput}\n                input={\n                    <PascalInput\n                        handleSampleSize={handleSampleSize}\n                        handleSuccessProb={handleSuccessProb}\n                        handleSuccessFound={handleSuccessFound}\n                        setRoundPrecision={setRoundPrecision}\n                        sampleSize={sampleSize}\n                        extraPanel={\n                            <BinomialProb\n                                handleTab={handleTab}\n                                variable={sampleSize}\n                                validInput={validInput}\n                                probabilities={probabilities}\n                                varLabel=\"n\"\n                            />\n                        }\n                    />\n                }\n                analysis={\n                    <ResultGroup\n                        validResults={validResults}\n                        results={results}\n                    /> }\n                table={\n                    <BinomialTable\n                        table={tableData || defaultTable}\n                        isLoading={!tableData}\n                        highlight={highlight}\n                    />\n                }\n                chart={\n                    (chartData ?\n                        <BinomialChart\n                            variable=\"n\"\n                            data={chartData}\n                            highlight={highlight}\n                        />\n                    :\n                        <Spinner size={100} />\n                    )\n                }\n            />\n        </PrecisionContext.Provider>\n    )\n}\n\nexport default Pascal\n","import { EditableText, H3 } from \"@blueprintjs/core\"\nimport styled from \"styled-components\"\n\nconst LandingContainer = styled.div`\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    position: relative;\n`\n\nconst LandingBackground = styled.div`\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    z-index: 0;\n`\nconst HeaderContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    z-index: 1;\n`\nconst ChartControls = styled.div`\n    display: flex;\n    flex-direction: row;\n    align-items: baseline;\n\n    position: absolute;\n    bottom: 0;\n    right: 0;\n    margin: 1em;\n`\nconst StyledEditableText = styled(EditableText)`\n    width: 1.6em;\n    .bp3-editable-text-content {\n        min-width: 1.8em !important;\n    }\n\n`\nconst SizeInput = styled(H3)`\n    margin-right: .5em;\n`\n\n\nexport {\n    LandingContainer,\n    LandingBackground,\n    HeaderContainer,\n    ChartControls,\n    StyledEditableText,\n    SizeInput,\n}\n","import React, { useContext, useState } from 'react'\nimport { useInterval } from 'react-use'\nimport { Bar, BarChart, CartesianGrid, Cell, ResponsiveContainer } from 'recharts'\nimport { ThemeContext } from 'styled-components'\nimport { createLandingChart } from '../../functions/binomials'\nimport { IBarChartItem } from '../../types/tables'\n\nconst createRandomChart = (prob: number, entries: number): IBarChartItem[] => {\n\n    // console.time('Creating table 📅')\n    const chart_data = createLandingChart(entries, prob)\n    // console.timeEnd('Creating table 📅')\n\n    return chart_data\n}\n\nconst INITIAL_PROB = 0.01\n\ntype IProps = {\n    playAnimation: boolean,\n    size: number,\n}\n\nconst LandingChart = ({ playAnimation, size }: IProps) => {\n\n    const themeContext = useContext(ThemeContext)\n    const [chartData, setChartData] = useState(createRandomChart(INITIAL_PROB, size))\n    const [prob, setProb] = useState(INITIAL_PROB)\n\n    useInterval(() => {\n        const new_prob = prob < 0.96 ? (prob + 0.04) : 0.04\n        setProb(new_prob)\n        setChartData(createRandomChart(new_prob, size))\n    }, playAnimation ? 800 : null)\n\n\n    return (\n        <ResponsiveContainer>\n            <BarChart data={chartData}>\n                <CartesianGrid strokeDasharray=\"2 5\" stroke={themeContext.chart_gridColor} />\n                <Bar dataKey=\"value\">\n                    { chartData.map(( entry, index) => (\n                        <Cell key={`cell-${index}`} fill={themeContext.landing_chart} />\n                    )) }\n                </Bar>\n            </BarChart>\n        </ResponsiveContainer>\n    )\n}\n\nexport default LandingChart\n","import React, { useState } from 'react'\nimport { HomeHeader, HomeSubTitle, StyledLink } from '../../styles/typography'\nimport TextLoop from \"react-text-loop\"\nimport { getLandingPageOptions } from '../available'\n// import { Link } from 'react-router-dom'\nimport { useTranslation } from 'react-i18next'\nimport { ChartControls, HeaderContainer, LandingBackground, LandingContainer, SizeInput, StyledEditableText } from './styles'\nimport LandingChart from '../../components/LandingChart'\nimport { Button } from '@blueprintjs/core'\n\nconst INITIAL_SIZE = 70\n\nconst cleanSize = (value: string): number => {\n    const newSize = parseInt(value)\n    let result: number\n\n    if (!isNaN(newSize)) {\n        if (newSize < 1)\n            result = 1\n        else if (newSize > 150)\n            result = 150\n        else\n            result = newSize\n    }\n    else if (value === '')\n        result = 0\n    else\n        result = INITIAL_SIZE\n\n    return result\n}\n\nconst Home = () => {\n\n    const { t } = useTranslation()\n    const [playAnimation, setPlayAnimation] = useState(true)\n    const [size, setSize] = useState(INITIAL_SIZE)\n\n    const toggleAnimation = () => {\n        setPlayAnimation( prev => !prev )\n    }\n\n\n    const handleSize = (value: string) => {\n        setSize(cleanSize(value))\n    }\n\n    return (\n        <LandingContainer>\n            <HeaderContainer>\n                <HomeHeader>\n                    Probability <br/> Distributions\n                </HomeHeader>\n                <HomeSubTitle>\n                    {t('calculate-pre')}&nbsp;\n                    <code>\n                        <TextLoop>\n                            {\n                                getLandingPageOptions().map(option => (\n                                    <StyledLink to={option.url}>{option.id}</StyledLink>\n                                ))\n                            }\n                        </TextLoop>\n                    </code>\n                    {t('calculate-post')}\n                </HomeSubTitle>\n\n            </HeaderContainer>\n\n            <LandingBackground>\n                <LandingChart playAnimation={playAnimation} size={size - 1} />\n                <ChartControls>\n                    <SizeInput>\n                        <code>\n                            n =&nbsp;\n                            <StyledEditableText\n                                value={String(size)}\n                                onChange={handleSize}\n                                maxLength={3}\n                            />\n                        </code>\n                    </SizeInput>\n                    <Button\n                        intent=\"primary\"\n                        icon={playAnimation ? 'pause' : 'play'}\n                        onClick={toggleAnimation}\n                        large\n                    />\n                </ChartControls>\n            </LandingBackground>\n        </LandingContainer>\n    )\n}\n\nexport default Home\n","import { Label, NumericInput } from '@blueprintjs/core'\nimport React, { useContext } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { PrecisionContext } from '../../../contexts/inputs'\nimport { Column, Row } from '../../../pages/layout'\n\ntype StateSetter = (value: React.SetStateAction<number>) => void\n\ntype IProps = {\n    handleTotalSize: StateSetter,\n    handleTotalSuccess: StateSetter,\n    handleSampleSize: StateSetter,\n    handleSuccessFound: StateSetter,\n    setRoundPrecision: (value: number) => void,\n    extraPanel?: JSX.Element,\n}\n\nconst PascalInput = ({\n    handleSampleSize,\n    handleTotalSize,\n    handleTotalSuccess,\n    handleSuccessFound,\n    setRoundPrecision,\n    extraPanel,\n\n}: IProps) => {\n\n    const { t } = useTranslation()\n    const roundPrecision = useContext(PrecisionContext)\n\n    return (\n        <Row noPad>\n            <Column margin=\".8em 1em\" noGrow >\n                <Label>\n                    <code>N</code> = {t('population-size')}\n                    <NumericInput\n                        min={0}\n                        stepSize={1}\n                        onValueChange={handleTotalSize}\n                        placeholder=\"N\"\n                    />\n                </Label>\n                <Label>\n                    <code>R</code> = {t('total-success')}\n                    <NumericInput\n                        min={0}\n                        stepSize={1}\n                        onValueChange={handleTotalSuccess}\n                        placeholder=\"N\"\n                    />\n                </Label>\n                <Label>\n                    <code>n</code> = {t('sample-size')}\n                    <NumericInput\n                        min={1}\n                        onValueChange={handleSampleSize}\n                        minorStepSize={1}\n                        placeholder=\"n\"\n                    />\n                </Label>\n                <Label>\n                    <code>r</code> = {t('success-found')}\n                    <NumericInput\n                        min={0}\n                        onValueChange={handleSuccessFound}\n                        placeholder=\"r\"\n                    />\n                </Label>\n\n            </Column>\n            <Column margin=\".8em 1em\" noGrow >\n                <Label>\n                    {t('round-precision')} <code> (0.xf)</code>\n                    <NumericInput\n                        min={0}\n                        onValueChange={setRoundPrecision}\n                        value={roundPrecision ?? 'x'}\n                        placeholder=\"x\"\n                    />\n                </Label>\n                { extraPanel }\n            </Column>\n        </Row>\n    )\n}\n\nexport default PascalInput\n","import { IProbabilities, IResult, ITable } from \"../types/tables\"\nimport { combinatory } from \"./general\"\nimport { analysis_labels } from \"./shared\"\n\nconst probability = (r: number, n: number, N: number, R: number): number => {\n    const numerator = combinatory(R, r) * combinatory(N - R, n - r)\n    const denominator = combinatory(N, n)\n\n    return numerator / denominator\n}\n\nconst accumulatedLeft = (r: number, n: number, N: number, R: number): number => {\n    let total = 0\n\n    for (let x = 0; x <= r; x++)\n        total += probability(x, n, N, R)\n\n    return total\n}\n\nconst accumulatedRight = (r: number, n: number, N: number, R: number): number => {\n    let total = 0\n\n    for (let x = r; x <= n; x++)\n        total += probability(x, n, N, R)\n\n    return total\n}\n\nconst expectedValue = (n: number, N: number, R: number): number => {\n    return n * (R / N)\n}\n\nconst variance = (n: number, N: number, R: number): number => {\n    return n * (R / N) * (1 - (R / N)) * ((N-n) / (N-1))\n}\n\nconst stdDeviation = (n: number, N: number, R: number): number => {\n    return Math.sqrt(variance(n, N, R))\n}\n\nconst assymetry = (n: number, N: number, R: number): number => {\n    const numerator = (N-2 * R) * (N-2 * n) * Math.sqrt(N-1)\n    const denominator = (N-2) * Math.sqrt(n * R * (N-R) * (N-n))\n\n    return numerator / denominator\n}\n\nconst kurtosis = (n: number, N: number, R: number): number => {\n    // What a hell of a function man\n    const part_1 = (N**2 * (N-1)) / (n * R * (N-2) * (N-3) * (N-R) * (N-n) )\n    const part_2a = N * (N+1)\n    const part_2b = 6 * n * (N-n)\n    const part_2c = 3 * (R / N**2) * (N-R) * (N**2 * (n-2) - N * n**2 + 6*n * (N-n))\n\n    return part_1 * (part_2a - part_2b + part_2c)\n}\n\nconst partialLeftExpected = (r: number, n: number, N: number, R: number): number => {\n    return n * (R / N) * accumulatedLeft(r-1, n-1, N-1, R-1)\n}\n\nconst createTable = (\n    n: number,\n    N: number,\n    R: number,\n): ITable => {\n\n    const headers = ['r', 'P(r)', 'F(r)', 'G(r)', 'H(r)']\n    // const headers = ['r', 'P(r)', 'F(r)', 'G(r)', 'H(r)', 'J(r)']\n\n    const content: number[][] = []\n\n\n    for (let r = 0; r <= n; r++ ) {\n        content.push([\n            r,\n            probability(r, n, N, R),\n            accumulatedLeft(r, n, N, R),\n            accumulatedRight(r, n, N, R),\n            partialLeftExpected(r, n, N, R),\n            // partialRightExpected(r, n, N, R),\n        ])\n    }\n    return {headers, content}\n}\n\nconst getAnalysis = (n: number, N: number, R: number): IResult[]  => {\n    const results: IResult[] = [\n        {\n            texLabel: analysis_labels.expected,\n            value: expectedValue(n, N, R),\n        },\n        {\n            texLabel: analysis_labels.variance,\n            value: variance(n, N, R),\n        },\n        {\n            texLabel: analysis_labels.std_dev,\n            value: stdDeviation(n, N, R),\n        },\n        {\n            texLabel: analysis_labels.assymetry,\n            value: assymetry(n, N, R),\n        },\n        {\n            texLabel: analysis_labels.kurtosis,\n            value: kurtosis(n, N, R),\n        },\n    ]\n    return results\n}\n\nconst getProbabilities = (r: number, n: number, N: number, R: number): IProbabilities => {\n    const results: IProbabilities = {\n        punctual: probability(r, n, N, R),\n        accum_left: accumulatedLeft(r, n, N, R),\n        accum_right: accumulatedRight(r, n, N, R),\n    }\n    return results\n}\n\n\nconst defaultTable: ITable = {\n    headers: ['n', 'P(n)', 'F(n)', 'G(n)', 'H(n)'],\n    content: [\n        [0, 0, 0 ,0, 0], [0, 0, 0 ,0, 0],\n        [0, 0, 0 ,0, 0], [0, 0, 0 ,0, 0],\n        [0, 0, 0 ,0, 0], [0, 0, 0 ,0, 0],\n        [0, 0, 0 ,0, 0], [0, 0, 0 ,0, 0],\n        [0, 0, 0 ,0, 0], [0, 0, 0 ,0, 0],\n    ]\n}\n\n\nexport {\n    createTable,\n    getAnalysis,\n    getProbabilities,\n    defaultTable,\n}\n","import React, { useEffect, useState } from 'react'\nimport BinomialChart from '../../components/BinomialChart'\nimport { IOperationType } from '../../types/pages'\nimport { stringRange } from '../../utils/arrays'\n\nimport BinomialProb from '../../components/BinomialProb'\nimport ResultGroup from '../../components/ResultGroup'\nimport BinomialTable from '../../components/BinomialTable'\nimport { useDebounce } from 'react-use'\n\nimport { IBarChartItem, ITable, IProbabilities, IResult } from '../../types/tables'\nimport { Spinner } from '@blueprintjs/core'\nimport PageTemplate from '../PageTemplate'\nimport { PrecisionContext } from '../../contexts/inputs'\n\nimport HypergeometricInput from '../../components/InputGroups/HypergeometricInput'\nimport {\n    createTable,\n    defaultTable,\n    getAnalysis,\n    getProbabilities\n} from '../../functions/hypergeometric'\nimport { defaultResults } from '../../functions/shared'\n\nconst handleHighlight = (tab: IOperationType, r: number, to: number, from=0): string | string[] => {\n    let hl: string | string[]\n\n    if (tab === 'f')\n        hl = stringRange(from, r)\n    else if (tab === 'g')\n        hl = stringRange(r, to)\n    else\n        hl = String(r)\n\n    return hl\n}\n\nfunction Hypergeometric() {\n\n    const [totalSize, setTotalSize] = useState(NaN) // N\n    const [totalSuccess, setTotalSuccess] = useState(NaN) // R\n    const [sampleSize, setSampleSize] = useState(NaN) // n\n    const [successFound, setSuccessFound] = useState<number>(NaN) // r\n\n    const [validInput, setValidInput] = useState(false)\n\n    const [roundPrecision, setRoundPrecision] = useState(5)\n    const [results, setResults] = useState<IResult[]>(defaultResults)\n    const [validResults, setValidResults] = useState(false)\n    const [probabilities, setProbabilities] = useState<IProbabilities | undefined>()\n\n    const [tableData, setTableData] = useState<ITable | undefined>()\n    const [chartData, setChartData] = useState<IBarChartItem[] | undefined>(([ {label: '', value: 0} ]) as IBarChartItem[])\n\n    const [highlight, setHighlight] = useState<string | string[]>('')\n    const [opType, setOpType] = useState<IOperationType>('p')\n\n    const handleTab = (tab: IOperationType) => {\n        setOpType(tab)\n    }\n\n    const handleType = (r: number, n: number, N: number, R: number) => {\n        setProbabilities(getProbabilities(r, n, N, R))\n    }\n\n    // For the panel animation\n    useEffect(() => {\n        setProbabilities(undefined)\n    }, [totalSize, totalSuccess, sampleSize, successFound])\n\n    // For the  calculations\n    useDebounce(() => {\n        handleType(successFound, sampleSize, totalSize, totalSuccess)\n    }, 300, [totalSize, totalSuccess, sampleSize, successFound])\n\n    // For the higlights\n    useEffect(() => {\n        const toHighlight = handleHighlight(opType, successFound, sampleSize)\n        setHighlight(toHighlight)\n    }, [successFound, sampleSize, opType])\n\n    // for rendering the loaders\n    useEffect(() => {\n        setTableData(undefined)\n        setChartData(undefined)\n        setResults(defaultResults)\n        setValidResults(false)\n        setProbabilities(undefined)\n\n    }, [totalSize, totalSuccess, sampleSize])\n\n    // Debouncing the table and chart calculations\n    useDebounce(() => {\n        const newTable = createTable(sampleSize, totalSize, totalSuccess)\n        const analysis = getAnalysis(sampleSize, totalSize, totalSuccess) // TODO: add J(r) (1)\n\n        const probs_from_table = newTable.content.map(item => ({\n            label: String(item[0]),\n            value: item[1],\n        }))\n\n        setTableData(newTable)\n        setResults(analysis)   // TODO: add J(r) (1)\n        setChartData(probs_from_table)\n        setValidResults(true)\n\n    }, 300, [totalSize, totalSuccess, sampleSize])\n\n    useEffect(() => {\n        const valid = !!(totalSize && totalSuccess && sampleSize)\n        setValidInput(valid)\n    }, [totalSize, totalSuccess, sampleSize])\n\n    return (\n        <PrecisionContext.Provider value={roundPrecision}>\n            <PageTemplate\n                noInputs={{ a: 'r', b: 'p' }}\n                validInput={validInput}\n                input={\n                    <HypergeometricInput\n                        handleTotalSize={setTotalSize} // N\n                        handleTotalSuccess={setTotalSuccess} // R\n                        handleSampleSize={setSampleSize} // n\n                        handleSuccessFound={setSuccessFound} // r\n                        setRoundPrecision={setRoundPrecision}\n                        extraPanel={\n                            <BinomialProb\n                                handleTab={handleTab}\n                                variable={successFound}\n                                validInput={validInput}\n                                probabilities={probabilities}\n                                varLabel=\"r\"\n                            />\n                        }\n                    />\n                }\n                analysis={\n                    <ResultGroup\n                        validResults={validResults}\n                        results={results}\n                    /> }\n                table={\n                    <BinomialTable\n                        table={tableData || defaultTable}\n                        isLoading={!tableData}\n                        highlight={highlight}\n                    />\n                }\n                chart={\n                    (chartData ?\n                        <BinomialChart\n                            variable=\"n\"\n                            data={chartData}\n                            highlight={highlight}\n                        />\n                    :\n                        <Spinner size={100} />\n                    )\n                }\n            />\n        </PrecisionContext.Provider>\n    )\n}\n\nexport default Hypergeometric\n","import React, { Suspense, useEffect, useState } from 'react'\nimport { useLocalStorage } from 'react-use'\nimport { dark, light } from './styles/colors'\nimport { ThemeProvider } from 'styled-components'\n\nimport { FocusStyleManager, H1, Spinner } from \"@blueprintjs/core\"\nimport Sidebar from './components/Sidebar'\nimport PageHeader from './components/PageHeader'\nimport { pageOptions, defaultPage } from './pages/available'\n\nimport {\n    ViewPort,\n    SideContainer,\n    AppPageContainer,\n    PageFrame\n} from './pages/layout'\nimport { HashRouter, Route, Switch, useLocation } from 'react-router-dom'\nimport Binomial from './pages/Binomial'\nimport Pascal from './pages/Pascal'\nimport Home from './pages/Home'\nimport Hypergeometric from './pages/Hypergeometric'\n\nFocusStyleManager.onlyShowFocusOnTabs()\n\nfunction App() {\n\n    const location = useLocation()\n\n    const [isDark, setIsDark] = useLocalStorage('isDark', false)\n    const [currentPage, setCurrentPage] = useState(defaultPage)\n\n    const toggleTheme = () => {\n        setIsDark(!isDark)\n    }\n\n    // Select curent page form url\n    useEffect(() => {\n        const current_location = location.pathname.substring(1)\n        console.log('Current location, location obj', { current_location, location })\n\n        const page = pageOptions.find(\n            item => item.url === current_location && !item.disabled\n        ) ?? defaultPage\n\n        console.log(\"Current page\")\n        console.log(current_location, page)\n        setCurrentPage(page)\n\n    // eslint-disable-next-line\n    }, [location.pathname])\n\n    return (\n        <Suspense fallback={<AppPageContainer> <Spinner /> </AppPageContainer>}>\n            <ThemeProvider theme={isDark ? dark : light}>\n                <ViewPort className={`.bp3-ui-text ${isDark ? 'bp3-dark' : ''}`}>\n\n                    <SideContainer>\n                        <Sidebar current_page={currentPage} />\n                    </SideContainer>\n\n                    <AppPageContainer>\n                        <PageHeader\n                            title={currentPage.title}\n                            isDark={!!isDark}\n                            toggleTheme={toggleTheme}\n                        />\n                        <PageFrame>\n\n                            <HashRouter>\n                                <Switch>\n                                    <Route exact path=\"/binomial\">\n                                        <Binomial />\n                                    </Route>\n                                    <Route exact path=\"/pascal\">\n                                        <Pascal />\n                                    </Route>\n                                    <Route exact path=\"/Hypergeometric\">\n                                        <Hypergeometric />\n                                    </Route>\n                                    <Route exact path=\"/\">\n                                        <Home />\n                                    </Route>\n                                    <Route path=\"/\">\n                                        <H1>404</H1>\n                                    </Route>\n                                </Switch>\n                            </HashRouter>\n\n                        </PageFrame>\n                    </AppPageContainer>\n\n                </ViewPort>\n            </ThemeProvider>\n        </Suspense>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport \"@blueprintjs/table/lib/css/table.css\";\nimport '@blueprintjs/select/lib/css/blueprint-select.css'\nimport 'katex/dist/katex.min.css';\nimport './i18n'\nimport { HashRouter as Router } from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}