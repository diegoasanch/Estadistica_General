{"version":3,"sources":["styles/colors.ts","components/Sidebar/styles.ts","pages/available.ts","styles/typography.ts","components/Sidebar/Sidebar.tsx","components/DevTag/DevTag.tsx","components/PageHeader/styles.ts","i18n.ts","svg/uk.svg","svg/spain.svg","utils/internationalization.ts","components/SvgIcon/styles.ts","components/SvgIcon/SvgIcon.tsx","components/SelectLang/SelectLang.tsx","components/PageHeader/PageHeader.tsx","pages/layout.ts","utils/determine_style.ts","utils/numbers.ts","contexts/inputs.ts","components/ChartTooltip/ChartTooltip.tsx","components/ProbabilityChart/ProbabilityChart.tsx","utils/arrays.ts","components/Result/Result.tsx","styles/display.ts","components/NoInputCards/No2/No2.tsx","components/PunctualOrAccumulated/PunctualOrAccumulated.tsx","components/ResultGroup/ResultGroup.tsx","components/ProbabilityTable/styles.ts","components/ProbabilityTable/ProbabilityTable.tsx","pages/PageTemplate/PageTemplate.tsx","functions/shared.ts","utils/toaster.ts","components/NoGreater/NoGreater.tsx","components/NoNegative/NoNegative.tsx","components/MathInput/MathInput.tsx","components/ProbabilityInput/ProbabilityInput.tsx","components/InputGroups/BinomialInput/BinomialInput.tsx","functions/general.ts","functions/binomials.ts","utils/constants.ts","pages/Binomial/Binomial.tsx","components/InputGroups/PascalInput/PascalInput.tsx","functions/pascal.ts","pages/Pascal/Pascal.tsx","pages/Home/styles.ts","components/LandingChart/LandingChart.tsx","pages/Home/Home.tsx","components/InputGroups/HypergeometricInput/HypergeometricInput.tsx","functions/hypergeometric.ts","pages/Hypergeometric/Hypergeometric.tsx","components/LoadingScreen/LoadingScreen.tsx","components/SvgIcon/ThinkingIcon/ThinkingIcon.tsx","pages/NotFound404/NotFound404.tsx","components/InputGroups/HyperPascalInput/HyperPascalInput.tsx","functions/hyperPascal.ts","pages/HyperPascal/HyperPascal.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["dark","background","text","sidebarText","sidebarBg","result","scrollBarBg","scrollBarThumb","chart_barNormal","chart_barHighlight","chart_gridColor","landing_chart","code","disabled_link","emojiSkin","light","SidebarContainer","styled","nav","props","theme","Header","H1","SideMain","main","SideFooter","footer","SideNav","NavButton","Text","selected","disabled","home","id","url","title","landingPage","select","icon","pageOptions","defaultPage","HomeHeader","HomeSubTitle","H2","StyledLink","Link","InlineIcon","Icon","Sidebar","current_page","translate","useTranslation","t","useState","filter","item","options","to","map","option","iconSize","className","href","target","rel","packageJSON","version","process","StyledNavbar","Navbar","StyledSwitch","Switch","window","location","origin","pathname","i18n","use","Backend","LanguageDetector","initReactI18next","init","backend","loadPath","homepage","fallbackLng","debug","interpolation","escapeValue","i18n_localstorage","available_langs","flags","es","esFlag","en","enFlag","validLang","to_test","out","InlineSvg","svg","height","InlineImg","img","SvgIcon","src","name","alt","LangSelect","Select","ofType","SelectLang","currentLang","setCurrentLang","langs","setLangs","useEffect","local","localStorage","getItem","lang","getLang","items","itemRenderer","handleClick","toRender","flag","onClick","active","onItemSelect","newLang","changeLanguage","setItem","setLang","filterable","rightIcon","minimal","PageHeader","currentPage","isDark","toggleTheme","align","Alignment","LEFT","RIGHT","alignIndicator","checked","onChange","innerLabel","innerLabelChecked","large","minSideBarWidth","ViewPort","div","SideContainer","AppPageContainer","PageFrame","Column","noGrow","width","noPad","margin","Row","Container","OverflowContainer","PageContainer","CenteredContainer","isCellHighlight","value","highlight","num","min","max","is_highlight","isRange","PrecisionContext","createContext","StyledDivider","Divider","ChartTooltip","payload","label","variable","String","Array","isArray","innerPayload","sanitizeTooltipProps","roundPrecision","useContext","toFixed","ProbabilityChart","data","themeContext","ThemeContext","BarChart","CartesianGrid","strokeDasharray","XAxis","dataKey","tick","fill","YAxis","Tooltip","content","Bar","entry","index","color","BarColor","Cell","handleHighlight","tab","from","hl","NaN","StyledResult","Result","precision","math","StyledCallout","Callout","NoNAndP","a","b","c","PunctualOrAccumulated","handleTab","validInput","probabilities","varLabel","isNaN","panel","punctual","No2","accum_left","accum_right","ResultGroup","results","validResults","displayValue","undefined","texLabel","StyledTable","Table","ProbabilityTable","length","table","isLoading","headers","concat","colWidths","setColWidths","numRows","columnWidths","onColumnWidthChanged","newSize","prevWidths","newArray","getResizedColumns","header","i","cellRenderer","row","col","intent","loading","renderCell","PageTemplate","input","analysis","chart","noInputs","analysis_labels","defaultResults","AppToaster","Toaster","create","position","Position","TOP","maxToasts","showToast","message","show","NoGreater","NoNegative","MathInput","stepSize","onValueChange","placeholder","numValue","strValue","inputElement","parsedNum","evaluate","error","console","allowNumericCharactersOnly","AcceptsFraction","StyledLabel","Label","ProbabilityInput","BinomialInput","handleSampleSize","handleSuccessProb","handleSuccessFound","setRoundPrecision","extraPanel","combinatory","some","combinations","binomialModel","r","n","p","accumulatedLeft","total","x","accumulatedRight","variance","stdDeviation","Math","sqrt","assymetry","kurtosis","partialLeftExpected","partialRightExpected","defaultTable","INPUT_DEBOUNCE","Binomial","sampleSize","setSampleSize","successProbability","setSuccessProbability","successFound","setSuccessFound","setValidInput","setResults","setValidResults","setProbabilities","tableData","setTableData","chartData","setChartData","dataTo","setDataTo","setHighlight","opType","setOpType","handleType","getProbabilities","useDebounce","toHighlight","time","newTable","push","createTable","timeEnd","getAnalysis","probs_from_table","Provider","valueNum","valueStr","parseFloat","size","PascalInput","minorStepSize","probability","BinomialAccumulatedLeft","Pascal","dataFrom","setDataFrom","LandingContainer","LandingBackground","HeaderContainer","ChartControls","StyledEditableText","EditableText","SizeInput","H3","createRandomChart","prob","entries","chart_data","createLandingChart","LandingChart","playAnimation","setProb","useInterval","new_prob","ResponsiveContainer","stroke","Home","setPlayAnimation","setSize","parseInt","cleanSize","maxLength","prev","handleTotalSize","handleTotalSuccess","numVal","strVal","N","R","MIN_LIMIT","MAX_LIMIT","expectedValue","Hypergeometric","totalSize","setTotalSize","totalSuccess","setTotalSuccess","HypergeometricInput","StyledHeader","LoadingScreen","ThinkingIcon","viewBox","xmlns","cx","cy","d","stroke-linecap","stroke-linejoin","stroke-width","StyledSubTitle","MinText","NotFound404","mu","HyperPascal","MAX_n","validateInput","accL","accR","expe","HyperPascalInput","FocusStyleManager","onlyShowFocusOnTabs","App","useLocation","useLocalStorage","setIsDark","setCurrentPage","current_location","substring","page","find","gtag","hash","search","fallback","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ebfaf1e6.chunk.js","sourcesContent":["import Itheme from '../types/theme'\n\nexport const dark: Itheme = {\n    background: '#2F3437',\n    text: '#EBEBEB',\n    sidebarText: '#EBEBEB',\n    sidebarBg: '#1B222A',\n    result: '#19A6FF',\n\n    scrollBarBg: '#262A2C',\n    scrollBarThumb: '#171D25',\n\n    chart_barNormal: '#828282',\n    chart_barHighlight: '#19A6FF',\n    chart_gridColor: '#555',\n    landing_chart: '#0D5E91',\n    code: '#59C0FF',\n    disabled_link: '#777',\n    emojiSkin: '#EEDD28',\n}\n\nexport const light: Itheme = {\n    background: '#FFFFFF',\n    text: '#37352F',\n    sidebarText: '#37352F',\n    sidebarBg: '#EBEBEB',\n    result: '#0C527E',\n\n    scrollBarBg: '#EBEBEB',\n    scrollBarThumb: '#888',\n\n    chart_barNormal: '#414141',\n    chart_barHighlight: '#19A6FF',\n    chart_gridColor: '#CCCCCC',\n    landing_chart: '#50A9E1',\n    code: '#0C527E',\n    disabled_link: '#777',\n    emojiSkin: '#FCEA2B',\n}\n","import { Text, H1 } from '@blueprintjs/core'\nimport styled from 'styled-components'\n\nexport const SidebarContainer = styled.nav`\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n    width: 100%;\n    color: ${(props) => props.theme.sidebarText};\n    background-color: ${(props) => props.theme.sidebarBg};\n`\n\nexport const Header = styled(H1)`\n    font-size: 2.5em !important;\n    line-height: 1.2em !important;\n    font-weight: bold;\n    word-wrap: break-word;\n    width: 100%;\n    margin: 1em 0;\n    text-align: center;\n\n    code {\n        font-size: 0.9em;\n        padding-left: 0.1em;\n    }\n`\n\nexport const SideMain = styled.main`\n    position: relative;\n    /* padding-top: 3em; */\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n`\n\nexport const SideFooter = styled.footer`\n    position: absolute;\n    bottom: 0;\n    width: 100%;\n    padding: 0 1em;\n    align-items: flex-start;\n`\nexport const SideNav = styled.nav`\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n    width: 100%;\n    margin-left: 0.5em;\n    padding-top: 3em;\n\n    > * {\n        padding: 0.5em 0;\n    }\n`\n\ntype NavProp = {\n    selected: boolean\n    disabled: boolean\n}\n\nexport const NavButton = styled(Text)<NavProp>`\n    display: flex;\n    font-size: 1.5em;\n    align-items: baseline;\n    padding-left: 0.5em;\n    transition: 100ms ease-in-out;\n\n    color: ${(props) =>\n        props.selected\n            ? props.theme.code\n            : props.disabled\n            ? props.theme.disabled_link\n            : 'inherit'};\n    border-left: ${(props) =>\n        props.selected ? `4px solid ${props.theme.code}` : 'none'};\n\n    &:hover {\n        border-left: 4px solid;\n    }\n`\n","import { IPageInfo } from '../types/pages'\n\n// All available pages\nconst home: IPageInfo = {\n    id: 'home',\n    url: '',\n    title: 'pages-home',\n    disabled: false,\n    landingPage: false,\n    select: true,\n    icon: 'home',\n}\n\nconst binomial: IPageInfo = {\n    id: 'binomial',\n    url: 'binomial',\n    title: 'pages-binomial',\n    disabled: false,\n    landingPage: true,\n    select: true,\n    icon: 'function',\n}\n\nconst pascal: IPageInfo = {\n    id: 'pascal',\n    url: 'pascal',\n    title: 'pages-pascal',\n    disabled: false,\n    landingPage: true,\n    select: true,\n    icon: 'function',\n}\n\nconst hypergeometric: IPageInfo = {\n    id: 'hypergeometric',\n    url: 'hypergeometric',\n    title: 'pages-hypergeometric',\n    disabled: false,\n    landingPage: true,\n    select: true,\n    icon: 'function',\n}\n\nconst hyperPascal: IPageInfo = {\n    id: 'hyperpascal',\n    url: 'hyperpascal',\n    title: 'pages-hyperpascal',\n    disabled: false,\n    landingPage: true,\n    select: true,\n    icon: 'function',\n}\n\nconst coming_soon: IPageInfo = {\n    id: 'more_soon',\n    url: '',\n    title: 'pages-binomial',\n    disabled: true,\n    landingPage: false,\n    select: true,\n    icon: 'plus',\n}\n\n// Array of all of them\nconst pageOptions: IPageInfo[] = [\n    home,\n    binomial,\n    pascal,\n    hypergeometric,\n    hyperPascal,\n    coming_soon,\n]\n\nconst defaultPage = home\n\nconst getAvailable = (): string[] => {\n    return pageOptions.map((item) => item.id)\n}\n\nconst getLandingPageOptions = (): IPageInfo[] => {\n    return pageOptions.filter((item) => item.landingPage)\n}\n\nconst getSelectOptions = (): IPageInfo[] => {\n    return pageOptions.filter((item) => item.select)\n}\n\nexport {\n    home,\n    binomial,\n    pascal,\n    hypergeometric,\n    coming_soon,\n    pageOptions,\n    defaultPage,\n    getAvailable,\n    getLandingPageOptions,\n    getSelectOptions,\n}\n","import { H1, H2, Icon } from '@blueprintjs/core'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components'\n\nconst HomeHeader = styled(H1)`\n    text-align: center;\n    font-size: 5em !important;\n    line-height: 1em !important;\n    font-weight: bold;\n    padding: 0.2em;\n    border-radius: 0.1em;\n\n    /* background-color: ${(props) => props.theme.background + 'CC'};\n    backdrop-filter: blur( 4px );\n    -webkit-backdrop-filter: blur( 4px ); */\n`\nconst HomeSubTitle = styled(H2)`\n    /* text-align: center; */\n    font-size: 3em !important;\n    margin-top: 0.5em;\n    margin-bottom: 2em;\n\n    padding: 0.5em;\n    border-radius: 0.1em;\n    /* background-color: ${(props) => props.theme.background + 'AA'};\n    backdrop-filter: blur( 4px );\n    -webkit-backdrop-filter: blur( 4px ); */\n`\nconst StyledLink = styled(Link)`\n    color: inherit !important;\n\n    code {\n        color: ${(props) => props.theme.code} !important ;\n    }\n`\n\nconst InlineIcon = styled(Icon)`\n    vertical-align: baseline;\n    margin: 0 0.3em;\n`\n\nexport { HomeHeader, HomeSubTitle, StyledLink, InlineIcon }\n","import React, { useState } from 'react'\nimport { H4, H5, H6, Icon } from '@blueprintjs/core'\nimport { useTranslation } from 'react-i18next'\n\nimport { IPageInfo } from '../../types/pages'\nimport packageJSON from '../../../package.json'\nimport {\n    SidebarContainer,\n    Header,\n    SideMain,\n    SideFooter,\n    SideNav,\n    NavButton,\n} from './styles'\nimport { getSelectOptions } from '../../pages/available'\nimport { StyledLink } from '../../styles/typography'\nimport DevTag from '../DevTag'\n\ntype IProps = {\n    readonly current_page: IPageInfo\n}\n\nconst Sidebar = ({ current_page }: IProps) => {\n    const { t: translate } = useTranslation()\n\n    const [options] = useState(getSelectOptions())\n\n    return (\n        <SidebarContainer>\n            <Header>\n                <StyledLink to=\"/\">\n                    Probab<code>/ly</code>\n                </StyledLink>\n            </Header>\n\n            <SideMain>\n                <SideNav>\n                    {options.map((option) => (\n                        <StyledLink\n                            to={option.disabled ? '#' : option.url}\n                            key={option.id}\n                        >\n                            <NavButton\n                                selected={current_page.id === option.id}\n                                disabled={option.disabled}\n                            >\n                                <Icon\n                                    icon={option.icon ?? 'function'}\n                                    iconSize={15}\n                                />\n                                &nbsp;\n                                {translate(`select-${option.id}`)}\n                            </NavButton>\n                        </StyledLink>\n                    ))}\n                </SideNav>\n                <SideFooter>\n                    <H4>\n                        <Icon className=\"bp3-text-muted\" icon=\"git-branch\" />\n                        &nbsp;\n                        {translate('view-on')}&nbsp;\n                        <a\n                            href=\"https://github.com/diegoasanch/probably\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            GitHub\n                        </a>\n                    </H4>\n                    <H5 className=\"bp3-text-muted\">\n                        version: {packageJSON.version}\n                        {process.env.NODE_ENV === 'development' && <DevTag />}\n                    </H5>\n                    <H6 className=\"bp3-text-muted\">\n                        <Icon icon=\"code\" />\n                        &nbsp;\n                        {translate('with')} 💖&nbsp;\n                        {translate('by')}&nbsp;\n                        <a\n                            href=\"https://github.com/diegoasanch\"\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            Diego.\n                        </a>\n                    </H6>\n                </SideFooter>\n            </SideMain>\n        </SidebarContainer>\n    )\n}\n\nexport default Sidebar\n","import React from 'react'\nimport { Position } from '@blueprintjs/core'\nimport { Tooltip2 } from '@blueprintjs/popover2'\nimport styled from 'styled-components'\n\nconst StyledTag = styled.code`\n    margin-left: 0.5em;\n`\n\nconst TooltipContent = () => (\n    <span>\n        You are running the <code>development</code> version of Probab\n        <code>/ly</code>\n    </span>\n)\n\nconst DevTag = () => {\n    return (\n        <Tooltip2 content={<TooltipContent />} position={Position.RIGHT}>\n            <StyledTag>• dev</StyledTag>\n        </Tooltip2>\n    )\n}\n\nexport default DevTag\n","import { Navbar } from '@blueprintjs/core'\nimport styled from 'styled-components'\nimport { Switch } from '@blueprintjs/core'\n\nexport const StyledNavbar = styled(Navbar)`\n    width: 100%;\n    position: sticky;\n    top: 0;\n\n    &.bp3-navbar {\n        background-color: ${(props) => props.theme.sidebarBg};\n    }\n`\n\nexport const StyledSwitch = styled(Switch)`\n    margin: 0.2em;\n`\n","import i18n from 'i18next'\nimport Backend from 'i18next-http-backend'\nimport LanguageDetector from 'i18next-browser-languagedetector'\nimport { initReactI18next } from 'react-i18next'\nimport { homepage } from '../package.json'\n\nconst { origin, pathname } = window.location\n// console.log(origin, pathname)\n// console.log(`Deployed translations  ${homepage}/locales/{{lng}}/translation.json`)\n// console.log(`Local translations  ${origin}${pathname}/locales/{{lng}}/translation.json`)\n\ni18n.use(Backend)\n    .use(LanguageDetector)\n    .use(initReactI18next)\n    .init({\n        backend: {\n            loadPath:\n                process.env.NODE_ENV === 'production'\n                    ? `${homepage}/locales/{{lng}}/translation.json`\n                    : `${origin}${pathname}/locales/{{lng}}/translation.json`,\n        },\n        fallbackLng: 'es',\n        debug: true,\n        interpolation: {\n            escapeValue: false,\n        },\n    })\n\nexport default i18n\n","export default __webpack_public_path__ + \"static/media/uk.64f4888d.svg\";","export default __webpack_public_path__ + \"static/media/spain.12ca02a6.svg\";","import i18n from '../i18n'\nimport enFlag from '../svg/uk.svg'\nimport esFlag from '../svg/spain.svg'\n\nconst DEFAULT_LANG = 'es'\nconst i18n_localstorage = 'i18nextLng'\n\nexport type ILang = 'es' | 'en'\n\nconst available_langs: ILang[] = ['es', 'en']\n\nconst flags = {\n    es: esFlag,\n    en: enFlag,\n}\n\nconst setLang = (newLang: string): void => {\n    i18n.changeLanguage(newLang)\n    window.localStorage.setItem(i18n_localstorage, newLang)\n}\n\nconst getLang = (): ILang => {\n    const local = window.localStorage.getItem(i18n_localstorage) ?? 'es'\n    let lang: ILang = 'es'\n\n    if (local === 'es') lang = 'es'\n    else if (local === 'en') lang = 'en'\n\n    return lang\n\n    // For some reason this, does not work (should be type safe)\n    // if (available_langs.includes(local))\n    //     return local\n}\n\n// If received `to_test` is not a valid language, returns `DEFAULT_LANG`\nconst validLang = (to_test: string): ILang => {\n    let out: ILang = DEFAULT_LANG // fallback\n\n    if (to_test === 'en') out = 'en'\n\n    return out\n}\n\nexport { DEFAULT_LANG, available_langs, flags, setLang, getLang, validLang }\n","import styled from 'styled-components'\n\ntype InlineProps = {\n    width?: string\n    heigth?: string\n}\n\nconst InlineSvg = styled.svg<InlineProps>`\n    height: ${(props) => props.height ?? '1.5em'};\n    vertical-align: text-bottom;\n`\n\nconst InlineImg = styled.img<InlineProps>`\n    height: ${(props) => props.height ?? '1.5em'};\n    vertical-align: text-bottom;\n`\n\nexport { InlineSvg, InlineImg }\n","import React from 'react'\nimport { InlineImg } from './styles'\n\ntype IProps = {\n    src: string\n    name?: string\n    height?: string\n}\n\nconst SvgIcon = ({ src, name, height }: IProps) => {\n    return <InlineImg src={src} alt={name ?? 'svg-icon'} height={height} />\n}\n\nexport default SvgIcon\n","import React, { useEffect, useState } from 'react'\nimport { Select } from '@blueprintjs/select'\nimport {\n    available_langs,\n    validLang,\n    getLang,\n    ILang,\n    setLang,\n    flags,\n} from '../../utils/internationalization'\nimport { Button, MenuItem } from '@blueprintjs/core'\nimport SvgIcon from '../SvgIcon'\n\nconst LangSelect = Select.ofType<string>()\n\ntype IClickHandler = {\n    handleClick: (event: React.MouseEvent<HTMLElement, MouseEvent>) => void\n}\n\nconst SelectLang = () => {\n    const [currentLang, setCurrentLang] = useState<ILang>('es')\n    const [langs, setLangs] = useState<ILang[]>([])\n\n    const handleSelect = (item: string) => {\n        let newLang = validLang(item)\n        setCurrentLang(newLang)\n        setLang(newLang)\n    }\n\n    useEffect(() => {\n        setCurrentLang(getLang())\n        setLangs(available_langs)\n    }, [])\n\n    const RenderLang = (item: string, { handleClick }: IClickHandler) => {\n        let toRender = validLang(item)\n        const flag = flags[toRender]\n\n        return (\n            <MenuItem\n                key={item}\n                text={item}\n                onClick={handleClick}\n                active={currentLang === item}\n                icon={<SvgIcon src={flag} name={currentLang} />}\n            />\n        )\n    }\n\n    return (\n        <LangSelect\n            items={langs}\n            itemRenderer={RenderLang}\n            onItemSelect={handleSelect}\n            filterable={false}\n        >\n            <Button\n                icon=\"globe-network\"\n                text={currentLang}\n                rightIcon=\"caret-down\"\n                minimal\n            />\n        </LangSelect>\n    )\n}\n\nexport default SelectLang\n","import React from 'react'\nimport { StyledNavbar, StyledSwitch } from './styles'\nimport { useTranslation } from 'react-i18next'\nimport SelectLang from '../SelectLang'\n\nimport { IPageInfo } from '../../types/pages'\nimport { InlineIcon } from '../../styles/typography'\nimport { NavbarGroup, NavbarHeading, Alignment } from '@blueprintjs/core'\n\ntype Iprops = {\n    title: string\n    currentPage: IPageInfo\n    readonly isDark: boolean\n    toggleTheme: () => void\n}\n\nconst PageHeader = ({ title, currentPage, isDark, toggleTheme }: Iprops) => {\n    const { t } = useTranslation()\n\n    return (\n        <StyledNavbar>\n            <NavbarGroup align={Alignment.LEFT}>\n                <NavbarHeading>\n                    {currentPage.icon && (\n                        <InlineIcon icon={currentPage.icon} iconSize={12} />\n                    )}\n                    {t(title)}\n                </NavbarHeading>\n            </NavbarGroup>\n\n            <NavbarGroup align={Alignment.RIGHT}>\n                <SelectLang />\n                <StyledSwitch\n                    alignIndicator={Alignment.RIGHT}\n                    checked={isDark}\n                    onChange={toggleTheme}\n                    innerLabel=\"🌞\"\n                    innerLabelChecked=\"🌚\"\n                    large\n                />\n            </NavbarGroup>\n        </StyledNavbar>\n    )\n}\n\nexport default PageHeader\n","import styled from 'styled-components'\n\n// const sideBarWidth = '20vw'\nconst minSideBarWidth = '250px'\n\ntype IContainer = {\n    width?: 'auto' | '100%' | '' | 'max-content' | string\n    height?: string\n    margin?: string\n    noPad?: boolean\n    noGrow?: boolean\n}\n\nconst ViewPort = styled.div`\n    width: 100%;\n    height: 100vh;\n    display: flex;\n    flex-direction: row;\n\n    > * ::-webkit-scrollbar {\n        background-color: ${(props) => props.theme.scrollBarBg};\n        width: 10px;\n        height: 10px;\n        border-radius: 10px;\n    }\n    > * ::-webkit-scrollbar-thumb {\n        background-color: ${(props) => props.theme.scrollBarThumb};\n        border-radius: 5px;\n    }\n`\n\nconst SideContainer = styled.div`\n    width: ${minSideBarWidth};\n    height: 100%;\n    min-width: ${minSideBarWidth};\n    /* max-wid */\n`\n\nconst AppPageContainer = styled.div`\n    width: calc(100% - ${minSideBarWidth});\n    height: 100%;\n    overflow-y: auto;\n    min-width: ${minSideBarWidth};\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n`\n\nconst PageFrame = styled.main`\n    position: relative;\n    width: 100%;\n    overflow: auto;\n    margin: 0;\n    background-color: ${(props) => props.theme.background};\n    color: ${(props) => props.theme.text};\n    max-width: 1050px;\n    height: 100%;\n`\n\nconst Column = styled.div<IContainer>`\n    display: flex;\n    flex-direction: column;\n    flex-grow: ${(props) => (props.noGrow ? 0 : 1)};\n    height: ${(props) => props.height ?? '100%'};\n    width: ${(props) => props.width ?? '100%'};\n    min-width: max-content;\n\n    margin: ${(props) => (props.noPad ? '0' : props.margin ?? '1em')};\n`\n\nconst Row = styled.div<IContainer>`\n    display: flex;\n    flex-direction: row;\n    margin: ${(props) => (props.noPad ? '0' : 'inherit')};\n`\nconst Container = styled(Column)<IContainer>`\n    width: 100%;\n    height: 100%;\n    min-width: max-content;\n    margin: 0;\n`\nconst OverflowContainer = styled(Container)<IContainer>`\n    overflow: auto;\n`\n\nconst PageContainer = styled(Container)<IContainer>`\n    padding: 2em;\n    margin: 0;\n    overflow: auto;\n`\n\nconst CenteredContainer = styled.div`\n    width: 100%;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n`\n\nexport {\n    ViewPort,\n    SideContainer,\n    PageFrame,\n    Column,\n    Row,\n    Container,\n    OverflowContainer,\n    AppPageContainer,\n    PageContainer,\n    CenteredContainer,\n}\n","import { Highlight } from '../types/tables'\nimport { inRange } from './numbers'\n\nconst isCellHighlight = (\n    value: number,\n    highlight: Highlight | undefined,\n): boolean => {\n    let is_highlight = false\n\n    if (highlight) {\n        if (highlight.isRange)\n            is_highlight = inRange(value, highlight.min, highlight.max + 1)\n        else is_highlight = value === highlight.num\n    }\n    // console.log({ is_highlight, value, highlight })\n    return is_highlight\n}\n\nexport { isCellHighlight }\n","const inRange = (num: number, min: number, max: number): boolean => {\n    return min <= num && num < max\n}\n\nexport { inRange }\n","import { createContext } from 'react'\n\nconst PrecisionContext = createContext<number>(4)\n\nexport { PrecisionContext }\n","import React, { useContext } from 'react'\nimport { Card, Divider } from '@blueprintjs/core'\nimport styled from 'styled-components'\nimport { PrecisionContext } from '../../contexts/inputs'\n\nconst StyledDivider = styled(Divider)`\n    margin: 0.8em 0;\n`\n\ntype ITooltipProps = {\n    active: boolean\n    label: string\n    value: number\n    variable: string\n}\n\nconst sanitizeTooltipProps = (props: any): ITooltipProps => {\n    let { active, payload, label, variable } = props\n    active = !!active\n\n    let value = 0\n\n    if (typeof label !== 'string') label = String(label)\n\n    if (Array.isArray(payload)) {\n        const innerPayload = payload[0]\n\n        if (typeof innerPayload?.value === 'number') value = innerPayload.value\n    }\n\n    return { active, label, value, variable }\n}\n\nconst ChartTooltip = (props: any) => {\n    const { active, label, value, variable } = sanitizeTooltipProps(props)\n    const roundPrecision = useContext(PrecisionContext)\n    // console.log({ props, variable })\n\n    if (!active) return <></>\n\n    return (\n        <Card>\n            <code>{variable}</code> = {label}\n            <StyledDivider />\n            <code>P({label})</code> = {value.toFixed(roundPrecision)}\n        </Card>\n    )\n}\nexport default ChartTooltip\n","import React, { useContext } from 'react'\nimport { Highlight, IBarChartItem } from '../../types/tables'\nimport {\n    BarChart,\n    Bar,\n    Cell,\n    XAxis,\n    YAxis,\n    CartesianGrid,\n    Tooltip,\n} from 'recharts'\nimport { OverflowContainer } from '../../pages/layout'\nimport { ThemeContext } from 'styled-components'\nimport { isCellHighlight } from '../../utils/determine_style'\nimport ChartTooltip from '../ChartTooltip'\n\ntype IProps = {\n    data: IBarChartItem[]\n    highlight?: Highlight\n    variable: string\n}\n\nconst ProbabilityChart = ({ data, highlight, variable }: IProps) => {\n    const themeContext = useContext(ThemeContext)\n\n    const BarColor = (entry: IBarChartItem): string => {\n        const is_highlight = isCellHighlight(entry.label, highlight)\n        return is_highlight\n            ? themeContext.chart_barHighlight\n            : themeContext.chart_barNormal\n    }\n\n    return (\n        <OverflowContainer>\n            <BarChart width={450} height={300} data={data}>\n                <CartesianGrid strokeDasharray=\"5\" />\n                <XAxis dataKey=\"label\" tick={{ fill: themeContext.text }} />\n                <YAxis tick={{ fill: themeContext.text }} />\n                <Tooltip\n                    content={(props: any) => (\n                        <ChartTooltip variable={variable} {...props} />\n                    )}\n                />\n\n                <Bar dataKey=\"value\">\n                    {data.map((entry, index) => {\n                        const color = BarColor(entry)\n                        return <Cell key={`cell-${index}`} fill={color} />\n                    })}\n                </Bar>\n            </BarChart>\n        </OverflowContainer>\n    )\n}\n\nexport default ProbabilityChart\n","import { IOperationType } from '../types/pages'\nimport { Highlight } from '../types/tables'\n\n/**\n * from and to inclusive\n * @param from\n * @param to\n * @param step\n * @returns\n */\nconst range = (from: number, to: number, step = 1): number[] => {\n    const length = to - from\n    if (length > 0) return [...Array(length + 1)].map((_, i) => from + i * step)\n    return []\n}\n\nconst stringRange = (from: number, to: number, step = 1): string[] => {\n    return range(from, to, step).map((item) => String(item))\n}\n\nconst handleHighlight = (\n    tab: IOperationType,\n    num: number,\n    to: number,\n    from = 0,\n): Highlight => {\n    let hl: Highlight = {\n        isRange: true,\n        num: NaN,\n        min: NaN,\n        max: NaN,\n    }\n\n    if (tab === 'f') {\n        hl.min = from\n        hl.max = num\n    } else if (tab === 'g') {\n        hl.min = num\n        hl.max = to\n    } else {\n        hl.isRange = false\n        hl.num = num\n    }\n\n    return hl\n}\n\n/**\n * The first column is the thinnest\n */\nconst getColumnWidths = (length: number): number[] => {\n    return [35].concat(Array(length - 1).fill(75))\n}\n\n/**\n * Copies the array and sets the new value to\n * @param prevWidths\n * @param index\n * @param newSize\n * @returns\n */\nconst getResizedColumns = (\n    prevWidths: number[],\n    index: number,\n    newSize: number,\n): number[] => {\n    const newArray = [...prevWidths]\n    if (index < newArray.length) newArray[index] = newSize\n    return newArray\n}\n\nexport {\n    range,\n    stringRange,\n    handleHighlight,\n    getColumnWidths,\n    getResizedColumns,\n}\n","import React from 'react'\nimport { Text } from '@blueprintjs/core'\nimport styled from 'styled-components'\nimport TeX from '@matejmazur/react-katex'\n\nconst StyledResult = styled(Text)`\n    font-size: 1.4em;\n    margin: 0.2em;\n    margin-left: 0.5em;\n\n    .number {\n        font-weight: bold;\n        font-size: 1.2em;\n        color: ${(props) => props.theme.result};\n    }\n`\n\ntype IProps = {\n    name: string\n    result: number | undefined\n    precision: number\n}\n\n/**\n * ## `name` string Will be rendered using [KaTeX](https://katex.org/docs/supported.html)\n * If result is undefined, an animation will be displayed\n */\nconst Result = ({ name, result, precision = 4 }: IProps) => {\n    return (\n        <StyledResult>\n            <TeX math={name + ' = '} />\n            &nbsp;\n            <span\n                className={\n                    `number` +\n                    (typeof result === 'undefined' ? ' bp3-skeleton' : '')\n                }\n            >\n                {\n                    result // if no result, show skeleton loader animation\n                        ? result.toFixed(precision)\n                        : '0.000000' // just some placeholder for the skeleton\n                }\n            </span>\n        </StyledResult>\n    )\n}\n\nexport default Result\n","import { Callout } from '@blueprintjs/core'\nimport styled from 'styled-components'\n\nconst StyledCallout = styled(Callout)`\n    width: max-content;\n    padding: 1.5em;\n`\n\nexport { StyledCallout }\n","import React from 'react'\nimport { H3, Icon } from '@blueprintjs/core'\nimport { useTranslation } from 'react-i18next'\nimport { StyledCallout } from '../../../styles/display'\n\ntype IProps = {\n    a: string\n    b?: string\n    c?: string\n}\n\nconst NoNAndP = ({ a, b, c }: IProps) => {\n    const { t } = useTranslation()\n\n    return (\n        <StyledCallout>\n            <H3>\n                <span className=\"bp3-text-muted\">\n                    <Icon icon=\"calculator\" iconSize={25} />\n                    &nbsp;\n                </span>\n                {t('specify')} <code>{a}</code>\n                {c && (\n                    <>\n                        &nbsp;, <code>{c}</code>\n                    </>\n                )}\n                {b && (\n                    <>\n                        &nbsp;{t('and')} <code>{b}</code>\n                    </>\n                )}\n            </H3>\n        </StyledCallout>\n    )\n}\n\nexport default NoNAndP\n","import React, { useContext } from 'react'\nimport { Card, Tab, Tabs } from '@blueprintjs/core'\nimport TeX from '@matejmazur/react-katex'\nimport Result from '../Result'\nimport { IOperationType } from '../../types/pages'\nimport { IProbabilities } from '../../types/tables'\nimport No2 from '../NoInputCards/No2'\nimport { PrecisionContext } from '../../contexts/inputs'\n\ntype IProps = {\n    handleTab: (tab: IOperationType) => void\n    variable: number\n    validInput: boolean\n    probabilities: IProbabilities | undefined\n    varLabel: string\n}\n\nconst PunctualOrAccumulated = ({\n    handleTab,\n    variable,\n    validInput,\n    probabilities,\n    varLabel,\n}: IProps) => {\n    validInput = validInput && !isNaN(variable)\n    const roundPrecision = useContext(PrecisionContext)\n\n    return (\n        <Card>\n            <Tabs id=\"operation\" onChange={handleTab}>\n                <Tab\n                    title={<TeX math=\"P(r)\" />}\n                    id=\"p\"\n                    panel={\n                        !validInput ? (\n                            <No2 a={varLabel} />\n                        ) : (\n                            <Result\n                                name={`P(\\\\text{V.A.} = ${variable})`}\n                                result={probabilities?.punctual}\n                                precision={roundPrecision}\n                            />\n                        )\n                    }\n                />\n                <Tab\n                    title={<TeX math=\"F(r)\" />}\n                    id=\"f\"\n                    panel={\n                        !validInput ? (\n                            <No2 a={varLabel} />\n                        ) : (\n                            <Result\n                                name={`P(\\\\text{V.A.} \\\\leq ${variable})`}\n                                result={probabilities?.accum_left}\n                                precision={roundPrecision}\n                            />\n                        )\n                    }\n                />\n                <Tab\n                    title={<TeX math=\"G(r)\" />}\n                    id=\"g\"\n                    panel={\n                        !validInput ? (\n                            <No2 a={varLabel} />\n                        ) : (\n                            <Result\n                                name={`P(\\\\text{V.A.} \\\\geq ${variable})`}\n                                result={probabilities?.accum_right}\n                                precision={roundPrecision}\n                            />\n                        )\n                    }\n                />\n            </Tabs>\n        </Card>\n    )\n}\n\nexport default PunctualOrAccumulated\n","import React, { useContext } from 'react'\nimport { PrecisionContext } from '../../contexts/inputs'\nimport { IResult } from '../../types/tables'\nimport Result from '../Result/Result'\n\ntype IProps = {\n    results: IResult[]\n    validResults: boolean\n}\n\nconst ResultGroup = ({ results, validResults }: IProps) => {\n    const roundPrecision = useContext(PrecisionContext)\n\n    return (\n        <>\n            {results.map((item, index) => {\n                const displayValue = validResults ? item.value : undefined\n                return (\n                    <Result\n                        name={item.texLabel}\n                        result={displayValue}\n                        precision={roundPrecision}\n                        key={`result-${index}`}\n                    />\n                )\n            })}\n        </>\n    )\n}\n\nexport default ResultGroup\n","import { Table } from '@blueprintjs/table'\nimport styled from 'styled-components'\n\nexport const StyledTable = styled(Table)`\n    height: min-content;\n    max-height: 70vh;\n`\n","import React, { useContext, useState } from 'react'\nimport { Cell, Column } from '@blueprintjs/table'\nimport { Highlight, ITable } from '../../types/tables'\nimport { isCellHighlight } from '../../utils/determine_style'\nimport { StyledTable } from './styles'\nimport { PrecisionContext } from '../../contexts/inputs'\nimport { getColumnWidths, getResizedColumns } from '../../utils/arrays'\n\ntype IProps = {\n    table: ITable\n    isLoading: boolean\n    highlight?: Highlight\n}\n\nconst ProbabilityTable = ({ table, highlight, isLoading }: IProps) => {\n    const roundPrecision = useContext(PrecisionContext)\n    const [colWidths, setColWidths] = useState<number[]>(\n        getColumnWidths(table.headers.length),\n    )\n\n    const handleResize = (index: number, newSize: number) => {\n        setColWidths(getResizedColumns(colWidths, index, newSize))\n    }\n\n    const renderCell = (row: number, col: number) => {\n        // Determine if higlightable from first value of row\n        const intent = isCellHighlight(table.content[row][0], highlight)\n            ? 'primary'\n            : 'none'\n\n        return (\n            <Cell intent={intent} loading={isLoading}>\n                {table.content[row][col].toFixed(col ? roundPrecision : 0)}\n            </Cell>\n        )\n    }\n\n    // console.table(table.content)\n\n    return (\n        <StyledTable\n            numRows={table.content.length}\n            columnWidths={colWidths}\n            onColumnWidthChanged={handleResize}\n        >\n            {table.headers.map((header: string, i: number) => (\n                <Column\n                    name={header}\n                    cellRenderer={(row) => renderCell(row, i)}\n                    key={`column-${i}`}\n                />\n            ))}\n        </StyledTable>\n    )\n}\n\nexport default ProbabilityTable\n","import React from 'react'\nimport { Column, PageContainer, Row } from '../layout'\nimport { H1 } from '@blueprintjs/core'\nimport { useTranslation } from 'react-i18next'\nimport NoInput from '../../components/NoInputCards/No2'\n\n// For displaying the specify a and b card when no input\ntype INoInputs = {\n    a: string\n    b: string\n    c?: string\n}\n\ntype IProps = {\n    input: JSX.Element\n    analysis: JSX.Element\n    table: JSX.Element\n    chart: JSX.Element\n    validInput: boolean\n    noInputs: INoInputs\n}\n\n/**\n * This is a stateles component, it is intended to be the blueprint for all of\n * the pages, receives the page components to render and places them accordingly\n * @returns\n */\nconst PageTemplate = ({\n    input,\n    analysis,\n    table,\n    chart,\n    validInput,\n    noInputs,\n}: IProps) => {\n    const { t } = useTranslation()\n\n    return (\n        <PageContainer>\n            <Row>\n                <Column>\n                    <H1>Input</H1>\n                    {input}\n                </Column>\n                <Column>\n                    <H1>{t('analysis')}</H1>\n                    {validInput ? analysis : <NoInput {...noInputs} />}\n                </Column>\n            </Row>\n            <Row>\n                <Column width=\"max-content\" noGrow>\n                    <H1>{t('table')}</H1>\n                    {validInput ? table : <NoInput {...noInputs} />}\n                </Column>\n                <Column>\n                    <H1>{t('chart')}</H1>\n                    {validInput ? chart : <NoInput {...noInputs} />}\n                </Column>\n            </Row>\n        </PageContainer>\n    )\n}\n\nexport default PageTemplate\n","import { IResult } from '../types/tables'\n\nconst analysis_labels = {\n    expected: 'E(r) = \\\\mu',\n    variance: 'V(r) = \\\\sigma^2',\n    std_dev: 'D(r) = \\\\sigma',\n    assymetry: 'As = \\\\alpha_3',\n    kurtosis: 'Ku = \\\\alpha_4',\n}\n\nconst defaultResults: IResult[] = [\n    { texLabel: analysis_labels.expected, value: 0 },\n]\n\nexport { analysis_labels, defaultResults }\n","import React from 'react'\nimport { Position, Toaster, Intent } from '@blueprintjs/core'\n\nconst AppToaster = Toaster.create({\n    className: 'recipe-toaster',\n    position: Position.TOP,\n    maxToasts: 2,\n})\n\nconst showToast = (message: string | React.ReactNode, intent?: Intent) => {\n    AppToaster.show({ message, intent })\n}\n\nexport { showToast }\n","import React from 'react'\nimport { useTranslation } from 'react-i18next'\n\ntype Props = {\n    a: string\n    b: string\n}\n\nconst NoGreater = ({ a, b }: Props) => {\n    const { t } = useTranslation()\n\n    return (\n        <span>\n            <code>{a}</code> {t('no-greater')} <code>{b}</code>\n        </span>\n    )\n}\nexport default NoGreater\n","import { Icon } from '@blueprintjs/core'\nimport React from 'react'\nimport { useTranslation } from 'react-i18next'\n\nconst NoNegative = () => {\n    const { t } = useTranslation()\n\n    return (\n        <span>\n            <Icon icon=\"warning-sign\" /> {t('no-negative')}\n        </span>\n    )\n}\nexport default NoNegative\n","import React from 'react'\nimport { INumericInputProps, NumericInput } from '@blueprintjs/core'\nimport { evaluate } from 'mathjs'\n\ntype HandleInputType = (\n    valueAsNumber: number,\n    valueAsString: string,\n    inputElement: HTMLInputElement | null,\n) => void\n\nconst MathInput = ({\n    min,\n    max,\n    stepSize,\n    onValueChange,\n    placeholder,\n}: INumericInputProps) => {\n    const handleInput: HandleInputType = (\n        numValue: number,\n        strValue: string,\n        inputElement: HTMLInputElement | null,\n    ): void => {\n        // console.log(`Value as number: ${numValue}, Value as string: ${strValue}`)\n\n        if (onValueChange) {\n            let parsedNum: number\n            try {\n                parsedNum = evaluate(strValue)\n            } catch (error) {\n                console.error('mathjs error 🤦‍♂️: parsing input error')\n                parsedNum = 0\n            }\n            // console.log(`Parsed num: ${parsedNum}, type: ${typeof(parsedNum)}`)\n            onValueChange(parsedNum, String(parsedNum), inputElement)\n        }\n    }\n\n    return (\n        <NumericInput\n            min={min}\n            max={max}\n            stepSize={stepSize}\n            placeholder={placeholder}\n            onValueChange={handleInput}\n            allowNumericCharactersOnly={false}\n        />\n    )\n}\n\nexport default MathInput\n","import React from 'react'\nimport { Icon, Label, Position } from '@blueprintjs/core'\nimport { Tooltip2 } from '@blueprintjs/popover2'\nimport { useTranslation } from 'react-i18next'\nimport MathInput from '../MathInput'\nimport styled from 'styled-components'\n\nconst AcceptsFraction = () => {\n    const { t } = useTranslation()\n    return (\n        <>\n            {t('accepts-fract')}&nbsp;&nbsp; <code>1/2</code> = <code>0.5</code>\n        </>\n    )\n}\nconst StyledLabel = styled(Label)`\n    .bp3-icon {\n        vertical-align: baseline;\n    }\n`\n\n/**\n * This is just a wrapper for the MathInput component, will render the probability\n * label with a tooltip\n * @param props\n * @returns\n */\nconst ProbabilityInput = (props: any) => {\n    const { t } = useTranslation()\n\n    return (\n        <StyledLabel>\n            <Tooltip2 content={<AcceptsFraction />} position={Position.TOP}>\n                <>\n                    <code>p</code> = {t('success-prob')}&nbsp;\n                    <Icon intent=\"primary\" icon=\"info-sign\" iconSize={12} />\n                </>\n            </Tooltip2>\n            <MathInput {...props} />\n        </StyledLabel>\n    )\n}\n\nexport default ProbabilityInput\n","import { Label, NumericInput } from '@blueprintjs/core'\nimport React, { useContext } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { PrecisionContext } from '../../../contexts/inputs'\nimport { Column, Row } from '../../../pages/layout'\nimport ProbabilityInput from '../../ProbabilityInput'\n\ntype BlueprintStateSetter = (valueNum: number, valueStr: string) => void\ntype StateSetter = (value: React.SetStateAction<number>) => void\n\ntype IProps = {\n    handleSampleSize: StateSetter\n    handleSuccessProb: BlueprintStateSetter\n    handleSuccessFound: StateSetter\n    setRoundPrecision: StateSetter\n    extraPanel?: JSX.Element\n}\n\nconst BinomialInput = ({\n    handleSampleSize,\n    handleSuccessProb,\n    handleSuccessFound,\n    setRoundPrecision,\n    extraPanel,\n}: IProps) => {\n    const { t } = useTranslation()\n    const roundPrecision = useContext(PrecisionContext)\n\n    return (\n        <Row noPad>\n            <Column margin=\".8em 1em\" noGrow>\n                <Label>\n                    <code>n</code> = {t('sample-size')}\n                    <NumericInput\n                        min={1}\n                        onValueChange={handleSampleSize}\n                        stepSize={1}\n                        placeholder=\"n\"\n                    />\n                </Label>\n                <ProbabilityInput\n                    min={0}\n                    max={1}\n                    stepSize={0.1}\n                    onValueChange={handleSuccessProb}\n                    placeholder=\"p\"\n                />\n                <Label>\n                    <code>r</code> = {t('success-found')}\n                    <NumericInput\n                        min={0}\n                        onValueChange={handleSuccessFound}\n                        placeholder=\"r\"\n                    />\n                </Label>\n            </Column>\n            <Column margin=\".8em 1em\" noGrow>\n                <Label>\n                    {t('round-precision')} <code> (0.xf)</code>\n                    <NumericInput\n                        min={0}\n                        onValueChange={setRoundPrecision}\n                        value={roundPrecision ?? 'x'}\n                        placeholder=\"x\"\n                    />\n                </Label>\n                {extraPanel}\n            </Column>\n        </Row>\n    )\n}\n\nexport default BinomialInput\n","import { combinations } from 'mathjs'\n\n/**\n * `a` choose `b`. Wrapper for mathjs' combinations function\n */\nconst combinatory = (a: number, b: number): number => {\n    if (isNaN(a) || isNaN(b) || a < b || [a, b].some((item) => item < 0))\n        return 0\n    return combinations(a, b)\n}\n\nexport { combinatory }\n","import { ITable, IProbabilities, IResult, IBarChartItem } from '../types/tables'\nimport { combinatory } from './general'\n\nconst binomialModel = (r: number, n: number, p: number): number => {\n    const nCr = combinatory(n, r)\n    const result = nCr * p ** r * (1 - p) ** (n - r)\n    return result\n}\n\nconst accumulatedLeft = (r: number, n: number, p: number): number => {\n    let total = 0\n\n    for (let x = 0; x <= r; x++) total += binomialModel(x, n, p)\n\n    return total\n}\n\nconst accumulatedRight = (r: number, n: number, p: number): number => {\n    let total = 0\n\n    for (let x = r; x <= n; x++) total += binomialModel(x, n, p)\n\n    return total\n}\n\n/**\n * \"Esperanza matematica\" o mu\n * @param n Cantidad de observaciones\n * @param p Probabilidad de exito\n * @returns Esperanza matematica\n */\nconst expectedValue = (n: number, p: number): number => {\n    return n * p\n}\n\nconst variance = (n: number, p: number): number => {\n    return n * p * (1 - p)\n}\n\nconst stdDeviation = (n: number, p: number): number => {\n    return Math.sqrt(variance(n, p))\n}\n\nconst assymetry = (n: number, p: number): number => {\n    return (1 - 2 * p) / Math.sqrt(n * p * (1 - p))\n}\nconst kurtosis = (n: number, p: number): number => {\n    return 3 + (1 - 6 * p * (1 - p)) / (n * p * (1 - p))\n}\n\nconst partialLeftExpected = (r: number, n: number, p: number): number => {\n    let total = 0\n    for (let x = 0; x <= r; x++) total += x * binomialModel(x, n, p)\n    return total\n}\nconst partialRightExpected = (r: number, n: number, p: number): number => {\n    let total = 0\n    for (let x = r; x <= n; x++) total += x * binomialModel(x, n, p)\n    return total\n}\n\nconst createTable = (\n    n: number,\n    p: number,\n    from?: number,\n    to?: number,\n): ITable => {\n    const headers = ['r', 'P(r)', 'F(r)', 'G(r)', 'H(r)', 'J(r)']\n    const content: number[][] = []\n\n    from = from ?? 0\n    to = to ?? n\n\n    for (let r = from; r <= to; r++) {\n        content.push([\n            r,\n            binomialModel(r, n, p),\n            accumulatedLeft(r, n, p),\n            accumulatedRight(r, n, p),\n            partialLeftExpected(r, n, p),\n            partialRightExpected(r, n, p),\n        ])\n    }\n    return { headers, content }\n}\n\nconst createLandingChart = (n: number, p: number): IBarChartItem[] => {\n    const chart_data: IBarChartItem[] = []\n\n    for (let r = 0; r <= n; r++) {\n        chart_data.push({\n            label: r,\n            value: binomialModel(r, n, p),\n        })\n    }\n    return chart_data\n}\n\nconst analysis_labels = {\n    expected: 'E(r) = \\\\mu',\n    variance: 'V(r) = \\\\sigma^2',\n    std_dev: 'D(r) = \\\\sigma',\n    assymetry: 'As = \\\\alpha_3',\n    kurtosis: 'Ku = \\\\alpha_4',\n}\n\nconst getAnalysis = (\n    sampleSize: number,\n    successProbability: number,\n): IResult[] => {\n    const results: IResult[] = [\n        {\n            texLabel: analysis_labels.expected,\n            value: expectedValue(sampleSize, successProbability),\n        },\n        {\n            texLabel: analysis_labels.variance,\n            value: variance(sampleSize, successProbability),\n        },\n        {\n            texLabel: analysis_labels.std_dev,\n            value: stdDeviation(sampleSize, successProbability),\n        },\n        {\n            texLabel: analysis_labels.assymetry,\n            value: assymetry(sampleSize, successProbability),\n        },\n        {\n            texLabel: analysis_labels.kurtosis,\n            value: kurtosis(sampleSize, successProbability),\n        },\n    ]\n\n    return results\n}\n\nconst getProbabilities = (r: number, n: number, p: number): IProbabilities => {\n    const results: IProbabilities = {\n        punctual: binomialModel(r, n, p),\n        accum_left: accumulatedLeft(r, n, p),\n        accum_right: accumulatedRight(r, n, p),\n    }\n    return results\n}\n\nconst defaultTable: ITable = {\n    headers: ['r', 'P(r)', 'F(r)', 'G(r)', 'H(r)', 'J(r)'],\n    content: [\n        [0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0],\n    ],\n}\n\nexport {\n    binomialModel,\n    accumulatedLeft,\n    accumulatedRight,\n    expectedValue,\n    variance,\n    stdDeviation,\n    assymetry,\n    kurtosis,\n    partialLeftExpected,\n    partialRightExpected,\n    createTable,\n    createLandingChart,\n    getAnalysis,\n    getProbabilities,\n    defaultTable,\n}\n","const INPUT_DEBOUNCE = 400 // ms\n\nexport { INPUT_DEBOUNCE }\n","import React, { useEffect, useState } from 'react'\nimport ProbabilityChart from '../../components/ProbabilityChart'\nimport { IOperationType } from '../../types/pages'\nimport { handleHighlight } from '../../utils/arrays'\n\nimport PunctualOrAccumulated from '../../components/PunctualOrAccumulated'\nimport ResultGroup from '../../components/ResultGroup'\nimport ProbabilityTable from '../../components/ProbabilityTable'\nimport { useDebounce } from 'react-use'\n\nimport {\n    IBarChartItem,\n    ITable,\n    IProbabilities,\n    IResult,\n    Highlight,\n} from '../../types/tables'\nimport { Spinner } from '@blueprintjs/core'\nimport PageTemplate from '../PageTemplate'\nimport { PrecisionContext } from '../../contexts/inputs'\n\nimport { defaultResults } from '../../functions/shared'\nimport { showToast } from '../../utils/toaster'\nimport NoGreater from '../../components/NoGreater'\nimport NoNegative from '../../components/NoNegative'\n\nimport BinomialInput from '../../components/InputGroups/BinomialInput'\nimport {\n    createTable,\n    defaultTable,\n    getAnalysis,\n    getProbabilities,\n} from '../../functions/binomials'\nimport { INPUT_DEBOUNCE } from '../../utils/constants'\n\nconst validateInput = (n: number, p: number, r: number): void => {\n    if (r > n) showToast(<NoGreater a=\"r\" b=\"n\" />, 'danger')\n    if (p > 1) showToast(<NoGreater a=\"p\" b=\"1\" />, 'danger')\n    if ([n, r, p].some((item) => item < 0)) showToast(<NoNegative />, 'danger')\n}\n\nfunction Binomial() {\n    const [sampleSize, setSampleSize] = useState(NaN) // n\n    const [successProbability, setSuccessProbability] = useState(NaN) // p\n    const [successFound, setSuccessFound] = useState<number>(NaN) // r\n    const [validInput, setValidInput] = useState(false)\n\n    const [roundPrecision, setRoundPrecision] = useState(5)\n    const [results, setResults] = useState<IResult[]>(defaultResults)\n    const [validResults, setValidResults] = useState(false)\n    const [probabilities, setProbabilities] = useState<IProbabilities>()\n\n    const [tableData, setTableData] = useState<ITable>()\n    const [chartData, setChartData] = useState<IBarChartItem[]>()\n\n    // const [dataFrom, setDataFrom] = useState<number>(0)\n    const [dataTo, setDataTo] = useState(0)\n    const [highlight, setHighlight] = useState<Highlight>()\n    const [opType, setOpType] = useState<IOperationType>('p')\n\n    const handleSuccessProb = (valueNum: number, valueStr: string) => {\n        setSuccessProbability(parseFloat(valueStr))\n    }\n    const handleType = (r: number, n: number, p: number) => {\n        setProbabilities(getProbabilities(r, n, p))\n    }\n\n    // for the punctual probs  loader\n    useEffect(() => {\n        setProbabilities(undefined)\n        validateInput(sampleSize, successProbability, successFound)\n    }, [sampleSize, successProbability, successFound])\n\n    // For the calculations\n    useDebounce(\n        () => {\n            handleType(successFound, sampleSize, successProbability)\n        },\n        INPUT_DEBOUNCE,\n        [sampleSize, successProbability, successFound],\n    )\n\n    // For the highlight\n    useEffect(() => {\n        const toHighlight = handleHighlight(opType, successFound, dataTo)\n        setHighlight(toHighlight)\n    }, [successFound, dataTo, opType])\n\n    // for rendering the loaders\n    useEffect(() => {\n        setTableData(undefined)\n        setChartData(undefined)\n        setResults(defaultResults)\n        setValidResults(false)\n        setProbabilities(undefined)\n\n        const valid = !!(sampleSize && successProbability)\n        setValidInput(valid)\n    }, [sampleSize, successProbability])\n\n    // Debouncing the calculations\n    useDebounce(\n        () => {\n            if (validInput) {\n                console.time('Table generation ⌚')\n                const newTable = createTable(sampleSize, successProbability)\n                console.timeEnd('Table generation ⌚')\n\n                console.time('Analysis generation ⌚')\n                const analysis = getAnalysis(sampleSize, successProbability)\n                console.timeEnd('Analysis generation ⌚')\n\n                console.time('Chart data ⌚')\n                const probs_from_table = newTable.content.map((item) => ({\n                    label: item[0],\n                    value: item[1],\n                }))\n                console.timeEnd('Chart data ⌚')\n\n                setTableData(newTable)\n                setChartData(probs_from_table)\n                setDataTo(sampleSize)\n                setResults(analysis)\n                setValidResults(true)\n            }\n        },\n        INPUT_DEBOUNCE,\n        [sampleSize, successProbability, validInput],\n    )\n\n    return (\n        <PrecisionContext.Provider value={roundPrecision}>\n            <PageTemplate\n                noInputs={{ a: 'n', b: 'p' }}\n                validInput={validInput}\n                input={\n                    <BinomialInput\n                        handleSampleSize={setSampleSize}\n                        handleSuccessProb={handleSuccessProb}\n                        handleSuccessFound={setSuccessFound}\n                        setRoundPrecision={setRoundPrecision}\n                        extraPanel={\n                            <PunctualOrAccumulated\n                                handleTab={setOpType}\n                                variable={successFound}\n                                validInput={validInput}\n                                probabilities={probabilities}\n                                varLabel=\"r\"\n                            />\n                        }\n                    />\n                }\n                analysis={\n                    <ResultGroup\n                        validResults={validResults}\n                        results={results}\n                    />\n                }\n                table={\n                    <ProbabilityTable\n                        table={tableData || defaultTable}\n                        isLoading={!tableData}\n                        highlight={highlight}\n                    />\n                }\n                chart={\n                    chartData ? (\n                        <ProbabilityChart\n                            variable=\"r\"\n                            data={chartData}\n                            highlight={highlight}\n                        />\n                    ) : (\n                        <Spinner size={100} />\n                    )\n                }\n            />\n        </PrecisionContext.Provider>\n    )\n}\n\nexport default Binomial\n","import { Label, NumericInput } from '@blueprintjs/core'\nimport React, { useContext } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { PrecisionContext } from '../../../contexts/inputs'\nimport { Column, Row } from '../../../pages/layout'\nimport ProbabilityInput from '../../ProbabilityInput'\n\ntype BlueprintStateSetter = (valueNum: number, valueStr: string) => void\ntype StateSetter = (value: React.SetStateAction<number>) => void\n\ntype IProps = {\n    handleSampleSize: BlueprintStateSetter\n    handleSuccessProb: BlueprintStateSetter\n    handleSuccessFound: BlueprintStateSetter\n    setRoundPrecision: StateSetter\n    extraPanel?: JSX.Element\n    sampleSize: number\n}\n\nconst PascalInput = ({\n    handleSampleSize,\n    handleSuccessProb,\n    handleSuccessFound,\n    setRoundPrecision,\n    extraPanel,\n    sampleSize,\n}: IProps) => {\n    const { t } = useTranslation()\n    const roundPrecision = useContext(PrecisionContext)\n\n    return (\n        <Row noPad>\n            <Column margin=\".8em 1em\" noGrow>\n                <Label>\n                    <code>r</code> = {t('success-found')}\n                    <NumericInput\n                        min={0}\n                        onValueChange={handleSuccessFound}\n                        placeholder=\"r\"\n                    />\n                </Label>\n                <ProbabilityInput\n                    min={0}\n                    max={1}\n                    stepSize={0.1}\n                    onValueChange={handleSuccessProb}\n                    placeholder=\"p\"\n                />\n                <Label>\n                    <code>n</code> = {t('sample-size')}\n                    <NumericInput\n                        min={1}\n                        onValueChange={handleSampleSize}\n                        minorStepSize={1}\n                        placeholder=\"n\"\n                    />\n                </Label>\n            </Column>\n            <Column margin=\".8em 1em\" noGrow>\n                <Label>\n                    {t('round-precision')} <code> (0.xf)</code>\n                    <NumericInput\n                        min={0}\n                        onValueChange={setRoundPrecision}\n                        value={roundPrecision ?? 'x'}\n                        placeholder=\"x\"\n                    />\n                </Label>\n                {extraPanel}\n            </Column>\n        </Row>\n    )\n}\n\nexport default PascalInput\n","import { ITable, IProbabilities, IResult } from '../types/tables'\nimport { combinatory } from './general'\nimport { analysis_labels } from './shared'\nimport { accumulatedLeft as BinomialAccumulatedLeft } from './binomials'\n\nconst probability = (n: number, r: number, p: number): number => {\n    const nCr_1 = combinatory(n - 1, r - 1)\n    const result = nCr_1 * p ** r * (1 - p) ** (n - r)\n    return result\n}\n\nconst accumulatedLeft = (n: number, r: number, p: number): number => {\n    let total = 0\n\n    for (let x = r; x <= n; x++) total += probability(x, r, p)\n\n    return total\n}\n\nconst accumulatedRight = (\n    n: number,\n    r: number,\n    p: number,\n    limit = 40,\n): number => {\n    return BinomialAccumulatedLeft(r - 1, n - 1, p)\n}\n\nconst expectedValue = (r: number, p: number): number => {\n    return r / p\n}\n\nconst variance = (r: number, p: number): number => {\n    return (r * (1 - p)) / p ** 2\n}\n\nconst stdDeviation = (r: number, p: number): number => {\n    return Math.sqrt(variance(r, p))\n}\n\nconst assymetry = (r: number, p: number): number => {\n    return (2 - p) / Math.sqrt(r * (1 - p))\n}\n\nconst kurtosis = (r: number, p: number): number => {\n    return 3 + (p ** 2 - 6 * p + 6) / (r * (1 - p))\n}\n\nconst partialLeftExpected = (n: number, r: number, p: number): number => {\n    return (r / p) * accumulatedLeft(n + 1, r + 1, p)\n}\n\nconst createTable = (r: number, p: number, from = 0, to = 60): ITable => {\n    const headers = ['n', 'P(n)', 'F(n)', 'G(n)', 'H(n)']\n    // const headers = ['r', 'P(r)', 'F(r)', 'G(r)', 'H(r)', 'J(r)']\n    const content: number[][] = []\n\n    from = from ?? 0\n\n    for (let n = from; n <= to; n++) {\n        content.push([\n            n,\n            probability(n, r, p),\n            accumulatedLeft(n, r, p),\n            accumulatedRight(n, r, p),\n            partialLeftExpected(n, r, p),\n            // partialRightExpected(n, r, p),\n        ])\n    }\n    return { headers, content }\n}\n\nconst getAnalysis = (\n    successFound: number,\n    successProbability: number,\n): IResult[] => {\n    const results: IResult[] = [\n        {\n            texLabel: analysis_labels.expected,\n            value: expectedValue(successFound, successProbability),\n        },\n        {\n            texLabel: analysis_labels.variance,\n            value: variance(successFound, successProbability),\n        },\n        {\n            texLabel: analysis_labels.std_dev,\n            value: stdDeviation(successFound, successProbability),\n        },\n        {\n            texLabel: analysis_labels.assymetry,\n            value: assymetry(successFound, successProbability),\n        },\n        {\n            texLabel: analysis_labels.kurtosis,\n            value: kurtosis(successFound, successProbability),\n        },\n    ]\n\n    return results\n}\n\nconst getProbabilities = (n: number, r: number, p: number): IProbabilities => {\n    const results: IProbabilities = {\n        punctual: probability(n, r, p),\n        accum_left: accumulatedLeft(n, r, p),\n        accum_right: accumulatedRight(n, r, p),\n    }\n    return results\n}\n\nconst defaultTable: ITable = {\n    headers: ['r', 'P(r)', 'F(r)', 'G(r)', 'H(r)'],\n    content: [\n        [0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0],\n    ],\n}\n\nexport {\n    probability,\n    accumulatedLeft,\n    accumulatedRight,\n    expectedValue,\n    stdDeviation,\n    assymetry,\n    kurtosis,\n    partialLeftExpected,\n    createTable,\n    getAnalysis,\n    getProbabilities,\n    defaultTable,\n}\n","import React, { useEffect, useState } from 'react'\nimport ProbabilityChart from '../../components/ProbabilityChart'\nimport { IOperationType } from '../../types/pages'\nimport { handleHighlight } from '../../utils/arrays'\n\nimport PunctualOrAccumulated from '../../components/PunctualOrAccumulated'\nimport ResultGroup from '../../components/ResultGroup'\nimport ProbabilityTable from '../../components/ProbabilityTable'\nimport { useDebounce } from 'react-use'\n\nimport {\n    IBarChartItem,\n    ITable,\n    IProbabilities,\n    IResult,\n    Highlight,\n} from '../../types/tables'\nimport { Spinner } from '@blueprintjs/core'\nimport PageTemplate from '../PageTemplate'\nimport { PrecisionContext } from '../../contexts/inputs'\n\nimport PascalInput from '../../components/InputGroups/PascalInput'\nimport { defaultResults } from '../../functions/shared'\nimport { showToast } from '../../utils/toaster'\nimport NoGreater from '../../components/NoGreater'\n\nimport NoNegative from '../../components/NoNegative'\nimport { INPUT_DEBOUNCE } from '../../utils/constants'\nimport {\n    createTable,\n    defaultTable,\n    getAnalysis,\n    getProbabilities,\n} from '../../functions/pascal'\n\nconst validateInput = (n: number, p: number, r: number): void => {\n    if (p > 1) showToast(<NoGreater a=\"p\" b=\"1\" />, 'danger')\n    if ([n, r, p].some((item) => item < 0)) showToast(<NoNegative />, 'danger')\n}\n\nfunction Pascal() {\n    const [sampleSize, setSampleSize] = useState(NaN) // n\n    const [successProbability, setSuccessProbability] = useState(NaN) // p\n    const [successFound, setSuccessFound] = useState<number>(NaN) // r\n    const [validInput, setValidInput] = useState(false)\n\n    const [roundPrecision, setRoundPrecision] = useState(5)\n    const [results, setResults] = useState<IResult[]>(defaultResults)\n    const [validResults, setValidResults] = useState(false)\n    const [probabilities, setProbabilities] = useState<IProbabilities>()\n\n    const [tableData, setTableData] = useState<ITable>()\n    const [chartData, setChartData] = useState<IBarChartItem[]>()\n\n    const [dataFrom, setDataFrom] = useState<number>(0)\n    const [dataTo, setDataTo] = useState(60)\n    const [highlight, setHighlight] = useState<Highlight>()\n    const [opType, setOpType] = useState<IOperationType>('p')\n\n    const handleSampleSize = (valueNum: number, valueStr: string) => {\n        setSampleSize(valueNum)\n        setProbabilities(undefined)\n    }\n    const handleSuccessProb = (valueNum: number, valueStr: string) => {\n        setSuccessProbability(parseFloat(valueStr) ?? 0)\n    }\n    const handleSuccessFound = (valueNum: number, valueStr: string) => {\n        const value = parseFloat(valueStr) ?? 0\n        setSuccessFound(value)\n        setDataFrom(value)\n        setDataTo(value + 80)\n    }\n    const handleType = (r: number, n: number, p: number) => {\n        setProbabilities(getProbabilities(n, r, p))\n    }\n\n    useEffect(() => {\n        validateInput(sampleSize, successProbability, successFound)\n    }, [sampleSize, successProbability, successFound])\n\n    // For the  calculations\n    useDebounce(\n        () => {\n            handleType(successFound, sampleSize, successProbability)\n        },\n        INPUT_DEBOUNCE,\n        [sampleSize, successProbability, successFound],\n    )\n\n    // For the higlights\n    useEffect(() => {\n        const toHighlight = handleHighlight(\n            opType,\n            sampleSize,\n            dataTo,\n            dataFrom,\n        )\n        setHighlight(toHighlight)\n    }, [sampleSize, opType, dataTo, dataFrom])\n\n    // for rendering the loaders\n    useEffect(() => {\n        setTableData(undefined)\n        setChartData(undefined)\n        setResults(defaultResults)\n        setValidResults(false)\n        setProbabilities(undefined)\n    }, [successFound, successProbability])\n\n    // Debouncing the table and chart calculations\n    useDebounce(\n        () => {\n            if (validInput) {\n                console.time('Table generation ⌚')\n                const newTable = createTable(\n                    successFound,\n                    successProbability,\n                    dataFrom,\n                    dataTo,\n                )\n                console.timeEnd('Table generation ⌚')\n\n                console.time('Analysis generation ⌚')\n                const analysis = getAnalysis(successFound, successProbability) // TODO: check (1)\n                console.timeEnd('Analysis generation ⌚')\n\n                console.time('Chart data ⌚')\n                const probs_from_table = newTable.content.map((item) => ({\n                    label: item[0],\n                    value: item[1],\n                }))\n                console.timeEnd('Chart data ⌚')\n\n                setTableData(newTable)\n                setResults(analysis) // TODO: check (1)\n                setChartData(probs_from_table)\n                setValidResults(true)\n            }\n        },\n        INPUT_DEBOUNCE,\n        [successFound, successProbability, validInput],\n    )\n\n    useEffect(() => {\n        const valid = !!(successFound && successProbability)\n        setValidInput(valid)\n    }, [successFound, successProbability])\n\n    return (\n        <PrecisionContext.Provider value={roundPrecision}>\n            <PageTemplate\n                noInputs={{ a: 'r', b: 'p' }}\n                validInput={validInput}\n                input={\n                    <PascalInput\n                        handleSampleSize={handleSampleSize}\n                        handleSuccessProb={handleSuccessProb}\n                        handleSuccessFound={handleSuccessFound}\n                        setRoundPrecision={setRoundPrecision}\n                        sampleSize={sampleSize}\n                        extraPanel={\n                            <PunctualOrAccumulated\n                                handleTab={setOpType}\n                                variable={sampleSize}\n                                validInput={validInput}\n                                probabilities={probabilities}\n                                varLabel=\"n\"\n                            />\n                        }\n                    />\n                }\n                analysis={\n                    <ResultGroup\n                        validResults={validResults}\n                        results={results}\n                    />\n                }\n                table={\n                    <ProbabilityTable\n                        table={tableData || defaultTable}\n                        isLoading={!tableData}\n                        highlight={highlight}\n                    />\n                }\n                chart={\n                    chartData ? (\n                        <ProbabilityChart\n                            variable=\"n\"\n                            data={chartData}\n                            highlight={highlight}\n                        />\n                    ) : (\n                        <Spinner size={100} />\n                    )\n                }\n            />\n        </PrecisionContext.Provider>\n    )\n}\n\nexport default Pascal\n","import { EditableText, H3 } from '@blueprintjs/core'\nimport styled from 'styled-components'\n\nconst LandingContainer = styled.div`\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    position: relative;\n`\n\nconst LandingBackground = styled.div`\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    z-index: 0;\n`\nconst HeaderContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    z-index: 1;\n`\nconst ChartControls = styled.div`\n    display: flex;\n    flex-direction: row;\n    align-items: baseline;\n\n    position: absolute;\n    bottom: 0;\n    right: 0;\n    margin: 1em;\n`\nconst StyledEditableText = styled(EditableText)`\n    width: 1.6em;\n    .bp3-editable-text-content {\n        min-width: 1.8em !important;\n    }\n`\nconst SizeInput = styled(H3)`\n    margin-right: 0.5em;\n`\n\nexport {\n    LandingContainer,\n    LandingBackground,\n    HeaderContainer,\n    ChartControls,\n    StyledEditableText,\n    SizeInput,\n}\n","import React, { useContext, useState } from 'react'\nimport { useInterval } from 'react-use'\nimport {\n    Bar,\n    BarChart,\n    CartesianGrid,\n    Cell,\n    ResponsiveContainer,\n} from 'recharts'\nimport { ThemeContext } from 'styled-components'\nimport { createLandingChart } from '../../functions/binomials'\nimport { IBarChartItem } from '../../types/tables'\n\nconst createRandomChart = (prob: number, entries: number): IBarChartItem[] => {\n    // console.time('Creating table 📅')\n    const chart_data = createLandingChart(entries, prob)\n    // console.timeEnd('Creating table 📅')\n\n    return chart_data\n}\n\nconst INITIAL_PROB = 0.01\n\ntype IProps = {\n    playAnimation: boolean\n    size: number\n}\n\nconst LandingChart = ({ playAnimation, size }: IProps) => {\n    const themeContext = useContext(ThemeContext)\n    const [chartData, setChartData] = useState(\n        createRandomChart(INITIAL_PROB, size),\n    )\n    const [prob, setProb] = useState(INITIAL_PROB)\n\n    useInterval(\n        () => {\n            const new_prob = prob < 0.96 ? prob + 0.04 : 0.04\n            setProb(new_prob)\n            setChartData(createRandomChart(new_prob, size))\n        },\n        playAnimation ? 800 : null,\n    )\n\n    return (\n        <ResponsiveContainer>\n            <BarChart data={chartData}>\n                <CartesianGrid\n                    strokeDasharray=\"2 5\"\n                    stroke={themeContext.chart_gridColor}\n                />\n                <Bar dataKey=\"value\">\n                    {chartData.map((entry, index) => (\n                        <Cell\n                            key={`cell-${index}`}\n                            fill={themeContext.landing_chart}\n                        />\n                    ))}\n                </Bar>\n            </BarChart>\n        </ResponsiveContainer>\n    )\n}\n\nexport default LandingChart\n","import React, { useState } from 'react'\nimport { HomeHeader, HomeSubTitle, StyledLink } from '../../styles/typography'\nimport TextLoop from 'react-text-loop'\nimport { getLandingPageOptions } from '../available'\n// import { Link } from 'react-router-dom'\nimport { useTranslation } from 'react-i18next'\nimport {\n    ChartControls,\n    HeaderContainer,\n    LandingBackground,\n    LandingContainer,\n    SizeInput,\n    StyledEditableText,\n} from './styles'\nimport LandingChart from '../../components/LandingChart'\nimport { Button } from '@blueprintjs/core'\n\nconst INITIAL_SIZE = 60\n\nconst cleanSize = (value: string): number => {\n    const newSize = parseInt(value)\n    let result: number\n\n    if (!isNaN(newSize)) {\n        if (newSize < 1) result = 1\n        else if (newSize > 150) result = 150\n        else result = newSize\n    } else if (value === '') result = 0\n    else result = INITIAL_SIZE\n\n    return result\n}\n\nconst Home = () => {\n    const { t } = useTranslation()\n    const [playAnimation, setPlayAnimation] = useState(true)\n    const [size, setSize] = useState(INITIAL_SIZE)\n\n    const toggleAnimation = () => {\n        setPlayAnimation((prev) => !prev)\n    }\n\n    const handleSize = (value: string) => {\n        setSize(cleanSize(value))\n    }\n\n    return (\n        <LandingContainer>\n            <HeaderContainer>\n                <HomeHeader>\n                    {t('home-header-line-1')}\n                    <br />\n                    {t('home-header-line-2')}\n                </HomeHeader>\n                <HomeSubTitle>\n                    {t('calculate-pre')}&nbsp;\n                    <code>\n                        <TextLoop>\n                            {getLandingPageOptions().map((option) => (\n                                <StyledLink to={option.url} key={option.id}>\n                                    {option.id}\n                                </StyledLink>\n                            ))}\n                        </TextLoop>\n                    </code>\n                    {t('calculate-post')}\n                </HomeSubTitle>\n            </HeaderContainer>\n\n            <LandingBackground>\n                <LandingChart playAnimation={playAnimation} size={size - 1} />\n                <ChartControls>\n                    <SizeInput>\n                        <code>\n                            n =&nbsp;\n                            <StyledEditableText\n                                value={String(size)}\n                                onChange={handleSize}\n                                maxLength={3}\n                            />\n                        </code>\n                    </SizeInput>\n                    <Button\n                        intent=\"primary\"\n                        icon={playAnimation ? 'pause' : 'play'}\n                        onClick={toggleAnimation}\n                        large\n                    />\n                </ChartControls>\n            </LandingBackground>\n        </LandingContainer>\n    )\n}\n\nexport default Home\n","import { Label, NumericInput } from '@blueprintjs/core'\nimport React, { useContext } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { PrecisionContext } from '../../../contexts/inputs'\nimport { Column, Row } from '../../../pages/layout'\n\ntype StateSetter = (value: React.SetStateAction<number>) => void\n\ntype IProps = {\n    handleTotalSize: StateSetter\n    handleTotalSuccess: StateSetter\n    handleSampleSize: StateSetter\n    handleSuccessFound: StateSetter\n    setRoundPrecision: (value: number) => void\n    extraPanel?: JSX.Element\n}\n\nconst PascalInput = ({\n    handleSampleSize,\n    handleTotalSize,\n    handleTotalSuccess,\n    handleSuccessFound,\n    setRoundPrecision,\n    extraPanel,\n}: IProps) => {\n    const { t } = useTranslation()\n    const roundPrecision = useContext(PrecisionContext)\n\n    const handleNaNs = (numVal: number, strVal: string): void => {\n        if (!strVal) numVal = NaN\n        handleSuccessFound(numVal)\n    }\n\n    return (\n        <Row noPad>\n            <Column margin=\".8em 1em\" noGrow>\n                <Label>\n                    <code>N</code> = {t('population-size')}\n                    <NumericInput\n                        min={0}\n                        stepSize={1}\n                        onValueChange={handleTotalSize}\n                        placeholder=\"N\"\n                    />\n                </Label>\n                <Label>\n                    <code>R</code> = {t('total-success')}\n                    <NumericInput\n                        min={0}\n                        stepSize={1}\n                        onValueChange={handleTotalSuccess}\n                        placeholder=\"N\"\n                    />\n                </Label>\n                <Label>\n                    <code>n</code> = {t('sample-size')}\n                    <NumericInput\n                        min={1}\n                        onValueChange={handleSampleSize}\n                        minorStepSize={1}\n                        placeholder=\"n\"\n                    />\n                </Label>\n                <Label>\n                    <code>r</code> = {t('success-found')}\n                    <NumericInput\n                        min={0}\n                        onValueChange={handleNaNs}\n                        placeholder=\"r\"\n                    />\n                </Label>\n            </Column>\n            <Column margin=\".8em 1em\" noGrow>\n                <Label>\n                    {t('round-precision')} <code> (0.xf)</code>\n                    <NumericInput\n                        min={0}\n                        onValueChange={setRoundPrecision}\n                        value={roundPrecision ?? 'x'}\n                        placeholder=\"x\"\n                    />\n                </Label>\n                {extraPanel}\n            </Column>\n        </Row>\n    )\n}\n\nexport default PascalInput\n","import { IProbabilities, IResult, ITable } from '../types/tables'\nimport { combinatory } from './general'\nimport { analysis_labels } from './shared'\n\nconst probability = (r: number, n: number, N: number, R: number): number => {\n    const MIN_LIMIT = Math.max(0, n - (N - R))\n    const MAX_LIMIT = Math.min(n, R)\n\n    if (r < MIN_LIMIT || r > MAX_LIMIT) return 0\n\n    const numerator = combinatory(R, r) * combinatory(N - R, n - r)\n    const denominator = combinatory(N, n)\n\n    return numerator / denominator\n}\n\nconst accumulatedLeft = (\n    r: number,\n    n: number,\n    N: number,\n    R: number,\n): number => {\n    let total = 0\n\n    for (let x = 0; x <= r; x++) total += probability(x, n, N, R)\n\n    return total\n}\n\nconst accumulatedRight = (\n    r: number,\n    n: number,\n    N: number,\n    R: number,\n): number => {\n    let total = 0\n\n    for (let x = r; x <= n; x++) total += probability(x, n, N, R)\n\n    return total\n}\n\nconst expectedValue = (n: number, N: number, R: number): number => {\n    return n * (R / N)\n}\n\nconst variance = (n: number, N: number, R: number): number => {\n    return n * (R / N) * (1 - R / N) * ((N - n) / (N - 1))\n}\n\nconst stdDeviation = (n: number, N: number, R: number): number => {\n    return Math.sqrt(variance(n, N, R))\n}\n\nconst assymetry = (n: number, N: number, R: number): number => {\n    const numerator = (N - 2 * R) * (N - 2 * n) * Math.sqrt(N - 1)\n    const denominator = (N - 2) * Math.sqrt(n * R * (N - R) * (N - n))\n\n    return numerator / denominator\n}\n\nconst kurtosis = (n: number, N: number, R: number): number => {\n    // What a hell of a function man\n    const part_1 =\n        (N ** 2 * (N - 1)) / (n * R * (N - 2) * (N - 3) * (N - R) * (N - n))\n    const part_2a = N * (N + 1)\n    const part_2b = 6 * n * (N - n)\n    const part_2c =\n        3 *\n        (R / N ** 2) *\n        (N - R) *\n        (N ** 2 * (n - 2) - N * n ** 2 + 6 * n * (N - n))\n\n    return part_1 * (part_2a - part_2b + part_2c)\n}\n\nconst partialLeftExpected = (\n    r: number,\n    n: number,\n    N: number,\n    R: number,\n): number => {\n    return n * (R / N) * accumulatedLeft(r - 1, n - 1, N - 1, R - 1)\n}\n\nconst createTable = (n: number, N: number, R: number): ITable => {\n    const headers = ['r', 'P(r)', 'F(r)', 'G(r)', 'H(r)']\n    // const headers = ['r', 'P(r)', 'F(r)', 'G(r)', 'H(r)', 'J(r)']\n\n    const content: number[][] = []\n\n    for (let r = 0; r <= n; r++) {\n        content.push([\n            r,\n            probability(r, n, N, R),\n            accumulatedLeft(r, n, N, R),\n            accumulatedRight(r, n, N, R),\n            partialLeftExpected(r, n, N, R),\n            // partialRightExpected(r, n, N, R),\n        ])\n    }\n    return { headers, content }\n}\n\nconst getAnalysis = (n: number, N: number, R: number): IResult[] => {\n    const results: IResult[] = [\n        {\n            texLabel: analysis_labels.expected,\n            value: expectedValue(n, N, R),\n        },\n        {\n            texLabel: analysis_labels.variance,\n            value: variance(n, N, R),\n        },\n        {\n            texLabel: analysis_labels.std_dev,\n            value: stdDeviation(n, N, R),\n        },\n        {\n            texLabel: analysis_labels.assymetry,\n            value: assymetry(n, N, R),\n        },\n        {\n            texLabel: analysis_labels.kurtosis,\n            value: kurtosis(n, N, R),\n        },\n    ]\n    return results\n}\n\nconst getProbabilities = (\n    r: number,\n    n: number,\n    N: number,\n    R: number,\n): IProbabilities => {\n    const results: IProbabilities = {\n        punctual: probability(r, n, N, R),\n        accum_left: accumulatedLeft(r, n, N, R),\n        accum_right: accumulatedRight(r, n, N, R),\n    }\n    return results\n}\n\nconst defaultTable: ITable = {\n    headers: ['r', 'P(r)', 'F(r)', 'G(r)', 'H(r)'],\n    content: [\n        [0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0],\n    ],\n}\n\nexport {\n    probability,\n    accumulatedLeft,\n    accumulatedRight,\n    createTable,\n    getAnalysis,\n    getProbabilities,\n    defaultTable,\n}\n","import React, { useEffect, useState } from 'react'\nimport ProbabilityChart from '../../components/ProbabilityChart'\nimport { IOperationType } from '../../types/pages'\nimport { handleHighlight } from '../../utils/arrays'\n\nimport PunctualOrAccumulated from '../../components/PunctualOrAccumulated'\nimport ResultGroup from '../../components/ResultGroup'\nimport ProbabilityTable from '../../components/ProbabilityTable'\nimport { useDebounce } from 'react-use'\n\nimport {\n    IBarChartItem,\n    ITable,\n    IProbabilities,\n    IResult,\n    Highlight,\n} from '../../types/tables'\nimport { Spinner } from '@blueprintjs/core'\nimport PageTemplate from '../PageTemplate'\nimport { PrecisionContext } from '../../contexts/inputs'\n\nimport HypergeometricInput from '../../components/InputGroups/HypergeometricInput'\nimport {\n    createTable,\n    defaultTable,\n    getAnalysis,\n    getProbabilities,\n} from '../../functions/hypergeometric'\nimport { defaultResults } from '../../functions/shared'\nimport { showToast } from '../../utils/toaster'\nimport NoGreater from '../../components/NoGreater'\nimport NoNegative from '../../components/NoNegative'\nimport { INPUT_DEBOUNCE } from '../../utils/constants'\n\nconst validateInput = (N: number, R: number, n: number, r: number): void => {\n    if (R > N) showToast(<NoGreater a=\"R\" b=\"N\" />, 'danger')\n    if (n > N) showToast(<NoGreater a=\"n\" b=\"N\" />, 'danger')\n    if (r > n) showToast(<NoGreater a=\"r\" b=\"n\" />, 'danger')\n    if (r > R) showToast(<NoGreater a=\"r\" b=\"R\" />, 'danger')\n    if ([N, R, n, r].some((item) => item < 0))\n        showToast(<NoNegative />, 'danger')\n}\n\nfunction Hypergeometric() {\n    const [totalSize, setTotalSize] = useState(NaN) // .............. N\n    const [totalSuccess, setTotalSuccess] = useState(NaN) // ........ R\n    const [sampleSize, setSampleSize] = useState(NaN) // ............ n\n    const [successFound, setSuccessFound] = useState<number>(NaN) //. r\n\n    const [validInput, setValidInput] = useState(false)\n\n    const [roundPrecision, setRoundPrecision] = useState(5)\n    const [results, setResults] = useState<IResult[]>(defaultResults)\n    const [validResults, setValidResults] = useState(false)\n    const [probabilities, setProbabilities] = useState<IProbabilities>()\n\n    const [tableData, setTableData] = useState<ITable>()\n    const [chartData, setChartData] = useState<IBarChartItem[]>()\n\n    const [highlight, setHighlight] = useState<Highlight>()\n    const [opType, setOpType] = useState<IOperationType>('p')\n\n    const handleType = (r: number, n: number, N: number, R: number) => {\n        setProbabilities(getProbabilities(r, n, N, R))\n    }\n\n    // For the panel animation\n    useEffect(() => {\n        setProbabilities(undefined)\n        validateInput(totalSize, totalSuccess, sampleSize, successFound)\n    }, [totalSize, totalSuccess, sampleSize, successFound])\n\n    // For the  calculations\n    useDebounce(\n        () => {\n            handleType(successFound, sampleSize, totalSize, totalSuccess)\n        },\n        INPUT_DEBOUNCE,\n        [totalSize, totalSuccess, sampleSize, successFound],\n    )\n\n    // For the higlights\n    useEffect(() => {\n        const toHighlight = handleHighlight(opType, successFound, sampleSize)\n        setHighlight(toHighlight)\n    }, [successFound, sampleSize, opType])\n\n    // for rendering the loaders\n    useEffect(() => {\n        setTableData(undefined)\n        setChartData(undefined)\n        setResults(defaultResults)\n        setValidResults(false)\n        setProbabilities(undefined)\n    }, [totalSize, totalSuccess, sampleSize])\n\n    // Debouncing the table and chart calculations\n    useDebounce(\n        () => {\n            if (validInput) {\n                console.time('Table generation ⌚')\n                const newTable = createTable(\n                    sampleSize,\n                    totalSize,\n                    totalSuccess,\n                )\n                console.timeEnd('Table generation ⌚')\n\n                console.time('Analysis generation ⌚')\n                const analysis = getAnalysis(\n                    sampleSize,\n                    totalSize,\n                    totalSuccess,\n                ) // TODO: add J(r) (1)\n                console.timeEnd('Analysis generation ⌚')\n\n                console.time('Chart data ⌚')\n                const probs_from_table = newTable.content.map((item) => ({\n                    label: item[0],\n                    value: item[1],\n                }))\n                console.timeEnd('Chart data ⌚')\n\n                setTableData(newTable)\n                setResults(analysis) // TODO: add J(r) (1)\n                setChartData(probs_from_table)\n                setValidResults(true)\n            }\n        },\n        INPUT_DEBOUNCE,\n        [totalSize, totalSuccess, sampleSize, validInput],\n    )\n\n    useEffect(() => {\n        const valid = !!(totalSize && totalSuccess && sampleSize)\n        setValidInput(valid)\n    }, [totalSize, totalSuccess, sampleSize])\n\n    return (\n        <PrecisionContext.Provider value={roundPrecision}>\n            <PageTemplate\n                noInputs={{ a: 'N', b: 'n', c: 'R' }}\n                validInput={validInput}\n                input={\n                    <HypergeometricInput\n                        handleTotalSize={setTotalSize} // N\n                        handleTotalSuccess={setTotalSuccess} // R\n                        handleSampleSize={setSampleSize} // n\n                        handleSuccessFound={setSuccessFound} // r\n                        setRoundPrecision={setRoundPrecision}\n                        extraPanel={\n                            <PunctualOrAccumulated\n                                handleTab={setOpType}\n                                variable={successFound}\n                                validInput={validInput}\n                                probabilities={probabilities}\n                                varLabel=\"r\"\n                            />\n                        }\n                    />\n                }\n                analysis={\n                    <ResultGroup\n                        validResults={validResults}\n                        results={results}\n                    />\n                }\n                table={\n                    <ProbabilityTable\n                        table={tableData || defaultTable}\n                        isLoading={!tableData}\n                        highlight={highlight}\n                    />\n                }\n                chart={\n                    chartData ? (\n                        <ProbabilityChart\n                            variable=\"r\"\n                            data={chartData}\n                            highlight={highlight}\n                        />\n                    ) : (\n                        <Spinner size={100} />\n                    )\n                }\n            />\n        </PrecisionContext.Provider>\n    )\n}\n\nexport default Hypergeometric\n","import React from 'react'\nimport { Spinner } from '@blueprintjs/core'\nimport styled from 'styled-components'\nimport { Header } from '../Sidebar/styles'\nimport { CenteredContainer } from '../../pages/layout'\n\nconst StyledHeader = styled(Header)`\n    margin-bottom: 0.5em;\n`\n\nconst LoadingScreen = () => {\n    return (\n        <CenteredContainer>\n            <StyledHeader>\n                Probab<code>/ly</code>\n            </StyledHeader>\n            <Spinner intent=\"primary\" />\n        </CenteredContainer>\n    )\n}\n\nexport default LoadingScreen\n","import React, { useContext } from 'react'\nimport { ThemeContext } from 'styled-components'\nimport { InlineSvg } from '../styles'\n\nconst ThinkingIcon = () => {\n    const theme = useContext(ThemeContext)\n\n    return (\n        <InlineSvg\n            id=\"emoji\"\n            viewBox=\"0 0 72 72\"\n            version=\"1.1\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n        >\n            <g id=\"color\">\n                <circle cx=\"36\" cy=\"36.2\" r=\"24\" fill={theme.emojiSkin} />\n                <path\n                    fill={theme.emojiSkin}\n                    d=\"M19.1,62.3c-0.3-1.2-0.4-2.4-0.3-3.6c0.2-1.1,2.3-6.5,2.7-7.3s1.4-4.5,2.4-4.8c1-0.3,1.2,0.1,1.1,0.7 S24.4,55,24.4,55l9.4-2.8c0,0,7.7-1.9,7.9-1c2.1,2-5.4,4.5-7.5,4.4c0,0,1.1,0.6,0.9,1.3s-0.8,1.2-1,1.2s0.5,0.5,0.6,1.4 c0.9,1.8-2.8,2.3-2.8,2.3c1.3-0.2,3.3,2.1,0.1,2.7c-1,0.3-4.8,1.4-4.8,1.4s-3.3,1.2-5.2-0.1C20.8,65,19.7,63.8,19.1,62.3z\"\n                />\n            </g>\n            <g id=\"line\">\n                <path\n                    fill=\"none\"\n                    stroke=\"#000000\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                    stroke-width=\"2\"\n                    d=\"M28.9,44.5c2.4-0.7,11.9,0.5,14.1,2.1\"\n                />\n                <path\n                    fill=\"none\"\n                    stroke=\"#000000\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                    stroke-width=\"2\"\n                    d=\"M22.4,22.5c1.3-0.9,2.8-1.3,4.4-1.1c1.6,0,3.1,0.6,4.2,1.7\"\n                />\n                <path\n                    fill=\"none\"\n                    stroke=\"#000000\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                    stroke-width=\"2\"\n                    d=\"M51.1,26.5c-2.7-0.7-5.5-0.8-8.2-0.3\"\n                />\n                <path\n                    fill=\"none\"\n                    stroke=\"#000000\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                    stroke-width=\"2\"\n                    d=\"M42,58.4c12.3-3.3,19.5-15.9,16.2-28.2S42.3,10.7,30,14c-10,2.7-17,11.8-17,22.2c0,4.6,1.4,9.2,4,13\"\n                />\n                <path d=\"M31,30.7c0,1.7-1.3,3-3,3s-3-1.3-3-3s1.3-3,3-3S31,29,31,30.7\" />\n                <path d=\"M48,33.7c0,1.7-1.3,3-3,3s-3-1.3-3-3s1.3-3,3-3S48,32,48,33.7\" />\n                <path\n                    fill=\"none\"\n                    stroke=\"#000000\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                    stroke-width=\"2\"\n                    d=\"M19.7,56.7c-1,1.6-1.2,3.7-0.5,5.5c1.1,3.3,4,5.2,7.2,4.2l4.9-1.4l1-0.3c0.8-0.2,1.3-1.1,1.1-1.8l0,0 c-0.2-0.5-0.6-0.9-1.2-1l1.2-0.3c0.8-0.2,1.3-1.1,1.1-1.8c-0.2-0.5-0.6-1-1.2-1.1l1.2-0.4c0.8-0.2,1.3-1.1,1.1-1.8 c-0.1-0.5-0.5-0.9-1-1l6.4-1.9c0.8-0.2,1.3-1.1,1.1-1.8s-1.1-1.3-1.8-1.1l0,0l-10.2,3l-5.1,1.5l0.6-7.8c0.1-0.9-1.5-1.2-2.1,0.2 L19.7,56.7z\"\n                />\n            </g>\n        </InlineSvg>\n    )\n}\n\nexport default ThinkingIcon\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HomeHeader, HomeSubTitle } from '../../styles/typography'\nimport { CenteredContainer } from '../layout'\nimport { H3 } from '@blueprintjs/core'\nimport { useTranslation } from 'react-i18next'\n\nimport ThinkingIcon from '../../components/SvgIcon/ThinkingIcon'\n\nconst StyledSubTitle = styled(HomeSubTitle)`\n    margin: 0;\n`\nconst MinText = styled(H3)`\n    color: ${(props) => props.theme.disabled_link} !important;\n`\n\nconst NotFound404 = () => {\n    const { t } = useTranslation()\n\n    return (\n        <CenteredContainer>\n            <HomeHeader>\n                <code>404</code>\n            </HomeHeader>\n\n            <StyledSubTitle>{t('404-title')}</StyledSubTitle>\n\n            <MinText>\n                {t('404-subtitle')} <ThinkingIcon />\n            </MinText>\n        </CenteredContainer>\n    )\n}\n\nexport default NotFound404\n","import { Label, NumericInput } from '@blueprintjs/core'\nimport React, { useContext } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { PrecisionContext } from '../../../contexts/inputs'\nimport { Column, Row } from '../../../pages/layout'\n\ntype StateSetter = (value: React.SetStateAction<number>) => void\n\ntype IProps = {\n    handleTotalSize: StateSetter\n    handleTotalSuccess: StateSetter\n    handleSampleSize: StateSetter\n    handleSuccessFound: StateSetter\n    setRoundPrecision: (value: number) => void\n    extraPanel?: JSX.Element\n}\n\nconst PascalInput = ({\n    handleSampleSize,\n    handleTotalSize,\n    handleTotalSuccess,\n    handleSuccessFound,\n    setRoundPrecision,\n    extraPanel,\n}: IProps) => {\n    const { t } = useTranslation()\n    const roundPrecision = useContext(PrecisionContext)\n\n    const handleNaNs = (numVal: number, strVal: string): void => {\n        if (!strVal) numVal = NaN\n        handleSampleSize(numVal)\n    }\n\n    return (\n        <Row noPad>\n            <Column margin=\".8em 1em\" noGrow>\n                <Label>\n                    <code>N</code> = {t('population-size')}\n                    <NumericInput\n                        min={0}\n                        stepSize={1}\n                        onValueChange={handleTotalSize}\n                        placeholder=\"N\"\n                    />\n                </Label>\n                <Label>\n                    <code>R</code> = {t('total-success')}\n                    <NumericInput\n                        min={0}\n                        stepSize={1}\n                        onValueChange={handleTotalSuccess}\n                        placeholder=\"N\"\n                    />\n                </Label>\n                <Label>\n                    <code>r</code> = {t('success-found')}\n                    <NumericInput\n                        min={0}\n                        onValueChange={handleSuccessFound}\n                        placeholder=\"r\"\n                    />\n                </Label>\n                <Label>\n                    <code>n</code> = {t('sample-size')}\n                    <NumericInput\n                        min={1}\n                        onValueChange={handleNaNs}\n                        minorStepSize={1}\n                        placeholder=\"n\"\n                    />\n                </Label>\n            </Column>\n            <Column margin=\".8em 1em\" noGrow>\n                <Label>\n                    {t('round-precision')} <code> (0.xf)</code>\n                    <NumericInput\n                        min={0}\n                        onValueChange={setRoundPrecision}\n                        value={roundPrecision ?? 'x'}\n                        placeholder=\"x\"\n                    />\n                </Label>\n                {extraPanel}\n            </Column>\n        </Row>\n    )\n}\n\nexport default PascalInput\n","import { IProbabilities, IResult, ITable } from '../types/tables'\nimport { combinatory } from './general'\nimport { analysis_labels } from './shared'\n\nconst probability = (n: number, r: number, N: number, R: number): number => {\n    if (n < r || n > N - R + r)\n        // variable outside domain\n        return 0\n\n    const numerator = combinatory(N - n, R - r) * combinatory(n - 1, r - 1)\n    const denominator = combinatory(N, R)\n\n    return numerator / denominator\n}\n\nconst accumulatedLeft = (\n    n: number,\n    r: number,\n    N: number,\n    R: number,\n): number => {\n    let total = 0\n\n    for (let x = r; x <= n; x++) total += probability(x, r, N, R)\n\n    return total\n}\n\nconst accumulatedRight = (\n    n: number,\n    r: number,\n    N: number,\n    R: number,\n): number => {\n    let total = 0\n\n    for (let x = n; x <= N - R + r; x++) total += probability(x, r, N, R)\n\n    return total\n}\n\nconst expectedValue = (r: number, N: number, R: number): number => {\n    return (r * (N + 1)) / (R + 1)\n}\n\nconst variance = (r: number, N: number, R: number): number => {\n    const mu = expectedValue(r, N, R)\n    const middle_expr = ((r + 1) * (N + 2)) / (R + 2) - 1\n\n    return mu * middle_expr - mu ** 2\n}\n\nconst stdDeviation = (r: number, N: number, R: number): number => {\n    return Math.sqrt(variance(r, N, R))\n}\n\nconst partialLeftExpected = (\n    n: number,\n    r: number,\n    N: number,\n    R: number,\n): number => {\n    return (\n        ((r * (N + 1)) / (R + 1)) * accumulatedLeft(n + 1, r + 1, N + 1, R + 1)\n    )\n}\n\nconst createTable = (r: number, N: number, R: number): ITable => {\n    const headers = ['n', 'P(n)', 'F(n)', 'G(n)', 'H(n)']\n    // const headers = ['r', 'P(r)', 'F(r)', 'G(r)', 'H(r)', 'J(r)']\n\n    const content: number[][] = []\n\n    let prob: number\n    let accL: number\n    let accR: number\n    let expe: number\n\n    for (let n = 0; n <= N; n++) {\n        prob = probability(n, r, N, R)\n        accL = accumulatedLeft(n, r, N, R)\n        accR = accumulatedRight(n, r, N, R)\n        expe = partialLeftExpected(n, r, N, R)\n        content.push([\n            n,\n            prob,\n            accL,\n            accR,\n            expe,\n            // probability(n, r, N, R),\n            // accumulatedLeft(n, r, N, R),\n            // accumulatedRight(n, r, N, R),\n            // partialLeftExpected(n, r, N, R),\n            // partialRightExpected(n, r, N, R),\n        ])\n    }\n    return { headers, content }\n}\n\nconst getAnalysis = (r: number, N: number, R: number): IResult[] => {\n    const results: IResult[] = [\n        {\n            texLabel: analysis_labels.expected,\n            value: expectedValue(r, N, R),\n        },\n        {\n            texLabel: analysis_labels.variance,\n            value: variance(r, N, R),\n        },\n        {\n            texLabel: analysis_labels.std_dev,\n            value: stdDeviation(r, N, R),\n        },\n    ]\n    return results\n}\n\nconst getProbabilities = (\n    n: number,\n    r: number,\n    N: number,\n    R: number,\n): IProbabilities => {\n    const results: IProbabilities = {\n        punctual: probability(n, r, N, R),\n        accum_left: accumulatedLeft(n, r, N, R),\n        accum_right: accumulatedRight(n, r, N, R),\n    }\n    return results\n}\n\nconst defaultTable: ITable = {\n    headers: ['n', 'P(n)', 'F(n)', 'G(n)', 'H(n)'],\n    content: [\n        [0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0],\n    ],\n}\n\nexport {\n    probability,\n    expectedValue,\n    variance,\n    stdDeviation,\n    createTable,\n    getAnalysis,\n    getProbabilities,\n    defaultTable,\n}\n","import React, { useEffect, useState } from 'react'\nimport ProbabilityChart from '../../components/ProbabilityChart'\nimport { IOperationType } from '../../types/pages'\nimport { handleHighlight } from '../../utils/arrays'\n\nimport PunctualOrAccumulated from '../../components/PunctualOrAccumulated'\nimport ResultGroup from '../../components/ResultGroup'\nimport ProbabilityTable from '../../components/ProbabilityTable'\nimport { useDebounce } from 'react-use'\n\nimport {\n    IBarChartItem,\n    ITable,\n    IProbabilities,\n    IResult,\n    Highlight,\n} from '../../types/tables'\nimport { Spinner } from '@blueprintjs/core'\nimport PageTemplate from '../PageTemplate'\nimport { PrecisionContext } from '../../contexts/inputs'\n\nimport HyperPascalInput from '../../components/InputGroups/HyperPascalInput'\nimport {\n    createTable,\n    defaultTable,\n    getAnalysis,\n    getProbabilities,\n} from '../../functions/hyperPascal'\nimport { defaultResults } from '../../functions/shared'\nimport { showToast } from '../../utils/toaster'\nimport NoGreater from '../../components/NoGreater'\nimport NoNegative from '../../components/NoNegative'\nimport { INPUT_DEBOUNCE } from '../../utils/constants'\n\nconst validateInput = (N: number, R: number, n: number, r: number): void => {\n    const MAX_n = N - R + r\n\n    if (R > N) showToast(<NoGreater a=\"R\" b=\"N\" />, 'danger')\n    if (r > N) showToast(<NoGreater a=\"r\" b=\"N\" />, 'danger')\n    if (r > R) showToast(<NoGreater a=\"r\" b=\"R\" />, 'danger')\n    if (r > n) showToast(<NoGreater a=\"r\" b=\"n\" />, 'danger')\n    if (n > MAX_n)\n        showToast(<NoGreater a=\"n\" b={`(N - R + r) = ${MAX_n}`} />, 'danger')\n    if ([N, R, n, r].some((item) => item < 0))\n        showToast(<NoNegative />, 'danger')\n}\n\nfunction HyperPascal() {\n    const [totalSize, setTotalSize] = useState(NaN) // N\n    const [totalSuccess, setTotalSuccess] = useState(NaN) // R\n    const [sampleSize, setSampleSize] = useState(NaN) // n\n    const [successFound, setSuccessFound] = useState<number>(NaN) // r\n\n    const [validInput, setValidInput] = useState(false)\n\n    const [roundPrecision, setRoundPrecision] = useState(5)\n    const [results, setResults] = useState<IResult[]>(defaultResults)\n    const [validResults, setValidResults] = useState(false)\n    const [probabilities, setProbabilities] = useState<IProbabilities>()\n\n    const [tableData, setTableData] = useState<ITable>()\n    const [chartData, setChartData] = useState<IBarChartItem[]>()\n\n    const [highlight, setHighlight] = useState<Highlight>()\n    const [opType, setOpType] = useState<IOperationType>('p')\n\n    const handleType = (n: number, r: number, N: number, R: number) => {\n        setProbabilities(getProbabilities(n, r, N, R))\n    }\n\n    // For the panel animation\n    useEffect(() => {\n        setProbabilities(undefined)\n        validateInput(totalSize, totalSuccess, sampleSize, successFound)\n    }, [totalSize, totalSuccess, sampleSize, successFound])\n\n    // For the  calculations\n    useDebounce(\n        () => {\n            handleType(sampleSize, successFound, totalSize, totalSuccess)\n        },\n        INPUT_DEBOUNCE,\n        [totalSize, totalSuccess, sampleSize, successFound],\n    )\n\n    // For the higlights\n    useEffect(() => {\n        const toHighlight = handleHighlight(opType, sampleSize, totalSize)\n        setHighlight(toHighlight)\n    }, [opType, sampleSize, totalSize])\n\n    // for rendering the loaders\n    useEffect(() => {\n        setTableData(undefined)\n        setChartData(undefined)\n        setResults(defaultResults)\n        setValidResults(false)\n        setProbabilities(undefined)\n    }, [totalSize, totalSuccess, successFound])\n\n    // Debouncing the table and chart calculations\n    useDebounce(\n        () => {\n            if (validInput) {\n                console.time('Table generation ⌚')\n                const newTable = createTable(\n                    successFound,\n                    totalSize,\n                    totalSuccess,\n                )\n                console.timeEnd('Table generation ⌚')\n\n                console.time('Analysis generation ⌚')\n                const analysis = getAnalysis(\n                    successFound,\n                    totalSize,\n                    totalSuccess,\n                ) // TODO: add J(r) (1)\n                console.timeEnd('Analysis generation ⌚')\n\n                console.time('Chart data ⌚')\n                const probs_from_table = newTable.content.map((item) => ({\n                    label: item[0],\n                    value: item[1],\n                }))\n                console.timeEnd('Chart data ⌚')\n\n                setTableData(newTable)\n                setResults(analysis) // TODO: add J(r) (1)\n                setChartData(probs_from_table)\n                setValidResults(true)\n            }\n        },\n        INPUT_DEBOUNCE,\n        [totalSize, totalSuccess, successFound, validInput],\n    )\n\n    useEffect(() => {\n        const valid = !!(totalSize && totalSuccess && successFound)\n        setValidInput(valid)\n    }, [totalSize, totalSuccess, successFound])\n\n    return (\n        <PrecisionContext.Provider value={roundPrecision}>\n            <PageTemplate\n                noInputs={{ a: 'N', b: 'r', c: 'R' }}\n                validInput={validInput}\n                input={\n                    <HyperPascalInput\n                        handleTotalSize={setTotalSize} // N\n                        handleTotalSuccess={setTotalSuccess} // R\n                        handleSampleSize={setSampleSize} // n\n                        handleSuccessFound={setSuccessFound} // r\n                        setRoundPrecision={setRoundPrecision}\n                        extraPanel={\n                            <PunctualOrAccumulated\n                                handleTab={setOpType}\n                                variable={sampleSize}\n                                validInput={validInput}\n                                probabilities={probabilities}\n                                varLabel=\"n\"\n                            />\n                        }\n                    />\n                }\n                analysis={\n                    <ResultGroup\n                        validResults={validResults}\n                        results={results}\n                    />\n                }\n                table={\n                    <ProbabilityTable\n                        table={tableData ?? defaultTable}\n                        isLoading={!tableData}\n                        highlight={highlight}\n                    />\n                }\n                chart={\n                    chartData ? (\n                        <ProbabilityChart\n                            variable=\"n\"\n                            data={chartData}\n                            highlight={highlight}\n                        />\n                    ) : (\n                        <Spinner size={100} />\n                    )\n                }\n            />\n        </PrecisionContext.Provider>\n    )\n}\n\nexport default HyperPascal\n","import React, { Suspense, useEffect, useState } from 'react'\nimport { useLocalStorage } from 'react-use'\nimport { dark, light } from './styles/colors'\nimport { ThemeProvider } from 'styled-components'\n\nimport { FocusStyleManager } from '@blueprintjs/core'\nimport Sidebar from './components/Sidebar'\nimport PageHeader from './components/PageHeader'\nimport { pageOptions, defaultPage } from './pages/available'\n\nimport { HashRouter, Route, Switch, useLocation } from 'react-router-dom'\nimport Binomial from './pages/Binomial'\nimport Pascal from './pages/Pascal'\nimport Home from './pages/Home'\n\nimport Hypergeometric from './pages/Hypergeometric'\nimport LoadingScreen from './components/LoadingScreen'\nimport NotFound404 from './pages/NotFound404'\nimport {\n    ViewPort,\n    SideContainer,\n    AppPageContainer,\n    PageFrame,\n} from './pages/layout'\nimport HyperPascal from './pages/HyperPascal'\n\nFocusStyleManager.onlyShowFocusOnTabs()\n\nfunction App() {\n    const location = useLocation()\n\n    const [isDark, setIsDark] = useLocalStorage('isDark', false)\n    const [currentPage, setCurrentPage] = useState(defaultPage)\n\n    const toggleTheme = () => {\n        setIsDark(!isDark)\n    }\n\n    // Select curent page form url\n    useEffect(() => {\n        const current_location = location.pathname.substring(1)\n\n        const page =\n            pageOptions.find(\n                (item) => item.url === current_location && !item.disabled,\n            ) ?? defaultPage\n\n        setCurrentPage(page)\n\n        // Google analytics\n        if (typeof (window as any).gtag === 'function') {\n            ;(window as any).gtag(\n                'set',\n                'page',\n                location.pathname + location.hash + location.search,\n            )\n            ;(window as any).gtag('send', 'pageview')\n        }\n\n        // eslint-disable-next-line\n    }, [location.pathname])\n\n    return (\n        <ThemeProvider theme={isDark ? dark : light}>\n            <ViewPort className={`.bp3-ui-text ${isDark ? 'bp3-dark' : ''}`}>\n                <Suspense fallback={<LoadingScreen />}>\n                    <SideContainer>\n                        <Sidebar current_page={currentPage} />\n                    </SideContainer>\n\n                    <AppPageContainer>\n                        <PageHeader\n                            title={currentPage.title}\n                            currentPage={currentPage}\n                            isDark={!!isDark}\n                            toggleTheme={toggleTheme}\n                        />\n                        <PageFrame>\n                            <HashRouter>\n                                <Switch>\n                                    <Route exact path=\"/binomial\">\n                                        <Binomial />\n                                    </Route>\n                                    <Route exact path=\"/pascal\">\n                                        <Pascal />\n                                    </Route>\n                                    <Route exact path=\"/hypergeometric\">\n                                        <Hypergeometric />\n                                    </Route>\n                                    <Route exact path=\"/hyperpascal\">\n                                        <HyperPascal />\n                                    </Route>\n                                    <Route exact path=\"/\">\n                                        <Home />\n                                    </Route>\n                                    <Route path=\"/\">\n                                        <NotFound404 />\n                                    </Route>\n                                </Switch>\n                            </HashRouter>\n                        </PageFrame>\n                    </AppPageContainer>\n                </Suspense>\n            </ViewPort>\n        </ThemeProvider>\n    )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry)\n                getFID(onPerfEntry)\n                getFCP(onPerfEntry)\n                getLCP(onPerfEntry)\n                getTTFB(onPerfEntry)\n            },\n        )\n    }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport '@blueprintjs/core/lib/css/blueprint.css'\nimport '@blueprintjs/table/lib/css/table.css'\nimport '@blueprintjs/select/lib/css/blueprint-select.css'\nimport '@blueprintjs/popover2/lib/css/blueprint-popover2.css'\nimport 'katex/dist/katex.min.css'\nimport './i18n'\nimport { HashRouter as Router } from 'react-router-dom'\n\nReactDOM.render(\n    <React.StrictMode>\n        <Router>\n            <App />\n        </Router>\n    </React.StrictMode>,\n    document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}