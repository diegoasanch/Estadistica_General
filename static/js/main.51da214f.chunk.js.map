{"version":3,"sources":["styles/colors.ts","components/Sidebar/styles.ts","components/Sidebar/Sidebar.tsx","components/PageHeader/styles.ts","i18n.ts","svg/uk.svg","svg/spain.svg","utils/internationalization.ts","components/SvgIcon/SvgIcon.tsx","components/SelectLang/SelectLang.tsx","components/PageHeader/PageHeader.tsx","pages/available.ts","pages/layout.ts","utils/determine_style.ts","contexts/inputs.ts","components/ChartTooltip/ChartTooltip.tsx","components/BinomialChart/BinomialChart.tsx","utils/arrays.ts","components/Result/Result.tsx","styles/display.ts","components/NoInputCards/No2/No2.tsx","components/BinomialProb/BinomialProb.tsx","components/ResultGroup/ResultGroup.tsx","components/BinomialTable/styles.ts","components/BinomialTable/BinomialTable.tsx","pages/PageTemplate/PageTemplate.tsx","components/InputGroups/BinomialInput/BinomialInput.tsx","functions/general.ts","functions/binomials.ts","functions/shared.ts","pages/Binomial/Binomial.tsx","components/InputGroups/PascalInput/PascalInput.tsx","functions/pascal.ts","pages/Pascal/Pascal.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["dark","background","text","sidebarText","sidebarBg","result","scrollBarBg","scrollBarThumb","chart_barNormal","chart_barHighlight","chart_gridColor","light","SidebarContainer","styled","nav","props","theme","Header","H1","SideMain","main","SideFooter","footer","PageSelect","Select","ofType","Sidebar","current_page","available_pages","setNewPage","translate","useTranslation","t","items","itemRenderer","item","handleClick","id","onClick","active","disabled","icon","onItemSelect","filterable","noResults","rightIcon","className","href","packageJSON","version","target","rel","StyledNavbar","Navbar","StyledSwitch","Switch","window","location","origin","pathname","i18n","use","Backend","LanguageDetector","initReactI18next","init","backend","loadPath","homepage","fallbackLng","debug","interpolation","escapeValue","i18n_localstorage","available_langs","flags","esFlag","enFlag","validLang","to_test","out","ImgContainer","img","SvgIcon","src","name","alt","LangSelect","SelectLang","useState","currentLang","setCurrentLang","langs","setLangs","useEffect","local","localStorage","getItem","lang","getLang","toRender","flag","console","log","newLang","changeLanguage","setItem","setLang","minimal","PageHeader","title","isDark","toggleTheme","align","Alignment","LEFT","RIGHT","alignIndicator","checked","onChange","innerLabel","innerLabelChecked","large","binomial","pageOptions","defaultPage","minSideBarWidth","ViewPort","div","SideContainer","AppPageContainer","PageFrame","Column","noGrow","height","width","noPad","margin","Row","Container","OverflowContainer","PageContainer","isCellHighlight","value","highlight","String","Array","includes","PrecisionContext","createContext","StyledDivider","Divider","ChartTooltip","payload","label","variable","isArray","innerPayload","sanitizeTooltipProps","roundPrecision","useContext","toFixed","BinomialChart","data","themeContext","ThemeContext","BarChart","CartesianGrid","strokeDasharray","XAxis","dataKey","tick","fill","YAxis","Tooltip","content","Bar","map","entry","index","color","BarColor","Cell","range","from","to","step","length","_","i","stringRange","StyledResult","Text","Result","precision","math","StyledCallout","Callout","NoNAndP","a","b","iconSize","BinomialProb","handleTab","validInput","probabilities","varLabel","isNaN","panel","punctual","No2","accum_left","accum_right","ResultGroup","results","validResults","displayValue","undefined","texLabel","StyledTable","Table","BinomialTable","table","isLoading","numRows","columnWidths","headers","concat","header","cellRenderer","row","col","intent","loading","renderCell","PageTemplate","input","analysis","chart","noInputs","BinomialInput","handleSampleSize","handleSuccessProb","handleSuccessFound","setRoundPrecision","extraPanel","sampleSize","min","onValueChange","minorStepSize","placeholder","max","stepSize","factorial","n","res","combinatory","binomialModel","r","p","accumulatedLeft","total","x","accumulatedRight","variance","stdDeviation","Math","sqrt","assymetry","kurtosis","partialLeftExpected","partialRightExpected","analysis_labels","defaultTable","defaultResults","Binomial","setSampleSize","successProbability","setSuccessProbability","NaN","successFound","setSuccessFound","setValidInput","setResults","setValidResults","setProbabilities","tableData","setTableData","chartData","setChartData","dataTo","setDataTo","setHighlight","opType","setOpType","handleType","getProbabilities","useDebounce","tab","hl","handleHighlight","newTable","push","createTable","getAnalysis","probs_from_table","Provider","valueNum","valueStr","parseFloat","size","PascalInput","probability","BinomialAccumulatedLeft","Pascal","dataFrom","setDataFrom","toHighlight","FocusStyleManager","onlyShowFocusOnTabs","App","useLocalStorage","setIsDark","history","useHistory","currentPage","setCurrentPage","split","page","find","fallback","selected","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.51da214f.chunk.js","sourcesContent":["import Itheme from '../types/theme'\n\nexport const dark: Itheme = {\n    background: '#2F3437',\n    text: '#EBEBEB',\n    sidebarText: '#EBEBEB',\n    sidebarBg: '#1B222A',\n    result: '#19A6FF',\n\n    scrollBarBg: '#262A2C',\n    scrollBarThumb: '#171D25',\n\n    chart_barNormal: '#828282',\n    chart_barHighlight: '#19A6FF',\n    chart_gridColor: '#555',\n}\n\nexport const light: Itheme = {\n    background: '#FFFFFF',\n    text: '#37352F',\n    sidebarText: '#37352F',\n    sidebarBg: '#EBEBEB',\n    result: '#0C527E',\n\n    scrollBarBg: '#EBEBEB',\n    scrollBarThumb: '#888',\n\n    chart_barNormal: '#414141',\n    chart_barHighlight: '#19A6FF',\n    chart_gridColor: '#CCCCCC'\n}\n","import { H1 } from '@blueprintjs/core'\nimport styled from 'styled-components'\n\nexport const SidebarContainer = styled.nav`\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n    width: 100%;\n    color: ${props => props.theme.sidebarText};\n    background-color: ${ props => props.theme.sidebarBg };\n    border-right: 3px solid \"#CACBCC\";\n`\n\nexport const Header = styled(H1)`\n    font-size: 3em !important;\n    line-height: 1.2em !important;\n    font-weight: bold;\n    word-wrap: break-word;\n    width: 100%;\n    padding: .5em .4em;\n`\n\nexport const SideMain = styled.main`\n    position: relative;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n`\n\nexport const SideFooter = styled.footer`\n    position: absolute;\n    bottom: 0;\n    width: 100%;\n    padding: 0 1em;\n    align-items: flex-start;\n`\n","import React from 'react'\nimport { Button, Divider, H4, H5, H6, Icon, MenuItem } from '@blueprintjs/core'\nimport { useTranslation } from 'react-i18next'\nimport { Select } from '@blueprintjs/select'\n\nimport { IPageInfo } from '../../types/pages'\nimport packageJSON from '../../../package.json'\nimport {\n    SidebarContainer,\n    Header,\n    SideMain,\n    SideFooter,\n} from './styles'\n\ntype IProps = {\n    readonly current_page: IPageInfo,\n    readonly available_pages: IPageInfo[],\n    setNewPage: (newItem: IPageInfo) => void,\n}\n\ntype IClickHandler = {\n    handleClick: (event: React.MouseEvent<HTMLElement, MouseEvent>) => void,\n}\n\nconst PageSelect = Select.ofType<IPageInfo>()\n\nconst Sidebar = ({\n    current_page,\n    available_pages,\n    setNewPage\n}: IProps ) => {\n\n    const { t: translate } = useTranslation();\n\n    // const initialContent = () => {\n    //     return current_page ? <MenuItem text={current_page} disabled /> : undefined\n    // }\n\n    const renderItem = (item: IPageInfo, {handleClick}: IClickHandler) => (\n\n        <MenuItem\n            key={item.id}\n            text={translate(`select-${item.id}`)}\n            onClick={handleClick}\n            active={current_page.id === item.id}\n            disabled={item.disabled}\n            icon={item.icon}\n        />\n\n    )\n\n    return (\n        <SidebarContainer>\n            <Header>\n                {translate('sidebar-header')}\n            </Header>\n\n            <Divider />\n\n            <SideMain>\n                <H4>\n                    {translate('distribution')}\n                </H4>\n                <PageSelect\n                    // initialContent={initialContent}\n                    items={available_pages}\n                    itemRenderer={renderItem}\n                    onItemSelect={setNewPage}\n                    filterable={false}\n                    noResults={<MenuItem text=\"No results.\" disabled={true} />}\n                >\n                    <Button\n                        icon=\"function\"\n                        text={translate(`select-${current_page.id}`)}\n                        rightIcon=\"caret-down\"\n                    />\n                </PageSelect>\n                <SideFooter>\n                    <H4>\n                        <Icon className=\"bp3-text-muted\" icon=\"git-branch\" />&nbsp;\n                        {translate('view-on')}&nbsp;\n                        <a href=\"https://github.com/diegoasanch/Estadistica_General\">\n                            GitHub\n                        </a>\n                    </H4>\n                    <H5 className=\"bp3-text-muted\">\n                        version: {packageJSON.version}\n                    </H5>\n                    <H6 className=\"bp3-text-muted\">\n                        <Icon icon=\"code\" />&nbsp;\n                        {translate('with')} 💖&nbsp;\n                        {translate('by')}&nbsp;\n                        <a href=\"https://github.com/diegoasanch\" target=\"_blank\" rel=\"noopener noreferrer\">\n                            Diego.\n                        </a>\n                    </H6>\n                </SideFooter>\n            </SideMain>\n        </SidebarContainer>\n    )\n}\n\nexport default Sidebar\n","import { Navbar } from '@blueprintjs/core'\nimport styled from 'styled-components'\nimport { Switch } from '@blueprintjs/core'\n\nexport const StyledNavbar = styled(Navbar)`\n    width: 100%;\n    position: sticky;\n    top: 0;\n    &.bp3-navbar {\n        background-color: ${ props => props.theme.sidebarBg};\n    }\n`\n\nexport const StyledSwitch = styled(Switch)`\n    margin: .2em;\n`\n","import i18n from 'i18next'\nimport Backend from 'i18next-http-backend'\nimport LanguageDetector from 'i18next-browser-languagedetector'\nimport { initReactI18next } from 'react-i18next'\nimport { homepage } from '../package.json'\n\nconst { origin, pathname } = window.location\n// console.log(origin, pathname)\n// console.log(`Deployed translations  ${homepage}/locales/{{lng}}/translation.json`)\n// console.log(`Local translations  ${origin}${pathname}/locales/{{lng}}/translation.json`)\n\ni18n\n    .use(Backend)\n    .use(LanguageDetector)\n    .use (initReactI18next)\n    .init({\n        backend: {\n          loadPath: (\n              process.env.NODE_ENV === 'production' ?\n              `${homepage}/locales/{{lng}}/translation.json`\n              :\n              `${origin}${pathname}/locales/{{lng}}/translation.json`\n            ),\n        },\n        fallbackLng: 'es',\n        debug: true,\n        interpolation: {\n            escapeValue: false\n        }\n    })\n\nexport default i18n\n","export default __webpack_public_path__ + \"static/media/uk.64f4888d.svg\";","export default __webpack_public_path__ + \"static/media/spain.12ca02a6.svg\";","import i18n from \"../i18n\"\nimport enFlag from '../svg/uk.svg'\nimport esFlag from '../svg/spain.svg'\n\nconst DEFAULT_LANG = 'es'\nconst i18n_localstorage = 'i18nextLng'\n\nexport type ILang = 'es' | 'en'\n\nconst available_langs: ILang[] = [\n    'es',\n    'en',\n]\n\nconst flags = {\n    'es': esFlag,\n    'en': enFlag,\n}\n\nconst setLang = (newLang: string): void => {\n    i18n.changeLanguage(newLang);\n    window.localStorage.setItem(i18n_localstorage, newLang)\n\n}\n\nconst getLang = (): ILang => {\n    const local = window.localStorage.getItem(i18n_localstorage) ?? 'es'\n    let lang : ILang = 'es'\n\n\n    if (local === 'es')\n        lang = 'es'\n    else if (local === 'en')\n        lang = 'en'\n\n    return lang\n\n    // For some reason this, does not work (should be type safe)\n    // if (available_langs.includes(local))\n    //     return local\n}\n\nconst validLang = (to_test: string): ILang => {\n    let out: ILang = 'es' // fallback\n\n    if (to_test === 'en')\n        out = 'en'\n\n    return out\n}\n\nexport {\n    DEFAULT_LANG,\n    available_langs,\n    flags,\n    setLang,\n    getLang,\n    validLang,\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst ImgContainer = styled.img`\n    height: 1.5em;\n`\n\ntype IProps = {\n    src: string,\n    name?: string\n}\n\nconst SvgIcon = ({ src, name }: IProps) => {\n    return (\n        <ImgContainer src={src} alt={name ?? 'svg-icon'} />\n    )\n}\n\nexport default SvgIcon\n","import React, { useEffect, useState } from 'react'\nimport { Select } from '@blueprintjs/select'\nimport { available_langs, validLang, getLang, ILang, setLang, flags } from '../../utils/internationalization'\nimport { Button, MenuItem } from '@blueprintjs/core'\nimport SvgIcon from '../SvgIcon'\n\nconst LangSelect = Select.ofType<string>()\n\ntype IClickHandler = {\n    handleClick: (event: React.MouseEvent<HTMLElement, MouseEvent>) => void,\n}\n\nconst SelectLang = () => {\n\n    const [currentLang, setCurrentLang] = useState<ILang>('es')\n    const [langs, setLangs] = useState<ILang[]>([])\n\n    const handleSelect = (item: string) => {\n        console.log({item})\n        let newLang = validLang(item)\n        setCurrentLang(newLang)\n        setLang(newLang)\n    }\n\n    useEffect(() => {\n        setCurrentLang(getLang())\n        setLangs(available_langs)\n    }, [])\n\n    const RenderLang = (item: string, {handleClick}: IClickHandler) => {\n        let toRender = validLang(item)\n        const flag = flags[toRender]\n\n        return (\n            <MenuItem\n                key={item}\n                text={item}\n                onClick={handleClick}\n                active={currentLang === item}\n                icon={<SvgIcon src={flag} name={currentLang} /> }\n            />\n        )\n    }\n\n    return (\n        <LangSelect\n            items={langs}\n            itemRenderer={RenderLang}\n            onItemSelect={handleSelect}\n            filterable={false}\n        >\n            <Button\n                icon=\"globe-network\"\n                text={currentLang}\n                rightIcon=\"caret-down\"\n                minimal\n            />\n        </LangSelect>\n    )\n}\n\nexport default SelectLang\n","import React from 'react'\nimport {\n    NavbarGroup,\n    NavbarHeading,\n    Alignment\n} from '@blueprintjs/core'\n\nimport { StyledNavbar, StyledSwitch } from './styles'\nimport { useTranslation } from 'react-i18next'\nimport SelectLang from '../SelectLang'\n\n\ntype Iprops = {\n    title: string,\n    readonly isDark: boolean,\n    toggleTheme: () => void,\n}\n\nconst PageHeader = ({ title, isDark, toggleTheme }: Iprops) => {\n\n    const { t } = useTranslation()\n\n    return (\n        <StyledNavbar>\n            <NavbarGroup align={Alignment.LEFT}>\n                <NavbarHeading>{t(title)}</NavbarHeading>\n            </NavbarGroup>\n\n            <NavbarGroup align={Alignment.RIGHT}>\n                <SelectLang />\n                <StyledSwitch\n                    alignIndicator={Alignment.RIGHT}\n                    checked={isDark}\n                    onChange={toggleTheme}\n                    innerLabel=\"🌞\"\n                    innerLabelChecked=\"🌚\"\n                    large\n                />\n            </NavbarGroup>\n        </StyledNavbar>\n    )\n}\n\nexport default PageHeader\n","import { IPageInfo } from \"../types/pages\"\n\n// All available pages\nconst binomial: IPageInfo = {\n    id: 'binomial',\n    title: 'pages-binomial',\n    disabled: false,\n}\n\nconst pascal: IPageInfo = {\n    id: 'pascal',\n    title: 'pages-pascal',\n    disabled: false,\n}\n\nconst coming_soon: IPageInfo = {\n    id: 'more_soon',\n    title: 'pages-binomial',\n    disabled: true,\n    icon: 'plus'\n}\n\n// Array of all of them\nconst pageOptions: IPageInfo[] = [\n    binomial,\n    pascal,\n    coming_soon,\n]\n\nconst defaultPage = binomial\n\nconst getAvailable = (): string[] => {\n    return pageOptions.map(item => item.id)\n}\n\nexport {\n    binomial,\n    pascal,\n    coming_soon,\n    pageOptions,\n    defaultPage,\n    getAvailable,\n}\n","import styled from 'styled-components'\n\n// const sideBarWidth = '20vw'\nconst minSideBarWidth = '250px'\n\ntype IContainer = {\n    width?: 'auto' |  '100%' | '' | 'max-content' | string ,\n    height?: string,\n    margin?: string,\n    noPad?: boolean,\n    noGrow?: boolean,\n}\n\nconst ViewPort = styled.div`\n    width: 100%;\n    height: 100vh;\n    display: flex;\n    flex-direction: row;\n\n    > * ::-webkit-scrollbar {\n        background-color: ${props => props.theme.scrollBarBg};\n        width: 10px;\n        height: 10px;\n        border-radius: 10px;\n    }\n    > * ::-webkit-scrollbar-thumb {\n        background-color: ${props => props.theme.scrollBarThumb};\n        border-radius: 5px;\n    }\n`\n\nconst SideContainer = styled.div`\n    width: ${minSideBarWidth};\n    height: 100%;\n    min-width: ${minSideBarWidth};\n    /* max-wid */\n`\n\nconst AppPageContainer = styled.div`\n    width: calc(100% - ${minSideBarWidth});\n    height: 100%;\n    overflow-y: auto;\n    min-width: ${minSideBarWidth};\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n`\n\nconst PageFrame = styled.main`\n    position: relative;\n    width: 100%;\n    overflow: auto;\n    margin: 0;\n    background-color: ${ props => props.theme.background };\n    color: ${props => props.theme.text };\n    max-width: 1050px;\n`\n\n\n\nconst Column = styled.div<IContainer>`\n    display: flex;\n    flex-direction: column;\n    flex-grow: ${props => props.noGrow ? 0 : 1};\n    height: ${ props => props.height ?? '100%'};\n    width: ${ props => props.width ?? '100%'};\n    min-width: max-content;\n\n    margin: ${props => (\n        props.noPad ? '0' : (\n            props.margin ?? '1em'\n        )\n    )};\n`\n\nconst Row = styled.div<IContainer>`\n    display: flex;\n    flex-direction: row;\n    margin: ${props => props.noPad ? '0' : 'inherit'};\n`\nconst Container = styled(Column)<IContainer>`\n    width: 100%;\n    height: 100%;\n    min-width: max-content;\n    margin: 0;\n`\nconst OverflowContainer = styled(Container)<IContainer>`\n    overflow: auto;\n`\n\nconst PageContainer = styled(Container)<IContainer>`\n    padding: 2em;\n    margin: 0;\n    overflow: auto;\n`\n\nexport {\n    ViewPort,\n    SideContainer,\n    PageFrame,\n    Column,\n    Row,\n    Container,\n    OverflowContainer,\n    AppPageContainer,\n    PageContainer,\n}\n","const isCellHighlight = (\n    value: number | string,\n    highlight: string | string[] | undefined,\n): boolean => {\n\n    let is_highlight\n    value = String(value)\n\n    if (typeof(highlight) === 'string')\n        is_highlight =  highlight === value\n\n    else if (highlight instanceof Array)\n        is_highlight = highlight.includes(value)\n    else\n        is_highlight = true\n\n    // console.log({ is_highlight, value, highlight })\n    return is_highlight\n}\n\nexport {\n    isCellHighlight\n}\n","import { createContext } from \"react\";\n\nconst PrecisionContext = createContext<number>(4)\n\nexport {\n    PrecisionContext,\n}\n","import React, { useContext } from 'react'\nimport { Card, Divider } from '@blueprintjs/core';\nimport styled from 'styled-components'\nimport { PrecisionContext } from '../../contexts/inputs';\n\nconst StyledDivider = styled(Divider)`\n    margin: .8em 0;\n`\n\ntype ITooltipProps = {\n    active: boolean,\n    label: string,\n    value: number,\n    variable: string,\n}\n\nconst sanitizeTooltipProps = (props: any): ITooltipProps => {\n    let { active, payload, label, variable } = props\n    active = !!active\n\n    let value = 0\n\n    if (typeof(label) !== 'string')\n        label = String(label)\n\n    if (Array.isArray(payload)) {\n        const innerPayload = payload[0]\n\n        if (typeof(innerPayload?.value) === 'number')\n            value = innerPayload.value\n    }\n\n    return { active, label, value, variable }\n}\n\nconst ChartTooltip = (props: any) => {\n\n    const { active, label, value, variable } = sanitizeTooltipProps(props)\n    const roundPrecision = useContext(PrecisionContext)\n    // console.log({ props, variable })\n\n    if (!active)\n        return <></>\n\n    return (\n        <Card>\n            <code>{ variable }</code> = {label}\n            <StyledDivider />\n            <code>P({label})</code> = {value.toFixed(roundPrecision)}\n        </Card>\n    )\n}\nexport default ChartTooltip\n","import React, { useContext } from 'react'\nimport { IBarChartItem } from '../../types/tables'\nimport { BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip } from 'recharts';\nimport { OverflowContainer } from '../../pages/layout';\nimport { ThemeContext } from 'styled-components'\nimport { isCellHighlight } from '../../utils/determine_style';\nimport ChartTooltip from '../ChartTooltip';\n\n\ntype IProps = {\n    data: IBarChartItem[],\n    highlight?: string | string[],\n    variable: string,\n}\n\nconst BinomialChart = ({ data, highlight, variable }: IProps ) => {\n\n    const themeContext = useContext(ThemeContext)\n\n    const BarColor = (entry: IBarChartItem): string => {\n        const is_highlight = isCellHighlight(entry.label, highlight)\n        return is_highlight ? themeContext.chart_barHighlight : themeContext.chart_barNormal;\n    }\n\n    return (\n        <OverflowContainer>\n            <BarChart\n                width={450}\n                height={300}\n                data={data}\n            >\n                <CartesianGrid strokeDasharray=\"5\" />\n                <XAxis dataKey=\"label\" tick={{ fill: themeContext.text}} />\n                <YAxis tick={{ fill: themeContext.text}} />\n                <Tooltip content={(props: any ) => (\n                    <ChartTooltip variable={variable} {...props} />\n                )} />\n\n                <Bar dataKey=\"value\">\n                    { data.map((entry, index) => {\n                        const color = BarColor(entry)\n                        return <Cell key={`cell-${index}`} fill={color} />\n                    })}\n                </Bar>\n            </BarChart>\n        </OverflowContainer>\n    )\n}\n\nexport default BinomialChart\n","/**\n * from and to inclusive\n * @param from\n * @param to\n * @param step\n * @returns\n */\nconst range = (from: number, to: number, step=1): number[] => {\n    const length = to - from\n    if (length > 0)\n        return [...Array(length + 1)].map((_, i) => from + i * step);\n    return []\n}\n\nconst stringRange = (from: number, to: number, step=1): string[] => {\n    return range(from, to, step).map(item => String(item))\n}\n\nexport {\n    range,\n    stringRange\n}\n","import React from 'react'\nimport { Text } from '@blueprintjs/core'\nimport styled from 'styled-components'\nimport TeX from '@matejmazur/react-katex'\n\nconst StyledResult = styled(Text)`\n    font-size: 1.4em;\n    margin: .2em;\n    margin-left: .5em;\n\n    .number {\n        font-weight: bold;\n        font-size: 1.2em;\n        color: ${props => props.theme.result};\n    }\n`\n\ntype IProps = {\n    name: string,\n    result: number | undefined,\n    precision: number,\n}\n\n/**\n * ## `name` string Will be rendered using [KaTeX](https://katex.org/docs/supported.html)\n * If result is undefined, an animation will be displayed\n */\nconst Result = ({ name, result, precision= 4 }: IProps) => {\n    return (\n        <StyledResult>\n\n            <TeX math={name + ' = '} />&nbsp;\n            <span className={`number` + (typeof(result) === 'undefined' ? ' bp3-skeleton' : '')}>\n                { result ?   // if no result, show skeleton loader animation\n                    result.toFixed(precision)\n                  :\n                    '0.000000' // just some placeholder for the skeleton\n                }\n            </span>\n        </StyledResult>)\n}\n\nexport default Result\n","import { Callout } from '@blueprintjs/core'\nimport styled from 'styled-components'\n\nconst StyledCallout = styled(Callout)`\n    width: max-content;\n    padding: 1.5em;\n`\n\nexport {\n    StyledCallout\n}\n","import React from 'react'\nimport { H3, Icon } from '@blueprintjs/core'\nimport { useTranslation } from 'react-i18next'\nimport { StyledCallout } from '../../../styles/display'\n\ntype IProps = {\n    a: string,\n    b?: string,\n}\n\nconst NoNAndP = ({ a, b }: IProps) => {\n    const { t } = useTranslation()\n\n    return (\n        <StyledCallout>\n            <H3>\n                <span className=\"bp3-text-muted\">\n                    <Icon icon=\"calculator\" iconSize={25} />&nbsp;\n                </span>\n                {t('specify')} <code>{a}</code>\n                { b &&\n                    <>\n                        &nbsp;{t('and')} <code>{b}</code>\n                    </>\n                }\n            </H3>\n        </StyledCallout>\n    )\n}\n\nexport default NoNAndP\n","import React, { useContext } from 'react'\nimport { Card, Tab, Tabs } from '@blueprintjs/core'\nimport TeX from '@matejmazur/react-katex'\nimport Result from '../Result'\nimport { IOperationType } from '../../types/pages'\nimport { IProbabilities } from '../../types/tables'\nimport No2 from '../NoInputCards/No2'\nimport { PrecisionContext } from '../../contexts/inputs'\n\ntype IProps = {\n    handleTab: (tab: IOperationType) => void,\n    variable: number,\n    validInput: boolean,\n    probabilities: IProbabilities | undefined,\n    varLabel: string,\n}\n\nconst BinomialProb = ({\n    handleTab,\n    variable,\n    validInput,\n    probabilities,\n    varLabel,\n}: IProps) => {\n\n    validInput = validInput && !isNaN(variable)\n    const roundPrecision = useContext(PrecisionContext)\n\n    return (\n        <Card>\n            <Tabs id=\"operation\" onChange={handleTab}>\n                <Tab\n                    title={<TeX math=\"P(r)\" />}\n                    id=\"p\"\n                    panel={\n                        !validInput ?\n                            <No2 a={varLabel} />\n                        :\n                            <Result\n                                name={`P(\\\\text{V.A.} = ${variable})`}\n                                result={probabilities?.punctual}\n                                precision={roundPrecision}\n                            />\n                    }\n                />\n                <Tab\n                    title={<TeX math=\"F(r)\"/>}\n                    id=\"f\"\n                    panel={\n                        !validInput ?\n                            <No2 a={varLabel} />\n                        :\n                            <Result\n                                name={`P(\\\\text{V.A.} \\\\leq ${variable})`}\n                                result={probabilities?.accum_left}\n                                precision={roundPrecision}\n                            />\n                    }\n                />\n                <Tab\n                    title={<TeX math=\"G(r)\"/>}\n                    id=\"g\"\n                    panel={\n                        !validInput ?\n                            <No2 a={varLabel} />\n                        :\n                            <Result\n                                name={`P(\\\\text{V.A.} \\\\geq ${variable})`}\n                                result={probabilities?.accum_right}\n                                precision={roundPrecision}\n                            />\n                    }\n                />\n            </Tabs>\n\n        </Card>\n    )\n}\n\nexport default BinomialProb\n","import React, { useContext } from 'react'\nimport { PrecisionContext } from '../../contexts/inputs'\nimport { IResult } from '../../types/tables'\nimport Result from '../Result/Result'\n\ntype IProps = {\n    results: IResult[],\n    validResults: boolean,\n}\n\nconst ResultGroup = ({ results, validResults }: IProps) => {\n\n    const roundPrecision = useContext(PrecisionContext)\n\n    return (\n        <>\n            { results.map(( item, index ) => {\n                const displayValue = validResults ? item.value : undefined\n                return (\n                    <Result\n                        name={item.texLabel}\n                        result={displayValue}\n                        precision={roundPrecision}\n                        key={`result-${index}`}\n                    />\n                )\n            })}\n        </>\n    )\n}\n\nexport default ResultGroup\n","import { Table } from '@blueprintjs/table'\nimport styled from 'styled-components'\n\nexport const StyledTable = styled(Table)`\n    height: min-content;\n`\n","import React, { useContext } from 'react'\nimport { Cell, Column } from '@blueprintjs/table'\nimport { ITable } from '../../types/tables'\nimport { isCellHighlight } from '../../utils/determine_style'\nimport { StyledTable } from './styles'\nimport { PrecisionContext } from '../../contexts/inputs'\n\ntype IProps = {\n    table: ITable,\n    isLoading: boolean,\n    highlight?: string | string[],\n}\n\n/**\n * The first column is the thinnest\n */\nconst getColumnWidths = (length: number) => {\n    return [35].concat(Array(length - 1).fill(75))\n}\n\nconst BinomialTable = ({ table, highlight, isLoading }: IProps) => {\n\n    const roundPrecision = useContext(PrecisionContext)\n\n    const renderCell = (row: number, col: number) => {\n        // Determine if higlightable from first value of row\n        const intent = isCellHighlight(table.content[row][0], highlight) ? 'primary' : 'none'\n\n        return (\n            <Cell intent={intent} loading={isLoading}>\n                { table.content[row][col]\n                    .toFixed(col ? roundPrecision : 0)\n                }\n            </Cell>\n        )\n    }\n\n    // console.table(table.content)\n\n    return (\n        <StyledTable\n            numRows={table.content.length}\n            columnWidths={getColumnWidths(table.headers.length)}\n        >\n            {table.headers.map((header: string, i: number) => (\n                <Column name={header} cellRenderer={row => renderCell(row, i)} />\n            ))}\n        </StyledTable>\n    )\n}\n\nexport default BinomialTable\n","import React from 'react'\nimport { Column, PageContainer, Row } from '../layout'\nimport { H1 } from '@blueprintjs/core'\nimport { useTranslation } from 'react-i18next'\nimport NoInput from '../../components/NoInputCards/No2'\n\n\n// For displaying the specify a and b card when no input\ntype INoInputs = {\n    a: string,\n    b: string,\n}\n\ntype IProps = {\n    input: JSX.Element,\n    analysis: JSX.Element,\n    table: JSX.Element,\n    chart: JSX.Element,\n    validInput: boolean,\n    noInputs: INoInputs\n}\n\n/**\n * This is a stateles component, it is intended to be the blueprint for all of\n * the pages, receives the page components to render and places them accordingly\n * @returns\n */\nconst PageTemplate = ({ input, analysis, table, chart, validInput, noInputs }: IProps) => {\n\n    const { t } = useTranslation()\n\n\n    return (\n        <PageContainer>\n            <Row>\n                <Column>\n                    <H1>Input</H1>\n                    { input }\n                </Column>\n                <Column>\n                    <H1>{t('analysis')}</H1>\n                    { validInput ?\n                        analysis\n                      :\n                        <NoInput {...noInputs} />\n                    }\n                </Column>\n            </Row>\n            <Row>\n                <Column width=\"max-content\" noGrow>\n                    <H1>{t('table')}</H1>\n                    { validInput ?\n                        table\n                      :\n                        <NoInput {...noInputs} />\n                    }\n                </Column>\n                <Column>\n                    <H1>{t('chart')}</H1>\n                    { validInput ?\n                        chart\n                      :\n                        <NoInput {...noInputs} />\n                    }\n                </Column>\n            </Row>\n        </PageContainer>\n    )\n}\n\nexport default PageTemplate\n","import { Label, NumericInput } from '@blueprintjs/core'\nimport React, { useContext } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { PrecisionContext } from '../../../contexts/inputs'\nimport { Column, Row } from '../../../pages/layout'\n\ntype StateSetter = (valueNum: number, valueStr: string) => void\n\ntype IProps = {\n    handleSampleSize: StateSetter,\n    handleSuccessProb: StateSetter,\n    handleSuccessFound: StateSetter,\n    setRoundPrecision: (value: number) => void,\n    extraPanel?: JSX.Element,\n    sampleSize: number,\n}\n\nconst BinomialInput = ({\n    handleSampleSize,\n    handleSuccessProb,\n    handleSuccessFound,\n    setRoundPrecision,\n    extraPanel,\n    sampleSize,\n\n}: IProps) => {\n\n    const { t } = useTranslation()\n    const roundPrecision = useContext(PrecisionContext)\n\n    return (\n        <Row noPad>\n            <Column margin=\".8em 1em\" noGrow >\n                <Label>\n                    <code>n</code> = {t('sample-size')}\n                    <NumericInput\n                        min={1}\n                        onValueChange={handleSampleSize}\n                        minorStepSize={0.0001}\n                        placeholder=\"n\"\n                    />\n                </Label>\n                <Label>\n                    <code>p</code> = {t('success-prob')}\n                    <NumericInput\n                        min={0}\n                        max={1}\n                        stepSize={0.1}\n                        onValueChange={handleSuccessProb}\n                        placeholder=\"p\"\n                    />\n                </Label>\n                <Label>\n                    <code>r</code> = {t('success-found')}\n                    <NumericInput\n                        min={0}\n                        onValueChange={handleSuccessFound}\n                        max={sampleSize}\n                        placeholder=\"r\"\n                    />\n                </Label>\n            </Column>\n            <Column margin=\".8em 1em\" noGrow >\n                <Label>\n                    {t('round-precision')} <code> (0.xf)</code>\n                    <NumericInput\n                        min={0}\n                        onValueChange={setRoundPrecision}\n                        value={roundPrecision ?? 'x'}\n                        placeholder=\"x\"\n                    />\n                </Label>\n                { extraPanel }\n            </Column>\n        </Row>\n    )\n}\n\nexport default BinomialInput\n","const factorial = (n: number): number => {\n    if (n === 0)\n        return 1\n\n    let res = 1\n    for (let i = 1; i <= n; i++)\n        res *= i\n    return res\n}\n\n/**\n * `a` choose `b`\n */\nconst combinatory = (a: number, b: number): number => {\n    if (a === b)\n        return 1\n\n    const numerator = factorial(a)\n    const denominator = factorial(b) * factorial(a - b)\n\n    return numerator / denominator\n}\n\nexport {\n    factorial,\n    combinatory,\n}\n","import { ITable, IProbabilities, IResult } from \"../types/tables\"\nimport { combinatory } from \"./general\"\n\n\n\nconst binomialModel = (r: number, n: number, p: number): number => {\n    const nCr = combinatory(n, r)\n    const result = nCr * (p ** r) * ((1 - p) ** (n - r))\n    return result\n}\n\nconst accumulatedLeft = (r: number, n: number, p: number): number => {\n    let total = 0\n\n    for (let x = 0; x <= r; x++)\n        total += binomialModel(x, n, p)\n\n    return total\n}\n\nconst accumulatedRight = (r: number, n: number, p: number): number => {\n    let total = 0\n\n    for (let x = r; x <= n; x++)\n        total += binomialModel(x, n, p)\n\n    return total\n}\n\n/**\n * \"Esperanza matematica\" o mu\n * @param n Cantidad de observaciones\n * @param p Probabilidad de exito\n * @returns Esperanza matematica\n */\nconst expectedValue = (n: number, p: number): number => {\n    return n * p\n}\n\nconst variance = (n: number, p: number): number => {\n    return n * p * (1 - p)\n}\n\nconst stdDeviation = (n: number, p: number): number => {\n    return Math.sqrt(variance(n, p))\n}\n\nconst assymetry = (n: number, p: number): number => {\n    return (1 - 2 * p) / Math.sqrt(n * p * (1 - p))\n}\nconst kurtosis = (n: number, p: number): number => {\n    return 3 + ((1 - 6 * p * (1 - p)) / (n * p * (1 - p)))\n}\n\nconst partialLeftExpected = (r: number, n: number, p: number): number => {\n    let total = 0\n    for (let x = 0; x <= r; x++)\n        total += (x * binomialModel(x, n, p))\n    return total\n}\nconst partialRightExpected = (r: number, n: number, p: number): number => {\n    let total = 0\n    for (let x = r; x <= n; x++)\n        total += (x * binomialModel(x, n, p))\n    return total\n}\n\n\nconst createTable = (\n    n: number,\n    p: number,\n    from?: number,\n    to?: number,\n): ITable => {\n\n    const headers = ['r', 'P(r)', 'F(r)', 'G(r)', 'H(r)', 'J(r)']\n    const content: number[][] = []\n\n    from = from ?? 0\n    to = to ?? n\n\n    for (let r = from; r <= to; r++ ) {\n        content.push([\n            r,\n            binomialModel(r, n, p),\n            accumulatedLeft(r, n, p),\n            accumulatedRight(r, n, p),\n            partialLeftExpected(r, n, p),\n            partialRightExpected(r, n, p),\n        ])\n    }\n    return {headers, content}\n}\n\nconst analysis_labels = {\n    expected: \"E(r) = \\\\mu\",\n    variance: \"V(r) = \\\\sigma^2\",\n    std_dev: \"D(r) = \\\\sigma\",\n    assymetry: \"As = \\\\alpha_3\",\n    kurtosis: \"Ku = \\\\alpha_4\"\n}\n\nconst getAnalysis = (sampleSize: number, successProbability: number): IResult[]  => {\n    const results: IResult[] = [\n        {\n            texLabel: analysis_labels.expected,\n            value: expectedValue(sampleSize, successProbability),\n        },\n        {\n            texLabel: analysis_labels.variance,\n            value: variance(sampleSize, successProbability),\n        },\n        {\n            texLabel: analysis_labels.std_dev,\n            value: stdDeviation(sampleSize, successProbability),\n        },\n        {\n            texLabel: analysis_labels.assymetry,\n            value: assymetry(sampleSize, successProbability),\n        },\n        {\n            texLabel: analysis_labels.kurtosis,\n            value: kurtosis(sampleSize, successProbability),\n        },\n    ]\n\n    return results\n}\n\nconst getProbabilities = (r: number, n: number, p: number): IProbabilities => {\n    const results: IProbabilities = {\n        punctual: binomialModel(r, n, p),\n        accum_left: accumulatedLeft(r, n, p),\n        accum_right: accumulatedRight(r, n, p),\n    }\n    return results\n}\n\nconst defaultTable: ITable = {\n    headers: ['r', 'P(r)', 'F(r)', 'G(r)', 'H(r)', 'J(r)'],\n    content: [\n        [0, 0, 0 ,0, 0, 0], [0, 0, 0 ,0, 0, 0],\n        [0, 0, 0 ,0, 0, 0], [0, 0, 0 ,0, 0, 0],\n        [0, 0, 0 ,0, 0, 0], [0, 0, 0 ,0, 0, 0],\n        [0, 0, 0 ,0, 0, 0], [0, 0, 0 ,0, 0, 0],\n        [0, 0, 0 ,0, 0, 0], [0, 0, 0 ,0, 0, 0],\n    ]\n}\n\nexport {\n    binomialModel,\n    accumulatedLeft,\n    accumulatedRight,\n    expectedValue,\n    variance,\n    stdDeviation,\n    assymetry,\n    kurtosis,\n    partialLeftExpected,\n    partialRightExpected,\n    createTable,\n    getAnalysis,\n    getProbabilities,\n    defaultTable,\n}\n","import { IResult } from \"../types/tables\"\n\nconst analysis_labels = {\n    expected: \"E(r) = \\\\mu\",\n    variance: \"V(r) = \\\\sigma^2\",\n    std_dev: \"D(r) = \\\\sigma\",\n    assymetry: \"As = \\\\alpha_3\",\n    kurtosis: \"Ku = \\\\alpha_4\"\n}\n\nconst defaultResults: IResult[] = [\n    { texLabel: analysis_labels.expected, value: 0 }\n]\n\nexport {\n    analysis_labels,\n    defaultResults\n}\n","import React, { useEffect, useState } from 'react'\nimport BinomialChart from '../../components/BinomialChart'\nimport { IOperationType } from '../../types/pages'\nimport { stringRange } from '../../utils/arrays'\n\nimport BinomialProb from '../../components/BinomialProb'\nimport ResultGroup from '../../components/ResultGroup'\nimport BinomialTable from '../../components/BinomialTable'\nimport { useDebounce } from 'react-use'\n\nimport { IBarChartItem, ITable, IProbabilities, IResult } from '../../types/tables'\nimport { Spinner } from '@blueprintjs/core'\nimport PageTemplate from '../PageTemplate'\nimport { PrecisionContext } from '../../contexts/inputs'\n\nimport BinomialInput from '../../components/InputGroups/BinomialInput'\nimport {\n    createTable,\n    defaultTable,\n    getAnalysis,\n    getProbabilities\n} from '../../functions/binomials'\nimport { defaultResults } from '../../functions/shared'\n\nfunction Binomial() {\n\n    const [sampleSize, setSampleSize] = useState(0) // n\n    const [successProbability, setSuccessProbability] = useState(0) // p\n    const [successFound, setSuccessFound] = useState<number>(NaN) // r\n    const [validInput, setValidInput] = useState(false)\n\n    const [roundPrecision, setRoundPrecision] = useState(5)\n    const [results, setResults] = useState<IResult[]>(defaultResults)\n    const [validResults, setValidResults] = useState(false)\n    const [probabilities, setProbabilities] = useState<IProbabilities | undefined>()\n\n    const [tableData, setTableData] = useState<ITable | undefined>()\n    const [chartData, setChartData] = useState<IBarChartItem[] | undefined>(([ {label: '', value: 0} ]) as IBarChartItem[])\n\n    // const [dataFrom, setDataFrom] = useState<number>(0)\n    const [dataTo, setDataTo] = useState(0)\n    const [highlight, setHighlight] = useState<string | string[]>('')\n    const [opType, setOpType] = useState<IOperationType>('p')\n\n    const handleSampleSize = (valueNum: number, valueStr: string ) => {\n        setSampleSize(parseFloat(valueStr) ?? 0)\n    }\n    const handleSuccessProb = (valueNum: number, valueStr: string ) => {\n        setSuccessProbability(parseFloat(valueStr) ?? 0)\n    }\n    const handleSuccessFound = (valueNum: number, valueStr: string ) => {\n        setSuccessFound(parseFloat(valueStr) ?? 0)\n        setProbabilities(undefined)\n    }\n    const handleTab = (tab: IOperationType) => {\n        setOpType(tab)\n    }\n\n    const handleHighlight = (tab: IOperationType, r: number, n: number) => {\n        let hl: string | string[]\n\n        if (tab === 'f')\n            hl = stringRange(0, r)\n        else if (tab === 'g')\n            hl = stringRange(r, n)\n        else\n            hl = String(r)\n\n        setHighlight(hl)\n    }\n\n    const handleType = (r: number, n: number, p: number) => {\n        setProbabilities(getProbabilities(r, n, p))\n    }\n\n    // For the calculations\n    useDebounce(() => {\n        handleType( successFound, sampleSize, successProbability)\n    }, 300, [sampleSize, successProbability, successFound])\n\n    useEffect(() => {\n        handleHighlight(opType, successFound, dataTo)\n    }, [successFound, dataTo, opType])\n\n    // for rendering the loaders\n    useEffect(() => {\n        setTableData(undefined)\n        setChartData(undefined)\n        setResults(defaultResults)\n        setValidResults(false)\n    }, [sampleSize, successProbability])\n\n    // Debouncing the calculations\n    useDebounce(() => {\n        const newTable = createTable(sampleSize, successProbability)\n        const analysis = getAnalysis(sampleSize, successProbability)\n\n        const probs_from_table = newTable.content.map(item => ({\n            label: String(item[0]),\n            value: item[1],\n        }))\n\n        setTableData(newTable)\n        setChartData(probs_from_table)\n        setDataTo(sampleSize)\n        setResults(analysis)\n        setValidResults(true)\n\n        // console.table(probs_from_table)\n\n    }, 300, [sampleSize, successProbability])\n\n    useEffect(() => {\n        const valid = !!(sampleSize && successProbability)\n        setValidInput(valid)\n        // console.log({ valid, sampleSize, successProbability})\n    }, [sampleSize, successProbability])\n\n    return (\n        <PrecisionContext.Provider value={roundPrecision}>\n            <PageTemplate\n                noInputs={{ a: 'n', b: 'p'}}\n                validInput={validInput}\n                input={\n                    <BinomialInput\n                        handleSampleSize={handleSampleSize}\n                        handleSuccessProb={handleSuccessProb}\n                        handleSuccessFound={handleSuccessFound}\n                        setRoundPrecision={setRoundPrecision}\n                        sampleSize={sampleSize}\n                        extraPanel={\n                            <BinomialProb\n                                handleTab={handleTab}\n                                variable={successFound}\n                                validInput={validInput}\n                                probabilities={probabilities}\n                                varLabel=\"r\"\n                            />\n                        }\n                    />\n                }\n                analysis={\n                    <ResultGroup\n                        validResults={validResults}\n                        results={results}\n                    /> }\n                table={\n                    <BinomialTable\n                        table={tableData || defaultTable}\n                        isLoading={!tableData}\n                        highlight={highlight}\n                    />\n                }\n                chart={\n                    (chartData ?\n                        <BinomialChart\n                            variable=\"r\"\n                            data={chartData}\n                            highlight={highlight}\n                        />\n                    :\n                        <Spinner size={100} />\n                    )\n                }\n            />\n        </PrecisionContext.Provider>\n    )\n}\n\nexport default Binomial\n","import { Label, NumericInput } from '@blueprintjs/core'\nimport React, { useContext } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { PrecisionContext } from '../../../contexts/inputs'\nimport { Column, Row } from '../../../pages/layout'\n\ntype StateSetter = (valueNum: number, valueStr: string) => void\n\ntype IProps = {\n    handleSampleSize: StateSetter,\n    handleSuccessProb: StateSetter,\n    handleSuccessFound: StateSetter,\n    setRoundPrecision: (value: number) => void,\n    extraPanel?: JSX.Element,\n    sampleSize: number,\n}\n\nconst PascalInput = ({\n    handleSampleSize,\n    handleSuccessProb,\n    handleSuccessFound,\n    setRoundPrecision,\n    extraPanel,\n    sampleSize,\n\n}: IProps) => {\n\n    const { t } = useTranslation()\n    const roundPrecision = useContext(PrecisionContext)\n\n    return (\n        <Row noPad>\n            <Column margin=\".8em 1em\" noGrow >\n                <Label>\n                    <code>r</code> = {t('success-found')}\n                    <NumericInput\n                        min={0}\n                        onValueChange={handleSuccessFound}\n                        placeholder=\"r\"\n                    />\n                </Label>\n                <Label>\n                    <code>p</code> = {t('success-prob')}\n                    <NumericInput\n                        min={0}\n                        max={1}\n                        stepSize={0.1}\n                        onValueChange={handleSuccessProb}\n                        placeholder=\"p\"\n                    />\n                </Label>\n                <Label>\n                    <code>n</code> = {t('sample-size')}\n                    <NumericInput\n                        min={1}\n                        onValueChange={handleSampleSize}\n                        minorStepSize={1}\n                        placeholder=\"n\"\n                    />\n                </Label>\n            </Column>\n            <Column margin=\".8em 1em\" noGrow >\n                <Label>\n                    {t('round-precision')} <code> (0.xf)</code>\n                    <NumericInput\n                        min={0}\n                        onValueChange={setRoundPrecision}\n                        value={roundPrecision ?? 'x'}\n                        placeholder=\"x\"\n                    />\n                </Label>\n                { extraPanel }\n            </Column>\n        </Row>\n    )\n}\n\nexport default PascalInput\n","import { ITable, IProbabilities, IResult } from \"../types/tables\"\nimport { combinatory } from \"./general\"\nimport { analysis_labels } from \"./shared\"\nimport { accumulatedLeft as BinomialAccumulatedLeft } from './binomials'\n\nconst probability = (n: number, r: number, p: number): number => {\n    const nCr_1 = combinatory((n - 1), (r - 1))\n    const result = nCr_1 * p**r * (1 - p)**(n-r)\n    return result\n}\n\nconst accumulatedLeft = (n: number, r: number, p: number): number => {\n    let total = 0\n\n    for (let x = r; x <= n; x++)\n        total += probability(x, r, p)\n\n    return total\n}\n\nconst accumulatedRight = (n: number, r: number, p: number, limit= 40): number => {\n    return BinomialAccumulatedLeft(r-1, n-1, p)\n}\n\nconst expectedValue = (r: number, p: number): number => {\n    return r / p\n}\n\nconst variance = (r: number, p: number): number => {\n    return (r * (1 - p)) / p**2\n}\n\nconst stdDeviation = (r: number, p: number): number => {\n    return Math.sqrt(variance(r, p))\n}\n\nconst assymetry = (r: number, p: number): number => {\n    return (2 - p) / Math.sqrt(r * (1 - p))\n}\n\nconst kurtosis = (r: number, p: number): number => {\n    return 3 + ((p**2 - 6 * p + 6) / (r * (1 - p)))\n}\n\nconst partialLeftExpected = (n: number, r: number, p: number): number => {\n    return (r / p) * accumulatedLeft(n + 1, r + 1, p)\n}\n\nconst createTable = (\n    r: number,\n    p: number,\n    from= 0,\n    to= 60,\n): ITable => {\n\n    const headers = ['n', 'P(n)', 'F(n)', 'G(n)', 'H(n)']\n    // const headers = ['r', 'P(r)', 'F(r)', 'G(r)', 'H(r)', 'J(r)']\n    const content: number[][] = []\n\n    from = from ?? 0\n\n    for (let n = from; n <= to; n++ ) {\n        content.push([\n            n,\n            probability(n, r, p),\n            accumulatedLeft(n, r, p),\n            accumulatedRight(n, r, p),\n            partialLeftExpected(n, r, p),\n            // partialRightExpected(n, r, p),\n        ])\n    }\n    return {headers, content}\n}\n\n\nconst getAnalysis = (successFound: number, successProbability: number): IResult[]  => {\n    const results: IResult[] = [\n        {\n            texLabel: analysis_labels.expected,\n            value: expectedValue(successFound, successProbability),\n        },\n        {\n            texLabel: analysis_labels.variance,\n            value: variance(successFound, successProbability),\n        },\n        {\n            texLabel: analysis_labels.std_dev,\n            value: stdDeviation(successFound, successProbability),\n        },\n        {\n            texLabel: analysis_labels.assymetry,\n            value: assymetry(successFound, successProbability),\n        },\n        {\n            texLabel: analysis_labels.kurtosis,\n            value: kurtosis(successFound, successProbability),\n        },\n    ]\n\n    return results\n}\n\nconst getProbabilities = (n: number, r: number, p: number): IProbabilities => {\n    const results: IProbabilities = {\n        punctual: probability(n, r, p),\n        accum_left: accumulatedLeft(n, r, p),\n        accum_right: accumulatedRight(n, r, p),\n    }\n    return results\n}\n\nconst defaultTable: ITable = {\n    headers: ['r', 'P(r)', 'F(r)', 'G(r)', 'H(r)'],\n    content: [\n        [0, 0, 0 ,0, 0], [0, 0, 0 ,0, 0],\n        [0, 0, 0 ,0, 0], [0, 0, 0 ,0, 0],\n        [0, 0, 0 ,0, 0], [0, 0, 0 ,0, 0],\n        [0, 0, 0 ,0, 0], [0, 0, 0 ,0, 0],\n        [0, 0, 0 ,0, 0], [0, 0, 0 ,0, 0],\n    ]\n}\n\nexport {\n    probability,\n    accumulatedLeft,\n    accumulatedRight,\n    expectedValue,\n    stdDeviation,\n    assymetry,\n    kurtosis,\n    partialLeftExpected,\n    createTable,\n    getAnalysis,\n    getProbabilities,\n    defaultTable,\n}\n","import React, { useEffect, useState } from 'react'\nimport BinomialChart from '../../components/BinomialChart'\nimport { IOperationType } from '../../types/pages'\nimport { stringRange } from '../../utils/arrays'\n\nimport BinomialProb from '../../components/BinomialProb'\nimport ResultGroup from '../../components/ResultGroup'\nimport BinomialTable from '../../components/BinomialTable'\nimport { useDebounce } from 'react-use'\n\nimport { IBarChartItem, ITable, IProbabilities, IResult } from '../../types/tables'\nimport { Spinner } from '@blueprintjs/core'\nimport PageTemplate from '../PageTemplate'\nimport { PrecisionContext } from '../../contexts/inputs'\n\nimport PascalInput from '../../components/InputGroups/PascalInput'\nimport {\n    createTable,\n    defaultTable,\n    getAnalysis,\n    getProbabilities\n} from '../../functions/pascal'\nimport { defaultResults } from '../../functions/shared'\n\nconst handleHighlight = (tab: IOperationType, n: number, from: number, to: number): string | string[] => {\n    let hl: string | string[]\n\n    if (tab === 'f')\n        hl = stringRange(from, n)\n    else if (tab === 'g')\n        hl = stringRange(n, to)\n    else\n        hl = String(n)\n\n    return hl\n}\n\nfunction Pascal() {\n\n    const [sampleSize, setSampleSize] = useState(NaN) // n\n    const [successProbability, setSuccessProbability] = useState(NaN) // p\n    const [successFound, setSuccessFound] = useState<number>(NaN) // r\n    const [validInput, setValidInput] = useState(false)\n\n    const [roundPrecision, setRoundPrecision] = useState(5)\n    const [results, setResults] = useState<IResult[]>(defaultResults)\n    const [validResults, setValidResults] = useState(false)\n    const [probabilities, setProbabilities] = useState<IProbabilities | undefined>()\n\n    const [tableData, setTableData] = useState<ITable | undefined>()\n    const [chartData, setChartData] = useState<IBarChartItem[] | undefined>(([ {label: '', value: 0} ]) as IBarChartItem[])\n\n    const [dataFrom, setDataFrom] = useState<number>(0)\n    // TODO: fix this disable\n    // eslint-disable-next-line\n    const [dataTo, setDataTo] = useState(60)\n    const [highlight, setHighlight] = useState<string | string[]>('')\n    const [opType, setOpType] = useState<IOperationType>('p')\n\n    const handleSampleSize = (valueNum: number, valueStr: string ) => {\n        setSampleSize(parseFloat(valueStr) ?? 0)\n        setProbabilities(undefined)\n    }\n    const handleSuccessProb = (valueNum: number, valueStr: string ) => {\n        setSuccessProbability(parseFloat(valueStr) ?? 0)\n    }\n    const handleSuccessFound = (valueNum: number, valueStr: string ) => {\n        const value = parseFloat(valueStr) ?? 0\n        setSuccessFound(value)\n        setDataFrom(value)\n    }\n    const handleTab = (tab: IOperationType) => {\n        setOpType(tab)\n    }\n\n    const handleType = (r: number, n: number, p: number) => {\n        setProbabilities(getProbabilities(n, r, p))\n    }\n\n    // For the  calculations\n    useDebounce(() => {\n        handleType( successFound, sampleSize, successProbability)\n    }, 300, [sampleSize, successProbability, successFound])\n\n    // For the higlights\n    useEffect(() => {\n        const toHighlight = handleHighlight(opType, sampleSize, dataFrom, dataTo)\n        setHighlight(toHighlight)\n    }, [sampleSize, opType, dataTo, dataFrom])\n\n    // for rendering the loaders\n    useEffect(() => {\n        setTableData(undefined)\n        setChartData(undefined)\n        setResults(defaultResults)\n        setValidResults(false)\n        setProbabilities(undefined)\n\n\n    }, [successFound, successProbability])\n\n    // Debouncing the table and chart calculations\n    useDebounce(() => {\n        const newTable = createTable(successFound, successProbability, dataFrom)\n        const analysis = getAnalysis(successFound, successProbability) // TODO: check (1)\n\n        const probs_from_table = newTable.content.map(item => ({\n            label: String(item[0]),\n            value: item[1],\n        }))\n\n        setTableData(newTable)\n        setResults(analysis)   // TODO: check (1)\n        setChartData(probs_from_table)\n        setValidResults(true)\n\n        // console.table(probs_from_table)\n\n    }, 300, [successFound, successProbability])\n\n    useEffect(() => {\n        const valid = !!(successFound && successProbability)\n        setValidInput(valid)\n    }, [successFound, successProbability])\n\n    return (\n        <PrecisionContext.Provider value={roundPrecision}>\n            <PageTemplate\n                noInputs={{ a: 'r', b: 'p' }}\n                validInput={validInput}\n                input={\n                    <PascalInput\n                        handleSampleSize={handleSampleSize}\n                        handleSuccessProb={handleSuccessProb}\n                        handleSuccessFound={handleSuccessFound}\n                        setRoundPrecision={setRoundPrecision}\n                        sampleSize={sampleSize}\n                        extraPanel={\n                            <BinomialProb\n                                handleTab={handleTab}\n                                variable={sampleSize}\n                                validInput={validInput}\n                                probabilities={probabilities}\n                                varLabel=\"n\"\n                            />\n                        }\n                    />\n                }\n                analysis={\n                    <ResultGroup\n                        validResults={validResults}\n                        results={results}\n                    /> }\n                table={\n                    <BinomialTable\n                        table={tableData || defaultTable}\n                        isLoading={!tableData}\n                        highlight={highlight}\n                    />\n                }\n                chart={\n                    (chartData ?\n                        <BinomialChart\n                            variable=\"n\"\n                            data={chartData}\n                            highlight={highlight}\n                        />\n                    :\n                        <Spinner size={100} />\n                    )\n                }\n            />\n        </PrecisionContext.Provider>\n    )\n}\n\nexport default Pascal\n","import React, { Suspense, useEffect, useState } from 'react'\nimport { useLocalStorage } from 'react-use'\nimport { dark, light } from './styles/colors'\nimport { ThemeProvider } from 'styled-components'\n\nimport { FocusStyleManager, Spinner } from \"@blueprintjs/core\"\nimport Sidebar from './components/Sidebar'\nimport PageHeader from './components/PageHeader'\nimport { pageOptions, defaultPage } from './pages/available'\n\nimport { IPageInfo } from './types/pages'\nimport {\n    ViewPort,\n    SideContainer,\n    AppPageContainer,\n    PageFrame\n} from './pages/layout'\nimport { HashRouter, Route, Switch, useHistory } from 'react-router-dom'\nimport Binomial from './pages/Binomial'\nimport Pascal from './pages/Pascal'\n\nFocusStyleManager.onlyShowFocusOnTabs()\n\nfunction App() {\n\n    const [isDark, setIsDark] = useLocalStorage('isDark', false)\n    const history = useHistory()\n    const [currentPage, setCurrentPage] = useState(defaultPage)\n\n    const toggleTheme = () => {\n        setIsDark(!isDark)\n    }\n\n    const selectPage = (selected: IPageInfo) => {\n        setCurrentPage(selected)\n        history.push('/' + selected.id)\n    }\n\n    useEffect(() => {\n        let location = history.location.pathname.split('/')[1]\n\n        // TODO: Maybe catch a 404 here ?\n        // const availablePages = getAvailable()\n        // if (!location || !availablePages.includes(location))\n        //     location = defaultPage.id\n\n        const page = pageOptions.find(\n            item => item.id === location && !item.disabled\n        ) ?? defaultPage\n\n\n        console.log(\"Current page\")\n        console.log(location, page)\n        setCurrentPage(page)\n    // eslint-disable-next-line\n    }, [])\n\n    return (\n        <Suspense fallback={<AppPageContainer> <Spinner /> </AppPageContainer>}>\n            <ThemeProvider theme={isDark ? dark : light}>\n                <ViewPort className={`.bp3-ui-text ${isDark ? 'bp3-dark' : ''}`}>\n\n                    <SideContainer>\n                        <Sidebar\n                            current_page={currentPage}\n                            available_pages={pageOptions}\n                            setNewPage={selectPage}\n                        />\n                    </SideContainer>\n\n                    <AppPageContainer>\n                        <PageHeader\n                            title={currentPage.title}\n                            isDark={!!isDark}\n                            toggleTheme={toggleTheme}\n                        />\n                        <PageFrame>\n\n                            <HashRouter>\n                                <Switch>\n                                    <Route exact path=\"/binomial\">\n                                        <Binomial />\n                                    </Route>\n                                    <Route exact path=\"/pascal\">\n                                        <Pascal />\n                                    </Route>\n                                </Switch>\n                            </HashRouter>\n\n                        </PageFrame>\n                    </AppPageContainer>\n\n                </ViewPort>\n            </ThemeProvider>\n        </Suspense>\n\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport \"@blueprintjs/table/lib/css/table.css\";\nimport '@blueprintjs/select/lib/css/blueprint-select.css'\nimport 'katex/dist/katex.min.css';\nimport './i18n'\nimport { HashRouter as Router } from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}